#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('LudoAppV2:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(http);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
io.on('connection', function(socket){
	debug('Listening on ' + socket.id);
});

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/*
        for (let x = 4; x < this.playerOne.pieces.length; x++) {
            homeboard.removePieceFromHomeBoard(this.playerOne.pieces[x]);
            exitedBoard.addPieceToActiveBoard(this.playerOne.pieces[x]);
            this.playerOne.pieces[x].setExited();
            this.playerOne.pieces[x].visible = false;
        }
        let p1 = this.playerOne.pieces[0];
        homeboard.removePieceFromHomeBoard(p1);
        // this.setOnWayOutPieceParameters(p1, 2, States.onWayOut, onWayOutBoard);
        this.setActivePieceParameters(p1, 19, States.Active, activeboard);

        let p2 = this.playerOne.pieces[1];
        homeboard.removePieceFromHomeBoard(p2);
        this.setOnWayOutPieceParameters(p2, 4, States.onWayOut, onWayOutBoard);
        // this.setActivePieceParameters(p2, 51, States.Active, activeboard);

        let p3 = this.playerOne.pieces[3];
        homeboard.removePieceFromHomeBoard(p3);
        this.setOnWayOutPieceParameters(p3, 4, States.onWayOut, onWayOutBoard);
        // this.setActivePieceParameters(p3, 50, States.Active, activeboard);
        let p4 = this.playerTwo.pieces[1];
        homeboard.removePieceFromHomeBoard(p4);
        // this.setOnWayOutPieceParameters(p4, 3, States.onWayOut, onWayOutBoard);
        this.setActivePieceParameters(p4, 51, States.Active, activeboard);

        let p5 = this.playerTwo.pieces[5];
        homeboard.removePieceFromHomeBoard(p5);
        // this.setOnWayOutPieceParameters(p5, 3, States.onWayOut, onWayOutBoard);
        this.setActivePieceParameters(p5, 49, States.Active, activeboard);

        let p6 = this.playerTwo.pieces[6];
        homeboard.removePieceFromHomeBoard(p6);
        // this.setOnWayOutPieceParameters(p5, 3, States.onWayOut, onWayOutBoard);
        this.setActivePieceParameters(p6, 50, States.Active, activeboard);
        */
