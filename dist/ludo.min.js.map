{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","node_modules/angular2-uuid/index.js","node_modules/typescript-collections/dist/lib/BSTree.js","node_modules/typescript-collections/dist/lib/Bag.js","node_modules/typescript-collections/dist/lib/Dictionary.js","node_modules/typescript-collections/dist/lib/FactoryDictionary.js","node_modules/typescript-collections/dist/lib/Heap.js","node_modules/typescript-collections/dist/lib/LinkedDictionary.js","node_modules/typescript-collections/dist/lib/LinkedList.js","node_modules/typescript-collections/dist/lib/MultiDictionary.js","node_modules/typescript-collections/dist/lib/MultiRootTree.js","node_modules/typescript-collections/dist/lib/PriorityQueue.js","node_modules/typescript-collections/dist/lib/Queue.js","node_modules/typescript-collections/dist/lib/Set.js","node_modules/typescript-collections/dist/lib/Stack.js","node_modules/typescript-collections/dist/lib/arrays.js","node_modules/typescript-collections/dist/lib/node_modules/typescript-collections/dist/lib/node_modules/browser-pack/_prelude.js","node_modules/typescript-collections/dist/lib/node_modules/typescript-collections/dist/lib/dist/lib/BSTree.js","node_modules/typescript-collections/dist/lib/node_modules/typescript-collections/dist/lib/dist/lib/Bag.js","node_modules/typescript-collections/dist/lib/node_modules/typescript-collections/dist/lib/dist/lib/Dictionary.js","node_modules/typescript-collections/dist/lib/node_modules/typescript-collections/dist/lib/dist/lib/FactoryDictionary.js","node_modules/typescript-collections/dist/lib/node_modules/typescript-collections/dist/lib/dist/lib/Heap.js","node_modules/typescript-collections/dist/lib/node_modules/typescript-collections/dist/lib/dist/lib/LinkedDictionary.js","node_modules/typescript-collections/dist/lib/node_modules/typescript-collections/dist/lib/dist/lib/LinkedList.js","node_modules/typescript-collections/dist/lib/node_modules/typescript-collections/dist/lib/dist/lib/MultiDictionary.js","node_modules/typescript-collections/dist/lib/node_modules/typescript-collections/dist/lib/dist/lib/MultiRootTree.js","node_modules/typescript-collections/dist/lib/node_modules/typescript-collections/dist/lib/dist/lib/PriorityQueue.js","node_modules/typescript-collections/dist/lib/node_modules/typescript-collections/dist/lib/dist/lib/Queue.js","node_modules/typescript-collections/dist/lib/node_modules/typescript-collections/dist/lib/dist/lib/Set.js","node_modules/typescript-collections/dist/lib/node_modules/typescript-collections/dist/lib/dist/lib/Stack.js","node_modules/typescript-collections/dist/lib/node_modules/typescript-collections/dist/lib/dist/lib/arrays.js","node_modules/typescript-collections/dist/lib/node_modules/typescript-collections/dist/lib/dist/lib/util.js","node_modules/typescript-collections/dist/lib/node_modules/typescript-collections/dist/lib/dist/lib/index.js","node_modules/typescript-collections/dist/lib/util.js","node_modules/typescript-logging/dist/commonjs/control/CategoryServiceControl.js","node_modules/typescript-logging/dist/commonjs/control/LogGroupControl.js","node_modules/typescript-logging/dist/commonjs/extension/ExtensionHelper.js","node_modules/typescript-logging/dist/commonjs/log/LoggerOptions.js","node_modules/typescript-logging/dist/commonjs/log/category/AbstractCategoryLogger.js","node_modules/typescript-logging/dist/commonjs/log/category/CategoryConsoleLoggerImpl.js","node_modules/typescript-logging/dist/commonjs/log/category/CategoryDelegateLoggerImpl.js","node_modules/typescript-logging/dist/commonjs/log/category/CategoryExtensionLoggerImpl.js","node_modules/typescript-logging/dist/commonjs/log/category/CategoryLogger.js","node_modules/typescript-logging/dist/commonjs/log/category/CategoryMessageBufferImpl.js","node_modules/typescript-logging/dist/commonjs/log/category/CategoryService.js","node_modules/typescript-logging/dist/commonjs/log/standard/AbstractLogger.js","node_modules/typescript-logging/dist/commonjs/log/standard/ConsoleLoggerImpl.js","node_modules/typescript-logging/dist/commonjs/log/standard/LoggerFactoryImpl.js","node_modules/typescript-logging/dist/commonjs/log/standard/LoggerFactoryService.js","node_modules/typescript-logging/dist/commonjs/log/standard/MessageBufferLoggerImpl.js","node_modules/typescript-logging/dist/commonjs/typescript-logging.js","node_modules/typescript-logging/dist/commonjs/utils/DataStructures.js","node_modules/typescript-logging/dist/commonjs/utils/JSONHelper.js","node_modules/typescript-logging/dist/commonjs/utils/MessageUtils.js","node_modules/typescript-logging/node_modules/stacktrace-js/node_modules/error-stack-parser/error-stack-parser.js","node_modules/typescript-logging/node_modules/stacktrace-js/node_modules/error-stack-parser/node_modules/stackframe/stackframe.js","node_modules/typescript-logging/node_modules/stacktrace-js/node_modules/stack-generator/node_modules/stackframe/stackframe.js","node_modules/typescript-logging/node_modules/stacktrace-js/node_modules/stack-generator/stack-generator.js","node_modules/typescript-logging/node_modules/stacktrace-js/node_modules/stacktrace-gps/node_modules/source-map/lib/array-set.js","node_modules/typescript-logging/node_modules/stacktrace-js/node_modules/stacktrace-gps/node_modules/source-map/lib/base64-vlq.js","node_modules/typescript-logging/node_modules/stacktrace-js/node_modules/stacktrace-gps/node_modules/source-map/lib/base64.js","node_modules/typescript-logging/node_modules/stacktrace-js/node_modules/stacktrace-gps/node_modules/source-map/lib/binary-search.js","node_modules/typescript-logging/node_modules/stacktrace-js/node_modules/stacktrace-gps/node_modules/source-map/lib/quick-sort.js","node_modules/typescript-logging/node_modules/stacktrace-js/node_modules/stacktrace-gps/node_modules/source-map/lib/source-map-consumer.js","node_modules/typescript-logging/node_modules/stacktrace-js/node_modules/stacktrace-gps/node_modules/source-map/lib/util.js","node_modules/typescript-logging/node_modules/stacktrace-js/node_modules/stacktrace-gps/stacktrace-gps.js","node_modules/typescript-logging/node_modules/stacktrace-js/stacktrace.js","source/ai/AIBrainBox.ts","source/ai/MockPiece.ts","source/entities/AIPlayer.ts","source/entities/ActiveBoard.ts","source/entities/Board.ts","source/entities/Dice.ts","source/entities/Die.ts","source/entities/ExitedBoard.ts","source/entities/HomeBoard.ts","source/entities/OnWayOutBoard.ts","source/entities/Path.ts","source/entities/Paths.ts","source/entities/Piece.ts","source/entities/PieceFactory.ts","source/entities/PiecePosition.ts","source/entities/Player.ts","source/enums/Actions.ts","source/enums/ColorType.ts","source/enums/MoveStatus.ts","source/enums/States.ts","source/logging/ConfigLog4j.ts","source/main.ts","source/movement/Movement.ts","source/rules/AbstractRules.ts","source/rules/ActiveRules.ts","source/rules/AllPossibleMoves.ts","source/rules/ExitedRules.ts","source/rules/HomeRules.ts","source/rules/Move.ts","source/rules/OnWayOutRules.ts","source/rules/RuleEnforcer.ts","source/rules/Rules.ts","source/rules/Scheduler.ts","source/states/Game.ts","source/states/Preloader.ts"],"names":["f","exports","module","define","amd","g","window","global","self","this","ludo","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","UUID","crypto","buf","Uint16Array","getRandomValues","pad4","random4","num","ret","toString","Math","floor","random","substring","util","Queue_1","BSTree","compareFunction","root","compare","defaultCompare","nElements","prototype","add","element","isUndefined","insertNode","createNode","clear","isEmpty","size","contains","searchNode","remove","node","removeNode","inorderTraversal","callback","inorderTraversalAux","stop","preorderTraversal","preorderTraversalAux","postorderTraversal","postorderTraversalAux","levelTraversal","levelTraversalAux","minimum","minimumAux","maximum","maximumAux","forEach","toArray","array","push","height","heightAux","cmp","leftCh","rightCh","transplant","n1","n2","parent","y","signal","queue","default","enqueue","dequeue","max","position","Object","defineProperty","value","Dictionary_1","Set_1","Bag","toStrFunction","toStrF","defaultToString","dictionary","nCopies","getValue","copies","setValue","count","containsKey","values","_i","values_1","j","toSet","toret","elements","elements_1","ele","k","v","Dictionary","table","toStr","key","pair","previousElement","undefined","keys","name_1","has","name_2","name_3","__extends","d","b","__","constructor","p","hasOwnProperty","create","FactoryDictionary","_super","defaultFactoryFunction","setDefault","defaultValue","currentValue","collections","arrays","Heap","data","leftChildIndex","nodeIndex","rightChildIndex","parentIndex","minIndex","leftChild","rightChild","siftUp","index","swap","siftDown","min","peek","removeRoot","obj","splice","equF","compareToEquals","LinkedDictionaryPair","unlink","prev","next","LinkedDictionary","head","tail","appendToTail","entry","lastNode","getLinkedDictionaryPair","replace","oldPair","newPair","existingPair","crawlNode","LinkedList","firstNode","item","newNode","nodeAtIndex","first","last","elementAtIndex","indexOf","equalsFunction","equalsF","defaultEquals","currentNode","previous","equals","other","eqF","equalsAux","removeElementAtIndex","reverse","current","temp","MultiDictionary","valuesEqualsFunction","allowDuplicateValues","dict","allowDuplicate","copy","_a","v_1","w","Direction","MultiRootTree","rootIds","nodes","initRootIds","initNodes","rootId","createEmptyNodeIfNotExist","nodeKey","nodeListItem","getRootIds","slice","getNodes","clone","getObject","toObject","flatten","traverse","startId","returnArray","level","idsList","id","hasParent","_this","extraPropsObject","childrenCount","extraPropsObject_1","moveIdBeforeId","moveId","beforeId","BEFORE","moveIdAfterId","afterId","AFTER","moveIdIntoId","insideId","atStart","INSIDE_AT_START","INSIDE_AT_END","swapRootIdWithRootId","withRootId","leftIndex","findRootId","rightIndex","swapRootPositionWithRootPosition","swapRootPosition","withRootPosition","deleteId","rootDeleteId","nodeAndSubNodesDelete","nodeRefrencesDelete","insertIdBeforeId","insertId","foundRootIdIndex","insertIdIntoRoot","foundNodeIdIndex","findNodeId","insertIdIntoNode","insertIdAfterId","belowId","insertIdIntoId","nodeInsertAtEnd","rootInsertAtEnd","length_1","length_2","direction","sourceId","sourceRootIndex","targetId","targetRootIndex","rootDelete","nodeInsertAtStart","nodeDeleteAtIndex","swapArrayElements","arr","indexA","indexB","toDeleteLater","nodeDelete","findNode","unshift","rootInsertAtStart","Heap_1","PriorityQueue","heap","reverseCompareFunction","el","LinkedList_1","Queue","list","elem","Set","toStringFunction","intersection","otherSet","set","union","difference","isSubsetOf","isSub","Stack","pop","lastIndexOf","frequency","freq","array1","array2","concat","array_1","listComponent","./Queue","./util","2","./Dictionary","./Set","3","4","5","./arrays","6","7","8","9","10","./Heap","11","./LinkedList","12","13","14","15","isString","makeString","join","prop","isFunction","func","_hasOwnProperty","typescript-collections","_arrays","Bag_1","BSTree_1","LinkedDictionary_1","DataStructures_1","CategoryService_1","LoggerOptions_1","CategoryServiceControlImpl","help","console","log","_help","example","_example","showSettings","result","StringBuilder","service","_getCategoryService","_getCategories","category","_processCategory","change","settings","categories","logLevel","formatEnum","showCategoryName","showTimestamp","addResult","recursive","LogLevel","fromString","logFormat","DateFormatEnum","applyChanges","cat","categorySettings","getCategorySettings","dateFormat","showTimeStamp","_applyToCategory","reset","original","getOriginalCategorySettings","indent","append","name","LoggerType","loggerType","children","child","apply","CategoryServiceFactory","getRuntimeSettings","idCategory","getRootCategories","getCategoryById","LoggerFactoryService_1","LoggerControlImpl","listFactories","rtSettingsFactories","_getRuntimeSettingsLoggerFactories","appendLine","rtSettingsFactory","getName","idx_1","TuplePair","result_1","setting","x","logGroupRuntimeSettings","getLogGroupRuntimeSettings","groupSetting","logGroupRule","regExp","source","idFactory","loggerFactoriesSettings","LoggerFactoryControlImpl","getLoggerFactoryControl","_getSettings","getRuntimeSettingsForLoggerFactories","LFService","_settings","logGroupRuntimeSetting","showLoggerName","_getLogGroupRunTimeSettingsFor","group","idGroup","settings_1","_checkIndex","MessageUtils_1","ExtensionHelper","register","registered","listener","evt","msg","processMessageFromExtension","removeEventListener","addEventListener","from","type","enableExtensionIntegration","valueRequest","catsApplied","applyLogLevel","categoryId","sendCategoriesRuntimeUpdateMessage","sendCategoryLogMessage","categoryIds","getCategories","map","content","errorAsStack","getErrorAsStack","formattedMessage","MessageFormatUtils","renderDefaultMessage","getLevel","message","getMessage","resolvedErrorMessage","isResolvedErrorMessage","sendMessage","CategoryServiceImpl","getInstance","catLevels","Array","catSettings","sendRootCategoriesToExtension","getCategoryAsJSON","parentId","cats","_applyLogLevelRecursive","getAllCategories","addCats","allCats","catChild","postMessage","val","toLowerCase","Trace","Debug","Info","Warn","Fatal","Default","YearMonthDayTime","YearDayMonthWithFullTime","YearDayMonthTime","DateFormat","dateSeparator","_formatEnum","_dateSeparator","get","enumerable","configurable","LogFormat","_showTimeStamp","_showLoggerName","_dateFormat","CategoryLogFormat","_showCategoryName","CategoryLogMessageImpl","error","date","ready","_resolvedErrorMessage","_errorAsStack","_message","_error","_categories","_date","_level","_logFormat","_ready","setErrorAsStack","stack","getError","getDate","getLogFormat","isReady","setReady","AbstractCategoryLogger","rootCategory","runtimeSettings","allMessages","trace","arguments","_log","debug","info","warn","fatal","resolved","tracec","_logc","debugc","infoc","warnc","errorc","fatalc","resolvedc","logc","getRootCategory","createDefaultLogMessage","_logInternal","logCategories","this_1","getCategoryPath","actualError","logMessage","Date","addTail","processMessages","logMessage_1","renderError","then","msgs","getSize","getHead","removeHead","doLog","AbstractCategoryLogger_1","CategoryConsoleLoggerImpl","fullMsg","logged","CategoryDelegateLoggerImpl","delegate","_delegate","ExtensionHelper_1","CategoryExtensionLoggerImpl","Category","_children","_logLevel","_id","nextId","_name","_parent","registerCategory","currentId","CategoryMessageBufferLoggerImpl","messages","getMessages","CategoryConsoleLoggerImpl_1","CategoryDelegateLoggerImpl_1","CategoryExtensionLoggerImpl_1","CategoryMessageBufferImpl_1","CategoryRuntimeSettings","callBackLogger","Console","_category","_loggerType","_callBackLogger","CategoryDefaultConfiguration","Custom","_defaultConfig","_rootCategories","_categoryRuntimeSettings","SimpleMap","_categoryOriginalRuntimeSettings","_rootLoggers","_INSTANCE","getLogger","rootCategoryExists","logger","createRootLogger","put","setDefaultConfiguration","config","newRuntimeSettings_1","newOriginalRuntimeSettings_1","defSettings","defSettingsOriginal","settingsOriginal","setConfigurationCategory","applyChildren","resetRootLogger","tupleLogger","initializeRuntimeSettingsForCategory","filter","MessageBuffer","LogMessageInternalImpl","loggerName","_loggerName","_logGroupRule","AbstractLogger","_allMessages","_open","_logGroupRuntimeSettings","isTraceEnabled","isDebugEnabled","isInfoEnabled","isWarnEnabled","isErrorEnabled","isFatalEnabled","getLogLevel","isOpen","close","renderDefaultLog4jMessage","createMessage","message_1","AbstractLogger_1","ConsoleLoggerImpl","ConsoleLoggerImpl_1","MessageBufferLoggerImpl_1","LoggerFactoryImpl","options","_loggers","_logGroupRuntimeSettingsIndexed","_loggerToLogGroupSettings","configure","_options","closeLoggers","logGroupRules","LogGroupRuntimeSettings","named","enabled","loadLogger","isEnabled","getLogGroupRuntimeSettingsByIndex","idx","getLogGroupRuntimeSettingsByLoggerName","nameLogger","test","MessageBufferLoggerImpl","LoggerFactoryImpl_1","LogGroupRule","_regExp","LoggerFactoryOptions","_logGroupRules","_enabled","addLogGroupRule","rule","setEnabled","LFServiceImpl","_nameCounter","_mapFactories","createLoggerFactory","createNamedLoggerFactory","exists","factory","createDefaultOptions","getLogGroupSettings","nameLoggerFactory","idLogGroupRule","getLoggerFactoryRuntimeSettingsByName","RegExp","INSTANCE_SERVICE","getLogControl","LogGroupControl_1","getCategoryControl","CategoryServiceControl_1","CategoryLogger_1","m","LinkedNode","_previous","_next","_value","addHead","createHeadIfNeeded","nextNode","newHeadNode","oldTailNode","getTailNode","newTailNode","oldHead","getTail","removeTail","previousNode","recurse","fn","cbFunction","_x","_y","line","separator","JSONTypeImpl","JSONBooleanType","JSONNumberType","JSONStringType","JSON","stringify","JSONObjectType","JSONArrayType","JSONNullType","JSONTypeConverter","toJSONType","JSONObject","addBoolean","checkName","checkValue","addNumber","addString","addNull","addArray","addObject","object","pretty","comma","buffer","JSONArray","objects","JSONHelper","categoryToJSON","_categoryToJSON","ST","renderDate","lpad","chars","padWith","howMany","res","fullYear","getFullYear","month","getMonth","day","hours","getHours","minutes","getMinutes","seconds","getSeconds","millis","getMilliseconds","ds","addStack","toUpperCase","format","Promise","resolve","fromError","offline","frames","stackStr","frame","ErrorStackParser","StackFrame","_map","thisArg","output","_filter","_indexOf","target","parse","stacktrace","parseOpera","match","parseV8OrIE","parseFFOrSafari","extractLocation","urlLike","parts","exec","split","tokens","locationParts","functionName","fileName","parseOpera9","parseOpera11","parseOpera10","lineRE","lines","len","argsRaw","functionCall","shift","args","_isNumber","isNaN","parseFloat","isFinite","lineNumber","columnNumber","setFunctionName","setArgs","setFileName","setLineNumber","setColumnNumber","setSource","getFunctionName","String","getArgs","TypeError","getFileName","getLineNumber","Number","getColumnNumber","getSource","_capitalize","str","_getter","props","booleanProps","numericProps","stringProps","arrayProps","getEvalOrigin","evalOrigin","setEvalOrigin","Boolean","StackGenerator","backtrace","opts","maxStackSize","curr","callee","$1","caller","ArraySet","_array","_set","fromArray","aArray","aAllowDuplicates","getOwnPropertyNames","aStr","sStr","toSetString","isDuplicate","at","aIdx","toVLQSigned","aValue","fromVLQSigned","isNegative","shifted","base64","encode","digit","encoded","vlq","VLQ_BASE","decode","aIndex","aOutParam","continuation","strLen","charCodeAt","charAt","rest","intToCharMap","number","charCode","recursiveSearch","aLow","aHigh","aNeedle","aHaystack","aCompare","aBias","mid","LEAST_UPPER_BOUND","GREATEST_LOWER_BOUND","search","ary","randomIntInRange","low","high","round","doQuickSort","comparator","pivotIndex","pivot","q","quickSort","SourceMapConsumer","aSourceMap","sourceMap","sections","IndexedSourceMapConsumer","BasicSourceMapConsumer","version","getArg","sources","names","sourceRoot","sourcesContent","mappings","file","_version","normalize","isAbsolute","relative","_names","_sources","_mappings","Mapping","generatedLine","generatedColumn","originalLine","originalColumn","lastOffset","column","_sections","url","offset","offsetLine","offsetColumn","generatedOffset","consumer","binarySearch","base64VLQ","fromSourceMap","__generatedMappings","_parseMappings","__originalMappings","_charIsMappingSeparator","c","aSourceRoot","GENERATED_ORDER","ORIGINAL_ORDER","eachMapping","aCallback","aContext","aOrder","context","order","_generatedMappings","_originalMappings","mapping","allGeneratedPositionsFor","aArgs","needle","_findMapping","compareByOriginalPositions","lastColumn","smc","_sourceRoot","_generateSourcesContent","_file","generatedMappings","destGeneratedMappings","destOriginalMappings","srcMapping","destMapping","segment","end","previousGeneratedColumn","previousOriginalLine","previousOriginalColumn","previousSource","previousName","cachedSegments","originalMappings","compareByGeneratedPositionsDeflated","aMappings","aLineName","aColumnName","aComparator","computeColumnSpans","nextMapping","lastGeneratedColumn","Infinity","originalPositionFor","hasContentsOfAllSources","some","sc","sourceContentFor","aSource","nullOnMissing","urlParse","fileUriAbsPath","scheme","path","generatedPositionFor","sectionIndex","section","bias","every","generatedPosition","sectionMappings","adjustedMapping","aName","aDefaultValue","aUrl","urlRegexp","auth","host","port","urlGenerate","aParsedUrl","aPath","part","up","aRoot","aPathUrl","aRootUrl","dataUrlRegexp","joined","substr","identity","isProtoString","fromSetString","mappingA","mappingB","onlyCompareOriginal","onlyCompareGenerated","strcmp","aStr1","aStr2","compareByGeneratedPositionsInflated","supportsNullProto","StackTraceGPS","SourceMap","_xdr","reject","req","XMLHttpRequest","open","onerror","onreadystatechange","readyState","status","responseText","send","_atob","b64str","atob","_parseJson","string","_findFunctionName","reFunctionDeclaration","reFunctionExpression","reFunctionEvaluation","maxLines","commentPos","_ensureSupportedEnvironment","_ensureStackFrameIsLegit","stackframe","_findSourceMappingURL","_extractLocationInfoFromSourceMap","rawSourceMap","sourceCache","mapConsumer","loc","mappedSource","ajax","_get","location","isDataUrl","sourceMapStart","encodedSource","xhrPromise","method","bind","pinpoint","getMappedLocation","mappedStackFrame","resolveMappedStackFrame","findFunctionName","guessedFunctionName","sourceMappingURL","base","StackTrace","_merge","second","_isShapedLikeParsableError","err","_filtered","stackframes","_generateError","generateArtificially","getSync","gps","all","sf","resolveOriginal","stackFrames","instrument","errback","__stacktraceOriginalFn","instrumented","deinstrument","report","errorMsg","setRequestHeader","reportPayload","Movement_1","Path_1","AIBrainBox","ruleEnforcer","movement","PieceMovement","constructMockpath","mockPiece","Path","isAtHome","isActive","constructActivePath","isOnWayOut","constructOnWayOutPath","States_1","MockPiece","piece","state","startPosition","entryIndex","color","uniqueId","startIndex","States","AtHome","Active","onWayOut","isExited","Exited","setAtHome","setActive","setExited","setOnWayOut","isAtEntryPoint","ConfigLog4j_1","Player_1","AIBrainBox_1","MockPiece_1","AIPlayer","game","playerId","turn","colorTypes","previousDoubleSix","isAI","aiRollDice","playAIPlayerMovement","logic","currentPossibleMovements","movements","getConcatenatedPossibleMoves","possibleMovesTotal","peckMove_1","bestMove","movementIndex","pieceMovement_1","piece_1","getPieceByUniqueId","pieceId","setTimeout","generateAIPieceMovement","piece_2","dice","roll","peckMove","movements_1","scheduler","mockDiceId","diceId","consumeDieMockValueSix","diceValueArr","getDieValueArrayByUniqueId","diceValue","addDiceValues","mockPieceCollision","newIndex","Player","Board_1","ActiveBoard","addPieceToActiveBoard","board","removePieceFromActiveBoard","containsInActiveBoard","Board","Collections","Die_1","Dice","imageId","dieOneUUID","dieTwoUUID","dieOne","Die","dieTwo","value1","value2","getHigherDieValue","setDicePlayerId","setPlayerId","getDieUniqueIdByValue","uniqueIds","ids","ids_1","ids_2","getSelectedDiceUniqueIds","diceUniqueIds","isSelected","consumeDieValueSix","ids_3","equalsValueSix","consume","ids_4","consumeDieValueById","ids_5","consumeDice","isDieOneConsumed","isConsumed","isDieTwoConsumed","bothDiceConsumed","rolledAtLeastOneSix","rolledDoubleSix","bothDiceHasLegitValues","pixels","diceArr","extFrame","removeLater","anchor","setTo","inputEnabled","rnd","pick","animation","animations","onComplete","rollComplete","events","onInputDown","selectActiveDie","alpha","unSelectActiveDie","rand","dispatch","resetDice","play","getFrame","isSpent","getPlayerId","Phaser","Sprite","ExitedBoard","HomeBoard","addPieceToHomeBoard","removePieceFromHomeBoard","containsInHomeBoard","OnWayOutBoard","addPieceToOnWayOutBoard","removePieceFromOnWayOutBoard","MoveStatus_1","moveStatus","MoveStatus","ShouldContinue","moveRemainder","setPath","ColorType_1","hlog","PiecePosition_1","ActivePath","getPath","to","entryPoint","remainder","ShouldBeExiting","getPiecePostionByIndex","PiecePosition","OnWayOutPaths","red_x","red_y","blue_x","blue_y","yellow_x","yellow_y","green_x","green_y","pieceOnWayoutPath","getPiecePath","ColorType","Red","Blue","Yellow","Green","Piece","homePosition","physics","enable","Physics","ARCADE","getEntryIndex","getStartIndex","scale","speedConstant","collidingPiece","setActivePiece","constructPath","movePiece","world","bringToTop","speed","getSpeed","movePieceTo","onCompleteMovement","moveToHome","visible","tween","Easing","Linear","None","distance","unsetActivePiece","select","unselect","ifYouAre","getColor","getState","setParameters","interpolation","linearInterpolation","Piece_1","angular2_uuid_1","PieceFactory","createNewPieces","colorType","getImageKey","createExistingPiece","PieceFactory_1","pieces","selectCurrentPiece","currentSelectedPiece","playerPieces","playerPieces_1","getActivePieces","activePieces","getFirstOccuringActivePiece","firstOccuringActivePiece","getHomePieces","homePieces","getOnWayOutPieces","onWayOutPieces","getPlayerOnWayOutPieces","getPlayerActivePieces","selectAllPiece","unselectAllPiece","allPiecesAreAtHome","allPiecesAtHome","allPiecesAreOnWayOut","allPiecesOnWayOut","pieceBelongsToMe","belongToMe","matchingPiece","hasActivePieces","active","hasOnWayOutPieces","hasHomePieces","home","hasExactlyOneActivePiece","activePieceCount","hasExactlyOnePieceLeft","pieceCount","printPieceCounts","homePieceCount","onw","onwayoutCount","exit","exitPieceCount","homePieceCounts","activePieceCounts","onwayoutPieceCounts","exitPieceCounts","Actions","typescript_logging_1","Preloader_1","Game_1","LudoGame","AUTO","Preloader","Game","start","onload","Paths","activePath","onWayOutPaths","currentIndex","finalIndex","Actions_1","Move_1","ActiveBoard_1","HomeBoard_1","AbstractRules","schedule","rulesPool","activeRulePool","Move","getBoard","getDieByValue","getNewRule","showFinalResults","addSpentRulesBackToPool","moves","moves_1","move","addToRulePool","willCrossEntryPoint","destinationIndex1","destinationIndex2","destinationIndex3","willCrossExitPoint","diceDistanceToExitPoint","getUniqueIdCollision","keys_1","generatePieceMovement","dieUniqueIds","action","PLAY","resetRule","AbstractRules_1","ActiveRules","generateMoves","player","activePieces_1","generateActivePieceMovement","AllPossibleMoves","setAllPossibleMoves","activeMoves","homeMoves","onWayOutMoves","getPieceMoves","states","resetMoves","activeMoveContainsDieId","concatMoves","ExitedRules","HomeRules","uniqueId1","uniqueId2","homePieces_1","homePieces_2","move_1","playBothDice","generateHomePieceMovement","DO_NOTHING","OnWayOutRules","onWayOutPieces_1","generateOnWayOutPieceMovement","Rules_1","RuleEnforcer","activeboard","homeboard","onWayOutBoard","exitedBoard","rollCounter","Rules","endOfDiceRoll","onCompletePieceMovement","generateAllPossibleMoves","currentPlayer","getCurrentPlayer","dieIds","pieceMovement","canPlay","possibleMovements","possibleMovements_1","filterConsumeDieValueSixMovement","checkCollision","backToHomePiece","addSpentMovesBackToPool","decodeMove","aiPieceMovement","readAllMoves","_b","_c","_d","_e","diceValues","diceValues_1","handleEmptyPossibleMovements","nextPlayer","getNextPlayer","analyzeAllPossibleMove","filterOnAllPiecesAreAtHome","filterOnHasExactlyOneActivePiece","filterOnNoActiveButHomeAndOnWayOutPieces","moveContainTwoDice","removeMoveWithSingleDieValues","onWayOutPieceMovements","onWayOutPiece","getDieMovementsOnPiece","illegalMove","diceIdsAreDistinct","distinctId","onwayoutShareDiceWithActivePiece","removeMoveWithDieValueSix","containsTwoDice","onWayOutPieces_2","onWayOutMovements","distinctIds","onWayOutMovements_1","activeMovements","sharedIds","onWayOutMovements_2","onwayoutMovement","movements_2","legalMoves","HomeRules_1","ActiveRules_1","OnWayOutRules_1","ExitedRules_1","AllPossibleMoves_1","activeBoard","homeBoard","activeMove","homeMove","onWayOutMove","exitedMove","allPossibleMoves","getOnWayOutBoard","getActiveBoard","getHomeBoard","decodeActiveMove","decodeHomeMove","decodeOnWayOutMove","checkBoardConsistencies","exitedPieces","totalPieces","playerActivePieces","playerHomePieces","playerOnwayoutPieces","playerExitPieces","players","EXIT","ROLL","SKIP","Scheduler","allPieces","getPieceOwner","owner","AIPlayer_1","OnWayOutBoard_1","ExitedBoard_1","Dice_1","Scheduler_1","RuleEnforcer_1","sprite","playerOnecolors","playerTwocolors","Signal","playBtn","make","button","playDice","buttonGroup","diceBtn","rollDice","stage","disableVisibilityChange","enforcer","playerOne","playerTwo","update","setActivePieceParameters","setOnWayOutPieceParameters","State","preload","load","spritesheet","image","startGame"],"mappings":"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","file":"ludo.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\nvar UUID = (function () {\n    function UUID() {\n        // no-op\n    }\n    UUID.UUID = function () {\n        if (typeof (window) !== \"undefined\" && typeof (window.crypto) !== \"undefined\" && typeof (window.crypto.getRandomValues) !== \"undefined\") {\n            // If we have a cryptographically secure PRNG, use that\n            // http://stackoverflow.com/questions/6906916/collisions-when-generating-uuids-in-javascript\n            var buf = new Uint16Array(8);\n            window.crypto.getRandomValues(buf);\n            return (this.pad4(buf[0]) + this.pad4(buf[1]) + \"-\" + this.pad4(buf[2]) + \"-\" + this.pad4(buf[3]) + \"-\" + this.pad4(buf[4]) + \"-\" + this.pad4(buf[5]) + this.pad4(buf[6]) + this.pad4(buf[7]));\n        }\n        else {\n            // Otherwise, just use Math.random\n            // https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript\n            // https://stackoverflow.com/questions/11605068/why-does-jshint-argue-against-bitwise-operators-how-should-i-express-this-code\n            return this.random4() + this.random4() + \"-\" + this.random4() + \"-\" + this.random4() + \"-\" +\n                this.random4() + \"-\" + this.random4() + this.random4() + this.random4();\n        }\n    };\n    UUID.pad4 = function (num) {\n        var ret = num.toString(16);\n        while (ret.length < 4) {\n            ret = \"0\" + ret;\n        }\n        return ret;\n    };\n    UUID.random4 = function () {\n        return Math.floor((1 + Math.random()) * 0x10000)\n            .toString(16)\n            .substring(1);\n    };\n    return UUID;\n}());\nexports.UUID = UUID;\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar util = require('./util');\nvar Queue_1 = require('./Queue');\nvar BSTree = (function () {\n    /**\n     * Creates an empty binary search tree.\n     * @class <p>A binary search tree is a binary tree in which each\n     * internal node stores an element such that the elements stored in the\n     * left subtree are less than it and the elements\n     * stored in the right subtree are greater.</p>\n     * <p>Formally, a binary search tree is a node-based binary tree data structure which\n     * has the following properties:</p>\n     * <ul>\n     * <li>The left subtree of a node contains only nodes with elements less\n     * than the node's element</li>\n     * <li>The right subtree of a node contains only nodes with elements greater\n     * than the node's element</li>\n     * <li>Both the left and right subtrees must also be binary search trees.</li>\n     * </ul>\n     * <p>If the inserted elements are custom objects a compare function must\n     * be provided at construction time, otherwise the <=, === and >= operators are\n     * used to compare elements. Example:</p>\n     * <pre>\n     * function compare(a, b) {\n     *  if (a is less than b by some ordering criterion) {\n     *     return -1;\n     *  } if (a is greater than b by the ordering criterion) {\n     *     return 1;\n     *  }\n     *  // a must be equal to b\n     *  return 0;\n     * }\n     * </pre>\n     * @constructor\n     * @param {function(Object,Object):number=} compareFunction optional\n     * function used to compare two elements. Must return a negative integer,\n     * zero, or a positive integer as the first argument is less than, equal to,\n     * or greater than the second.\n     */\n    function BSTree(compareFunction) {\n        this.root = null;\n        this.compare = compareFunction || util.defaultCompare;\n        this.nElements = 0;\n    }\n    /**\n     * Adds the specified element to this tree if it is not already present.\n     * @param {Object} element the element to insert.\n     * @return {boolean} true if this tree did not already contain the specified element.\n     */\n    BSTree.prototype.add = function (element) {\n        if (util.isUndefined(element)) {\n            return false;\n        }\n        if (this.insertNode(this.createNode(element)) !== null) {\n            this.nElements++;\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Removes all of the elements from this tree.\n     */\n    BSTree.prototype.clear = function () {\n        this.root = null;\n        this.nElements = 0;\n    };\n    /**\n     * Returns true if this tree contains no elements.\n     * @return {boolean} true if this tree contains no elements.\n     */\n    BSTree.prototype.isEmpty = function () {\n        return this.nElements === 0;\n    };\n    /**\n     * Returns the number of elements in this tree.\n     * @return {number} the number of elements in this tree.\n     */\n    BSTree.prototype.size = function () {\n        return this.nElements;\n    };\n    /**\n     * Returns true if this tree contains the specified element.\n     * @param {Object} element element to search for.\n     * @return {boolean} true if this tree contains the specified element,\n     * false otherwise.\n     */\n    BSTree.prototype.contains = function (element) {\n        if (util.isUndefined(element)) {\n            return false;\n        }\n        return this.searchNode(this.root, element) !== null;\n    };\n    /**\n     * Removes the specified element from this tree if it is present.\n     * @return {boolean} true if this tree contained the specified element.\n     */\n    BSTree.prototype.remove = function (element) {\n        var node = this.searchNode(this.root, element);\n        if (node === null) {\n            return false;\n        }\n        this.removeNode(node);\n        this.nElements--;\n        return true;\n    };\n    /**\n     * Executes the provided function once for each element present in this tree in\n     * in-order.\n     * @param {function(Object):*} callback function to execute, it is invoked with one\n     * argument: the element value, to break the iteration you can optionally return false.\n     */\n    BSTree.prototype.inorderTraversal = function (callback) {\n        this.inorderTraversalAux(this.root, callback, {\n            stop: false\n        });\n    };\n    /**\n     * Executes the provided function once for each element present in this tree in pre-order.\n     * @param {function(Object):*} callback function to execute, it is invoked with one\n     * argument: the element value, to break the iteration you can optionally return false.\n     */\n    BSTree.prototype.preorderTraversal = function (callback) {\n        this.preorderTraversalAux(this.root, callback, {\n            stop: false\n        });\n    };\n    /**\n     * Executes the provided function once for each element present in this tree in post-order.\n     * @param {function(Object):*} callback function to execute, it is invoked with one\n     * argument: the element value, to break the iteration you can optionally return false.\n     */\n    BSTree.prototype.postorderTraversal = function (callback) {\n        this.postorderTraversalAux(this.root, callback, {\n            stop: false\n        });\n    };\n    /**\n     * Executes the provided function once for each element present in this tree in\n     * level-order.\n     * @param {function(Object):*} callback function to execute, it is invoked with one\n     * argument: the element value, to break the iteration you can optionally return false.\n     */\n    BSTree.prototype.levelTraversal = function (callback) {\n        this.levelTraversalAux(this.root, callback);\n    };\n    /**\n     * Returns the minimum element of this tree.\n     * @return {*} the minimum element of this tree or undefined if this tree is\n     * is empty.\n     */\n    BSTree.prototype.minimum = function () {\n        if (this.isEmpty()) {\n            return undefined;\n        }\n        return this.minimumAux(this.root).element;\n    };\n    /**\n     * Returns the maximum element of this tree.\n     * @return {*} the maximum element of this tree or undefined if this tree is\n     * is empty.\n     */\n    BSTree.prototype.maximum = function () {\n        if (this.isEmpty()) {\n            return undefined;\n        }\n        return this.maximumAux(this.root).element;\n    };\n    /**\n     * Executes the provided function once for each element present in this tree in inorder.\n     * Equivalent to inorderTraversal.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element value, to break the iteration you can\n     * optionally return false.\n     */\n    BSTree.prototype.forEach = function (callback) {\n        this.inorderTraversal(callback);\n    };\n    /**\n     * Returns an array containing all of the elements in this tree in in-order.\n     * @return {Array} an array containing all of the elements in this tree in in-order.\n     */\n    BSTree.prototype.toArray = function () {\n        var array = [];\n        this.inorderTraversal(function (element) {\n            array.push(element);\n            return true;\n        });\n        return array;\n    };\n    /**\n     * Returns the height of this tree.\n     * @return {number} the height of this tree or -1 if is empty.\n     */\n    BSTree.prototype.height = function () {\n        return this.heightAux(this.root);\n    };\n    /**\n    * @private\n    */\n    BSTree.prototype.searchNode = function (node, element) {\n        var cmp = null;\n        while (node !== null && cmp !== 0) {\n            cmp = this.compare(element, node.element);\n            if (cmp < 0) {\n                node = node.leftCh;\n            }\n            else if (cmp > 0) {\n                node = node.rightCh;\n            }\n        }\n        return node;\n    };\n    /**\n    * @private\n    */\n    BSTree.prototype.transplant = function (n1, n2) {\n        if (n1.parent === null) {\n            this.root = n2;\n        }\n        else if (n1 === n1.parent.leftCh) {\n            n1.parent.leftCh = n2;\n        }\n        else {\n            n1.parent.rightCh = n2;\n        }\n        if (n2 !== null) {\n            n2.parent = n1.parent;\n        }\n    };\n    /**\n    * @private\n    */\n    BSTree.prototype.removeNode = function (node) {\n        if (node.leftCh === null) {\n            this.transplant(node, node.rightCh);\n        }\n        else if (node.rightCh === null) {\n            this.transplant(node, node.leftCh);\n        }\n        else {\n            var y = this.minimumAux(node.rightCh);\n            if (y.parent !== node) {\n                this.transplant(y, y.rightCh);\n                y.rightCh = node.rightCh;\n                y.rightCh.parent = y;\n            }\n            this.transplant(node, y);\n            y.leftCh = node.leftCh;\n            y.leftCh.parent = y;\n        }\n    };\n    /**\n    * @private\n    */\n    BSTree.prototype.inorderTraversalAux = function (node, callback, signal) {\n        if (node === null || signal.stop) {\n            return;\n        }\n        this.inorderTraversalAux(node.leftCh, callback, signal);\n        if (signal.stop) {\n            return;\n        }\n        signal.stop = callback(node.element) === false;\n        if (signal.stop) {\n            return;\n        }\n        this.inorderTraversalAux(node.rightCh, callback, signal);\n    };\n    /**\n    * @private\n    */\n    BSTree.prototype.levelTraversalAux = function (node, callback) {\n        var queue = new Queue_1.default();\n        if (node !== null) {\n            queue.enqueue(node);\n        }\n        while (!queue.isEmpty()) {\n            node = queue.dequeue();\n            if (callback(node.element) === false) {\n                return;\n            }\n            if (node.leftCh !== null) {\n                queue.enqueue(node.leftCh);\n            }\n            if (node.rightCh !== null) {\n                queue.enqueue(node.rightCh);\n            }\n        }\n    };\n    /**\n    * @private\n    */\n    BSTree.prototype.preorderTraversalAux = function (node, callback, signal) {\n        if (node === null || signal.stop) {\n            return;\n        }\n        signal.stop = callback(node.element) === false;\n        if (signal.stop) {\n            return;\n        }\n        this.preorderTraversalAux(node.leftCh, callback, signal);\n        if (signal.stop) {\n            return;\n        }\n        this.preorderTraversalAux(node.rightCh, callback, signal);\n    };\n    /**\n    * @private\n    */\n    BSTree.prototype.postorderTraversalAux = function (node, callback, signal) {\n        if (node === null || signal.stop) {\n            return;\n        }\n        this.postorderTraversalAux(node.leftCh, callback, signal);\n        if (signal.stop) {\n            return;\n        }\n        this.postorderTraversalAux(node.rightCh, callback, signal);\n        if (signal.stop) {\n            return;\n        }\n        signal.stop = callback(node.element) === false;\n    };\n    /**\n    * @private\n    */\n    BSTree.prototype.minimumAux = function (node) {\n        while (node.leftCh !== null) {\n            node = node.leftCh;\n        }\n        return node;\n    };\n    /**\n    * @private\n    */\n    BSTree.prototype.maximumAux = function (node) {\n        while (node.rightCh !== null) {\n            node = node.rightCh;\n        }\n        return node;\n    };\n    /**\n      * @private\n      */\n    BSTree.prototype.heightAux = function (node) {\n        if (node === null) {\n            return -1;\n        }\n        return Math.max(this.heightAux(node.leftCh), this.heightAux(node.rightCh)) + 1;\n    };\n    /*\n    * @private\n    */\n    BSTree.prototype.insertNode = function (node) {\n        var parent = null;\n        var position = this.root;\n        var cmp = null;\n        while (position !== null) {\n            cmp = this.compare(node.element, position.element);\n            if (cmp === 0) {\n                return null;\n            }\n            else if (cmp < 0) {\n                parent = position;\n                position = position.leftCh;\n            }\n            else {\n                parent = position;\n                position = position.rightCh;\n            }\n        }\n        node.parent = parent;\n        if (parent === null) {\n            // tree is empty\n            this.root = node;\n        }\n        else if (this.compare(node.element, parent.element) < 0) {\n            parent.leftCh = node;\n        }\n        else {\n            parent.rightCh = node;\n        }\n        return node;\n    };\n    /**\n    * @private\n    */\n    BSTree.prototype.createNode = function (element) {\n        return {\n            element: element,\n            leftCh: null,\n            rightCh: null,\n            parent: null\n        };\n    };\n    return BSTree;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = BSTree;\n//# sourceMappingURL=BSTree.js.map","\"use strict\";\nvar util = require('./util');\nvar Dictionary_1 = require('./Dictionary');\nvar Set_1 = require('./Set');\nvar Bag = (function () {\n    /**\n     * Creates an empty bag.\n     * @class <p>A bag is a special kind of set in which members are\n     * allowed to appear more than once.</p>\n     * <p>If the inserted elements are custom objects a function\n     * which converts elements to unique strings must be provided. Example:</p>\n     *\n     * <pre>\n     * function petToString(pet) {\n     *  return pet.name;\n     * }\n     * </pre>\n     *\n     * @constructor\n     * @param {function(Object):string=} toStrFunction optional function used\n     * to convert elements to strings. If the elements aren't strings or if toString()\n     * is not appropriate, a custom function which receives an object and returns a\n     * unique string must be provided.\n     */\n    function Bag(toStrFunction) {\n        this.toStrF = toStrFunction || util.defaultToString;\n        this.dictionary = new Dictionary_1.default(this.toStrF);\n        this.nElements = 0;\n    }\n    /**\n    * Adds nCopies of the specified object to this bag.\n    * @param {Object} element element to add.\n    * @param {number=} nCopies the number of copies to add, if this argument is\n    * undefined 1 copy is added.\n    * @return {boolean} true unless element is undefined.\n    */\n    Bag.prototype.add = function (element, nCopies) {\n        if (nCopies === void 0) { nCopies = 1; }\n        if (util.isUndefined(element) || nCopies <= 0) {\n            return false;\n        }\n        if (!this.contains(element)) {\n            var node = {\n                value: element,\n                copies: nCopies\n            };\n            this.dictionary.setValue(element, node);\n        }\n        else {\n            this.dictionary.getValue(element).copies += nCopies;\n        }\n        this.nElements += nCopies;\n        return true;\n    };\n    /**\n    * Counts the number of copies of the specified object in this bag.\n    * @param {Object} element the object to search for..\n    * @return {number} the number of copies of the object, 0 if not found\n    */\n    Bag.prototype.count = function (element) {\n        if (!this.contains(element)) {\n            return 0;\n        }\n        else {\n            return this.dictionary.getValue(element).copies;\n        }\n    };\n    /**\n     * Returns true if this bag contains the specified element.\n     * @param {Object} element element to search for.\n     * @return {boolean} true if this bag contains the specified element,\n     * false otherwise.\n     */\n    Bag.prototype.contains = function (element) {\n        return this.dictionary.containsKey(element);\n    };\n    /**\n    * Removes nCopies of the specified object to this bag.\n    * If the number of copies to remove is greater than the actual number\n    * of copies in the Bag, all copies are removed.\n    * @param {Object} element element to remove.\n    * @param {number=} nCopies the number of copies to remove, if this argument is\n    * undefined 1 copy is removed.\n    * @return {boolean} true if at least 1 element was removed.\n    */\n    Bag.prototype.remove = function (element, nCopies) {\n        if (nCopies === void 0) { nCopies = 1; }\n        if (util.isUndefined(element) || nCopies <= 0) {\n            return false;\n        }\n        if (!this.contains(element)) {\n            return false;\n        }\n        else {\n            var node = this.dictionary.getValue(element);\n            if (nCopies > node.copies) {\n                this.nElements -= node.copies;\n            }\n            else {\n                this.nElements -= nCopies;\n            }\n            node.copies -= nCopies;\n            if (node.copies <= 0) {\n                this.dictionary.remove(element);\n            }\n            return true;\n        }\n    };\n    /**\n     * Returns an array containing all of the elements in this big in arbitrary order,\n     * including multiple copies.\n     * @return {Array} an array containing all of the elements in this bag.\n     */\n    Bag.prototype.toArray = function () {\n        var a = [];\n        var values = this.dictionary.values();\n        for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {\n            var node = values_1[_i];\n            var element = node.value;\n            var copies = node.copies;\n            for (var j = 0; j < copies; j++) {\n                a.push(element);\n            }\n        }\n        return a;\n    };\n    /**\n     * Returns a set of unique elements in this bag.\n     * @return {collections.Set<T>} a set of unique elements in this bag.\n     */\n    Bag.prototype.toSet = function () {\n        var toret = new Set_1.default(this.toStrF);\n        var elements = this.dictionary.values();\n        for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {\n            var ele = elements_1[_i];\n            var value = ele.value;\n            toret.add(value);\n        }\n        return toret;\n    };\n    /**\n     * Executes the provided function once for each element\n     * present in this bag, including multiple copies.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element. To break the iteration you can\n     * optionally return false.\n     */\n    Bag.prototype.forEach = function (callback) {\n        this.dictionary.forEach(function (k, v) {\n            var value = v.value;\n            var copies = v.copies;\n            for (var i = 0; i < copies; i++) {\n                if (callback(value) === false) {\n                    return false;\n                }\n            }\n            return true;\n        });\n    };\n    /**\n     * Returns the number of elements in this bag.\n     * @return {number} the number of elements in this bag.\n     */\n    Bag.prototype.size = function () {\n        return this.nElements;\n    };\n    /**\n     * Returns true if this bag contains no elements.\n     * @return {boolean} true if this bag contains no elements.\n     */\n    Bag.prototype.isEmpty = function () {\n        return this.nElements === 0;\n    };\n    /**\n     * Removes all of the elements from this bag.\n     */\n    Bag.prototype.clear = function () {\n        this.nElements = 0;\n        this.dictionary.clear();\n    };\n    return Bag;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Bag; // End of bag\n//# sourceMappingURL=Bag.js.map","\"use strict\";\nvar util = require('./util');\nvar Dictionary = (function () {\n    /**\n     * Creates an empty dictionary.\n     * @class <p>Dictionaries map keys to values; each key can map to at most one value.\n     * This implementation accepts any kind of objects as keys.</p>\n     *\n     * <p>If the keys are custom objects a function which converts keys to unique\n     * strings must be provided. Example:</p>\n     * <pre>\n     * function petToString(pet) {\n     *  return pet.name;\n     * }\n     * </pre>\n     * @constructor\n     * @param {function(Object):string=} toStrFunction optional function used\n     * to convert keys to strings. If the keys aren't strings or if toString()\n     * is not appropriate, a custom function which receives a key and returns a\n     * unique string must be provided.\n     */\n    function Dictionary(toStrFunction) {\n        this.table = {};\n        this.nElements = 0;\n        this.toStr = toStrFunction || util.defaultToString;\n    }\n    /**\n     * Returns the value to which this dictionary maps the specified key.\n     * Returns undefined if this dictionary contains no mapping for this key.\n     * @param {Object} key key whose associated value is to be returned.\n     * @return {*} the value to which this dictionary maps the specified key or\n     * undefined if the map contains no mapping for this key.\n     */\n    Dictionary.prototype.getValue = function (key) {\n        var pair = this.table['$' + this.toStr(key)];\n        if (util.isUndefined(pair)) {\n            return undefined;\n        }\n        return pair.value;\n    };\n    /**\n     * Associates the specified value with the specified key in this dictionary.\n     * If the dictionary previously contained a mapping for this key, the old\n     * value is replaced by the specified value.\n     * @param {Object} key key with which the specified value is to be\n     * associated.\n     * @param {Object} value value to be associated with the specified key.\n     * @return {*} previous value associated with the specified key, or undefined if\n     * there was no mapping for the key or if the key/value are undefined.\n     */\n    Dictionary.prototype.setValue = function (key, value) {\n        if (util.isUndefined(key) || util.isUndefined(value)) {\n            return undefined;\n        }\n        var ret;\n        var k = '$' + this.toStr(key);\n        var previousElement = this.table[k];\n        if (util.isUndefined(previousElement)) {\n            this.nElements++;\n            ret = undefined;\n        }\n        else {\n            ret = previousElement.value;\n        }\n        this.table[k] = {\n            key: key,\n            value: value\n        };\n        return ret;\n    };\n    /**\n     * Removes the mapping for this key from this dictionary if it is present.\n     * @param {Object} key key whose mapping is to be removed from the\n     * dictionary.\n     * @return {*} previous value associated with specified key, or undefined if\n     * there was no mapping for key.\n     */\n    Dictionary.prototype.remove = function (key) {\n        var k = '$' + this.toStr(key);\n        var previousElement = this.table[k];\n        if (!util.isUndefined(previousElement)) {\n            delete this.table[k];\n            this.nElements--;\n            return previousElement.value;\n        }\n        return undefined;\n    };\n    /**\n     * Returns an array containing all of the keys in this dictionary.\n     * @return {Array} an array containing all of the keys in this dictionary.\n     */\n    Dictionary.prototype.keys = function () {\n        var array = [];\n        for (var name_1 in this.table) {\n            if (util.has(this.table, name_1)) {\n                var pair = this.table[name_1];\n                array.push(pair.key);\n            }\n        }\n        return array;\n    };\n    /**\n     * Returns an array containing all of the values in this dictionary.\n     * @return {Array} an array containing all of the values in this dictionary.\n     */\n    Dictionary.prototype.values = function () {\n        var array = [];\n        for (var name_2 in this.table) {\n            if (util.has(this.table, name_2)) {\n                var pair = this.table[name_2];\n                array.push(pair.value);\n            }\n        }\n        return array;\n    };\n    /**\n    * Executes the provided function once for each key-value pair\n    * present in this dictionary.\n    * @param {function(Object,Object):*} callback function to execute, it is\n    * invoked with two arguments: key and value. To break the iteration you can\n    * optionally return false.\n    */\n    Dictionary.prototype.forEach = function (callback) {\n        for (var name_3 in this.table) {\n            if (util.has(this.table, name_3)) {\n                var pair = this.table[name_3];\n                var ret = callback(pair.key, pair.value);\n                if (ret === false) {\n                    return;\n                }\n            }\n        }\n    };\n    /**\n     * Returns true if this dictionary contains a mapping for the specified key.\n     * @param {Object} key key whose presence in this dictionary is to be\n     * tested.\n     * @return {boolean} true if this dictionary contains a mapping for the\n     * specified key.\n     */\n    Dictionary.prototype.containsKey = function (key) {\n        return !util.isUndefined(this.getValue(key));\n    };\n    /**\n    * Removes all mappings from this dictionary.\n    * @this {collections.Dictionary}\n    */\n    Dictionary.prototype.clear = function () {\n        this.table = {};\n        this.nElements = 0;\n    };\n    /**\n     * Returns the number of keys in this dictionary.\n     * @return {number} the number of key-value mappings in this dictionary.\n     */\n    Dictionary.prototype.size = function () {\n        return this.nElements;\n    };\n    /**\n     * Returns true if this dictionary contains no mappings.\n     * @return {boolean} true if this dictionary contains no mappings.\n     */\n    Dictionary.prototype.isEmpty = function () {\n        return this.nElements <= 0;\n    };\n    Dictionary.prototype.toString = function () {\n        var toret = '{';\n        this.forEach(function (k, v) {\n            toret += \"\\n\\t\" + k + \" : \" + v;\n        });\n        return toret + '\\n}';\n    };\n    return Dictionary;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Dictionary; // End of dictionary\n//# sourceMappingURL=Dictionary.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Dictionary_1 = require('./Dictionary');\nvar util = require('./util');\nvar FactoryDictionary = (function (_super) {\n    __extends(FactoryDictionary, _super);\n    /**\n     * Creates an empty dictionary.\n     * @class <p>Dictionaries map keys to values; each key can map to at most one value.\n     * This implementation accepts any kind of objects as keys.</p>\n     *\n     * <p>The default factory function should return a new object of the provided\n     * type. Example:</p>\n     * <pre>\n     * function petFactory() {\n     *  return new Pet();\n     * }\n     * </pre>\n     *\n     * <p>If the keys are custom objects a function which converts keys to unique\n     * strings must be provided. Example:</p>\n     * <pre>\n     * function petToString(pet) {\n     *  return pet.name;\n     * }\n     * </pre>\n     * @constructor\n     * @param {function():V=} defaultFactoryFunction function used to create a\n     * default object.\n     * @param {function(Object):string=} toStrFunction optional function used\n     * to convert keys to strings. If the keys aren't strings or if toString()\n     * is not appropriate, a custom function which receives a key and returns a\n     * unique string must be provided.\n     */\n    function FactoryDictionary(defaultFactoryFunction, toStrFunction) {\n        _super.call(this, toStrFunction);\n        this.defaultFactoryFunction = defaultFactoryFunction;\n    }\n    /**\n     * Associates the specified default value with the specified key in this dictionary,\n     * if it didn't contain the key yet. If the key existed, the existing value will be used.\n     * @param {Object} key key with which the specified value is to be\n     * associated.\n     * @param {Object} defaultValue default value to be associated with the specified key.\n     * @return {*} previous value associated with the specified key, or the default value,\n     * if the key didn't exist yet.\n     */\n    FactoryDictionary.prototype.setDefault = function (key, defaultValue) {\n        var currentValue = _super.prototype.getValue.call(this, key);\n        if (util.isUndefined(currentValue)) {\n            this.setValue(key, defaultValue);\n            return defaultValue;\n        }\n        return currentValue;\n    };\n    /**\n     * Returns the value to which this dictionary maps the specified key.\n     * Returns a default value created by the factory passed in the constructor,\n     * if this dictionary contains no mapping for this key. The missing key will\n     * automatically be added to the dictionary.\n     * @param {Object} key key whose associated value is to be returned.\n     * @return {*} the value to which this dictionary maps the specified key or\n     * a default value if the map contains no mapping for this key.\n     */\n    FactoryDictionary.prototype.getValue = function (key) {\n        return this.setDefault(key, this.defaultFactoryFunction());\n    };\n    return FactoryDictionary;\n}(Dictionary_1.default));\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = FactoryDictionary;\n//# sourceMappingURL=FactoryDictionary.js.map","\"use strict\";\nvar collections = require('./util');\nvar arrays = require('./arrays');\nvar Heap = (function () {\n    /**\n     * Creates an empty Heap.\n     * @class\n     * <p>A heap is a binary tree, where the nodes maintain the heap property:\n     * each node is smaller than each of its children and therefore a MinHeap\n     * This implementation uses an array to store elements.</p>\n     * <p>If the inserted elements are custom objects a compare function must be provided,\n     *  at construction time, otherwise the <=, === and >= operators are\n     * used to compare elements. Example:</p>\n     *\n     * <pre>\n     * function compare(a, b) {\n     *  if (a is less than b by some ordering criterion) {\n     *     return -1;\n     *  } if (a is greater than b by the ordering criterion) {\n     *     return 1;\n     *  }\n     *  // a must be equal to b\n     *  return 0;\n     * }\n     * </pre>\n     *\n     * <p>If a Max-Heap is wanted (greater elements on top) you can a provide a\n     * reverse compare function to accomplish that behavior. Example:</p>\n     *\n     * <pre>\n     * function reverseCompare(a, b) {\n     *  if (a is less than b by some ordering criterion) {\n     *     return 1;\n     *  } if (a is greater than b by the ordering criterion) {\n     *     return -1;\n     *  }\n     *  // a must be equal to b\n     *  return 0;\n     * }\n     * </pre>\n     *\n     * @constructor\n     * @param {function(Object,Object):number=} compareFunction optional\n     * function used to compare two elements. Must return a negative integer,\n     * zero, or a positive integer as the first argument is less than, equal to,\n     * or greater than the second.\n     */\n    function Heap(compareFunction) {\n        /**\n         * Array used to store the elements od the heap.\n         * @type {Array.<Object>}\n         * @private\n         */\n        this.data = [];\n        this.compare = compareFunction || collections.defaultCompare;\n    }\n    /**\n     * Returns the index of the left child of the node at the given index.\n     * @param {number} nodeIndex The index of the node to get the left child\n     * for.\n     * @return {number} The index of the left child.\n     * @private\n     */\n    Heap.prototype.leftChildIndex = function (nodeIndex) {\n        return (2 * nodeIndex) + 1;\n    };\n    /**\n     * Returns the index of the right child of the node at the given index.\n     * @param {number} nodeIndex The index of the node to get the right child\n     * for.\n     * @return {number} The index of the right child.\n     * @private\n     */\n    Heap.prototype.rightChildIndex = function (nodeIndex) {\n        return (2 * nodeIndex) + 2;\n    };\n    /**\n     * Returns the index of the parent of the node at the given index.\n     * @param {number} nodeIndex The index of the node to get the parent for.\n     * @return {number} The index of the parent.\n     * @private\n     */\n    Heap.prototype.parentIndex = function (nodeIndex) {\n        return Math.floor((nodeIndex - 1) / 2);\n    };\n    /**\n     * Returns the index of the smaller child node (if it exists).\n     * @param {number} leftChild left child index.\n     * @param {number} rightChild right child index.\n     * @return {number} the index with the minimum value or -1 if it doesn't\n     * exists.\n     * @private\n     */\n    Heap.prototype.minIndex = function (leftChild, rightChild) {\n        if (rightChild >= this.data.length) {\n            if (leftChild >= this.data.length) {\n                return -1;\n            }\n            else {\n                return leftChild;\n            }\n        }\n        else {\n            if (this.compare(this.data[leftChild], this.data[rightChild]) <= 0) {\n                return leftChild;\n            }\n            else {\n                return rightChild;\n            }\n        }\n    };\n    /**\n     * Moves the node at the given index up to its proper place in the heap.\n     * @param {number} index The index of the node to move up.\n     * @private\n     */\n    Heap.prototype.siftUp = function (index) {\n        var parent = this.parentIndex(index);\n        while (index > 0 && this.compare(this.data[parent], this.data[index]) > 0) {\n            arrays.swap(this.data, parent, index);\n            index = parent;\n            parent = this.parentIndex(index);\n        }\n    };\n    /**\n     * Moves the node at the given index down to its proper place in the heap.\n     * @param {number} nodeIndex The index of the node to move down.\n     * @private\n     */\n    Heap.prototype.siftDown = function (nodeIndex) {\n        //smaller child index\n        var min = this.minIndex(this.leftChildIndex(nodeIndex), this.rightChildIndex(nodeIndex));\n        while (min >= 0 && this.compare(this.data[nodeIndex], this.data[min]) > 0) {\n            arrays.swap(this.data, min, nodeIndex);\n            nodeIndex = min;\n            min = this.minIndex(this.leftChildIndex(nodeIndex), this.rightChildIndex(nodeIndex));\n        }\n    };\n    /**\n     * Retrieves but does not remove the root element of this heap.\n     * @return {*} The value at the root of the heap. Returns undefined if the\n     * heap is empty.\n     */\n    Heap.prototype.peek = function () {\n        if (this.data.length > 0) {\n            return this.data[0];\n        }\n        else {\n            return undefined;\n        }\n    };\n    /**\n     * Adds the given element into the heap.\n     * @param {*} element the element.\n     * @return true if the element was added or fals if it is undefined.\n     */\n    Heap.prototype.add = function (element) {\n        if (collections.isUndefined(element)) {\n            return undefined;\n        }\n        this.data.push(element);\n        this.siftUp(this.data.length - 1);\n        return true;\n    };\n    /**\n     * Retrieves and removes the root element of this heap.\n     * @return {*} The value removed from the root of the heap. Returns\n     * undefined if the heap is empty.\n     */\n    Heap.prototype.removeRoot = function () {\n        if (this.data.length > 0) {\n            var obj = this.data[0];\n            this.data[0] = this.data[this.data.length - 1];\n            this.data.splice(this.data.length - 1, 1);\n            if (this.data.length > 0) {\n                this.siftDown(0);\n            }\n            return obj;\n        }\n        return undefined;\n    };\n    /**\n     * Returns true if this heap contains the specified element.\n     * @param {Object} element element to search for.\n     * @return {boolean} true if this Heap contains the specified element, false\n     * otherwise.\n     */\n    Heap.prototype.contains = function (element) {\n        var equF = collections.compareToEquals(this.compare);\n        return arrays.contains(this.data, element, equF);\n    };\n    /**\n     * Returns the number of elements in this heap.\n     * @return {number} the number of elements in this heap.\n     */\n    Heap.prototype.size = function () {\n        return this.data.length;\n    };\n    /**\n     * Checks if this heap is empty.\n     * @return {boolean} true if and only if this heap contains no items; false\n     * otherwise.\n     */\n    Heap.prototype.isEmpty = function () {\n        return this.data.length <= 0;\n    };\n    /**\n     * Removes all of the elements from this heap.\n     */\n    Heap.prototype.clear = function () {\n        this.data.length = 0;\n    };\n    /**\n     * Executes the provided function once for each element present in this heap in\n     * no particular order.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element value, to break the iteration you can\n     * optionally return false.\n     */\n    Heap.prototype.forEach = function (callback) {\n        arrays.forEach(this.data, callback);\n    };\n    return Heap;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Heap;\n//# sourceMappingURL=Heap.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Dictionary_1 = require('./Dictionary');\nvar util = require('./util');\n/**\n * This class is used by the LinkedDictionary Internally\n * Has to be a class, not an interface, because it needs to have\n * the 'unlink' function defined.\n */\nvar LinkedDictionaryPair = (function () {\n    function LinkedDictionaryPair(key, value) {\n        this.key = key;\n        this.value = value;\n    }\n    LinkedDictionaryPair.prototype.unlink = function () {\n        this.prev.next = this.next;\n        this.next.prev = this.prev;\n    };\n    return LinkedDictionaryPair;\n}());\nvar LinkedDictionary = (function (_super) {\n    __extends(LinkedDictionary, _super);\n    function LinkedDictionary(toStrFunction) {\n        _super.call(this, toStrFunction);\n        this.head = new LinkedDictionaryPair(null, null);\n        this.tail = new LinkedDictionaryPair(null, null);\n        this.head.next = this.tail;\n        this.tail.prev = this.head;\n    }\n    /**\n     * Inserts the new node to the 'tail' of the list, updating the\n     * neighbors, and moving 'this.tail' (the End of List indicator) that\n     * to the end.\n     */\n    LinkedDictionary.prototype.appendToTail = function (entry) {\n        var lastNode = this.tail.prev;\n        lastNode.next = entry;\n        entry.prev = lastNode;\n        entry.next = this.tail;\n        this.tail.prev = entry;\n    };\n    /**\n     * Retrieves a linked dictionary from the table internally\n     */\n    LinkedDictionary.prototype.getLinkedDictionaryPair = function (key) {\n        if (util.isUndefined(key)) {\n            return undefined;\n        }\n        var k = '$' + this.toStr(key);\n        var pair = (this.table[k]);\n        return pair;\n    };\n    /**\n     * Returns the value to which this dictionary maps the specified key.\n     * Returns undefined if this dictionary contains no mapping for this key.\n     * @param {Object} key key whose associated value is to be returned.\n     * @return {*} the value to which this dictionary maps the specified key or\n     * undefined if the map contains no mapping for this key.\n     */\n    LinkedDictionary.prototype.getValue = function (key) {\n        var pair = this.getLinkedDictionaryPair(key);\n        if (!util.isUndefined(pair)) {\n            return pair.value;\n        }\n        return undefined;\n    };\n    /**\n     * Removes the mapping for this key from this dictionary if it is present.\n     * Also, if a value is present for this key, the entry is removed from the\n     * insertion ordering.\n     * @param {Object} key key whose mapping is to be removed from the\n     * dictionary.\n     * @return {*} previous value associated with specified key, or undefined if\n     * there was no mapping for key.\n     */\n    LinkedDictionary.prototype.remove = function (key) {\n        var pair = this.getLinkedDictionaryPair(key);\n        if (!util.isUndefined(pair)) {\n            _super.prototype.remove.call(this, key); // This will remove it from the table\n            pair.unlink(); // This will unlink it from the chain\n            return pair.value;\n        }\n        return undefined;\n    };\n    /**\n    * Removes all mappings from this LinkedDictionary.\n    * @this {collections.LinkedDictionary}\n    */\n    LinkedDictionary.prototype.clear = function () {\n        _super.prototype.clear.call(this);\n        this.head.next = this.tail;\n        this.tail.prev = this.head;\n    };\n    /**\n     * Internal function used when updating an existing KeyValue pair.\n     * It places the new value indexed by key into the table, but maintains\n     * its place in the linked ordering.\n     */\n    LinkedDictionary.prototype.replace = function (oldPair, newPair) {\n        var k = '$' + this.toStr(newPair.key);\n        // set the new Pair's links to existingPair's links\n        newPair.next = oldPair.next;\n        newPair.prev = oldPair.prev;\n        // Delete Existing Pair from the table, unlink it from chain.\n        // As a result, the nElements gets decremented by this operation\n        this.remove(oldPair.key);\n        // Link new Pair in place of where oldPair was,\n        // by pointing the old pair's neighbors to it.\n        newPair.prev.next = newPair;\n        newPair.next.prev = newPair;\n        this.table[k] = newPair;\n        // To make up for the fact that the number of elements was decremented,\n        // We need to increase it by one.\n        ++this.nElements;\n    };\n    /**\n     * Associates the specified value with the specified key in this dictionary.\n     * If the dictionary previously contained a mapping for this key, the old\n     * value is replaced by the specified value.\n     * Updating of a key that already exists maintains its place in the\n     * insertion order into the map.\n     * @param {Object} key key with which the specified value is to be\n     * associated.\n     * @param {Object} value value to be associated with the specified key.\n     * @return {*} previous value associated with the specified key, or undefined if\n     * there was no mapping for the key or if the key/value are undefined.\n     */\n    LinkedDictionary.prototype.setValue = function (key, value) {\n        if (util.isUndefined(key) || util.isUndefined(value)) {\n            return undefined;\n        }\n        var existingPair = this.getLinkedDictionaryPair(key);\n        var newPair = new LinkedDictionaryPair(key, value);\n        var k = '$' + this.toStr(key);\n        // If there is already an element for that key, we\n        // keep it's place in the LinkedList\n        if (!util.isUndefined(existingPair)) {\n            this.replace(existingPair, newPair);\n            return existingPair.value;\n        }\n        else {\n            this.appendToTail(newPair);\n            this.table[k] = newPair;\n            ++this.nElements;\n            return undefined;\n        }\n    };\n    /**\n     * Returns an array containing all of the keys in this LinkedDictionary, ordered\n     * by insertion order.\n     * @return {Array} an array containing all of the keys in this LinkedDictionary,\n     * ordered by insertion order.\n     */\n    LinkedDictionary.prototype.keys = function () {\n        var array = [];\n        this.forEach(function (key, value) {\n            array.push(key);\n        });\n        return array;\n    };\n    /**\n     * Returns an array containing all of the values in this LinkedDictionary, ordered by\n     * insertion order.\n     * @return {Array} an array containing all of the values in this LinkedDictionary,\n     * ordered by insertion order.\n     */\n    LinkedDictionary.prototype.values = function () {\n        var array = [];\n        this.forEach(function (key, value) {\n            array.push(value);\n        });\n        return array;\n    };\n    /**\n    * Executes the provided function once for each key-value pair\n    * present in this LinkedDictionary. It is done in the order of insertion\n    * into the LinkedDictionary\n    * @param {function(Object,Object):*} callback function to execute, it is\n    * invoked with two arguments: key and value. To break the iteration you can\n    * optionally return false.\n    */\n    LinkedDictionary.prototype.forEach = function (callback) {\n        var crawlNode = this.head.next;\n        while (crawlNode.next != null) {\n            var ret = callback(crawlNode.key, crawlNode.value);\n            if (ret === false) {\n                return;\n            }\n            crawlNode = crawlNode.next;\n        }\n    };\n    return LinkedDictionary;\n}(Dictionary_1.default));\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = LinkedDictionary; // End of LinkedDictionary\n// /**\n//  * Returns true if this dictionary is equal to the given dictionary.\n//  * Two dictionaries are equal if they contain the same mappings.\n//  * @param {collections.Dictionary} other the other dictionary.\n//  * @param {function(Object,Object):boolean=} valuesEqualFunction optional\n//  * function used to check if two values are equal.\n//  * @return {boolean} true if this dictionary is equal to the given dictionary.\n//  */\n// collections.Dictionary.prototype.equals = function(other,valuesEqualFunction) {\n// \tconst eqF = valuesEqualFunction || collections.defaultEquals;\n// \tif(!(other instanceof collections.Dictionary)){\n// \t\treturn false;\n// \t}\n// \tif(this.size() !== other.size()){\n// \t\treturn false;\n// \t}\n// \treturn this.equalsAux(this.firstNode,other.firstNode,eqF);\n// }\n//# sourceMappingURL=LinkedDictionary.js.map","\"use strict\";\nvar util = require('./util');\nvar arrays = require('./arrays');\nvar LinkedList = (function () {\n    /**\n    * Creates an empty Linked List.\n    * @class A linked list is a data structure consisting of a group of nodes\n    * which together represent a sequence.\n    * @constructor\n    */\n    function LinkedList() {\n        /**\n        * First node in the list\n        * @type {Object}\n        * @private\n        */\n        this.firstNode = null;\n        /**\n        * Last node in the list\n        * @type {Object}\n        * @private\n        */\n        this.lastNode = null;\n        /**\n        * Number of elements in the list\n        * @type {number}\n        * @private\n        */\n        this.nElements = 0;\n    }\n    /**\n    * Adds an element to this list.\n    * @param {Object} item element to be added.\n    * @param {number=} index optional index to add the element. If no index is specified\n    * the element is added to the end of this list.\n    * @return {boolean} true if the element was added or false if the index is invalid\n    * or if the element is undefined.\n    */\n    LinkedList.prototype.add = function (item, index) {\n        if (util.isUndefined(index)) {\n            index = this.nElements;\n        }\n        if (index < 0 || index > this.nElements || util.isUndefined(item)) {\n            return false;\n        }\n        var newNode = this.createNode(item);\n        if (this.nElements === 0) {\n            // First node in the list.\n            this.firstNode = newNode;\n            this.lastNode = newNode;\n        }\n        else if (index === this.nElements) {\n            // Insert at the end.\n            this.lastNode.next = newNode;\n            this.lastNode = newNode;\n        }\n        else if (index === 0) {\n            // Change first node.\n            newNode.next = this.firstNode;\n            this.firstNode = newNode;\n        }\n        else {\n            var prev = this.nodeAtIndex(index - 1);\n            newNode.next = prev.next;\n            prev.next = newNode;\n        }\n        this.nElements++;\n        return true;\n    };\n    /**\n    * Returns the first element in this list.\n    * @return {*} the first element of the list or undefined if the list is\n    * empty.\n    */\n    LinkedList.prototype.first = function () {\n        if (this.firstNode !== null) {\n            return this.firstNode.element;\n        }\n        return undefined;\n    };\n    /**\n    * Returns the last element in this list.\n    * @return {*} the last element in the list or undefined if the list is\n    * empty.\n    */\n    LinkedList.prototype.last = function () {\n        if (this.lastNode !== null) {\n            return this.lastNode.element;\n        }\n        return undefined;\n    };\n    /**\n     * Returns the element at the specified position in this list.\n     * @param {number} index desired index.\n     * @return {*} the element at the given index or undefined if the index is\n     * out of bounds.\n     */\n    LinkedList.prototype.elementAtIndex = function (index) {\n        var node = this.nodeAtIndex(index);\n        if (node === null) {\n            return undefined;\n        }\n        return node.element;\n    };\n    /**\n     * Returns the index in this list of the first occurrence of the\n     * specified element, or -1 if the List does not contain this element.\n     * <p>If the elements inside this list are\n     * not comparable with the === operator a custom equals function should be\n     * provided to perform searches, the function must receive two arguments and\n     * return true if they are equal, false otherwise. Example:</p>\n     *\n     * <pre>\n     * const petsAreEqualByName = function(pet1, pet2) {\n     *  return pet1.name === pet2.name;\n     * }\n     * </pre>\n     * @param {Object} item element to search for.\n     * @param {function(Object,Object):boolean=} equalsFunction Optional\n     * function used to check if two elements are equal.\n     * @return {number} the index in this list of the first occurrence\n     * of the specified element, or -1 if this list does not contain the\n     * element.\n     */\n    LinkedList.prototype.indexOf = function (item, equalsFunction) {\n        var equalsF = equalsFunction || util.defaultEquals;\n        if (util.isUndefined(item)) {\n            return -1;\n        }\n        var currentNode = this.firstNode;\n        var index = 0;\n        while (currentNode !== null) {\n            if (equalsF(currentNode.element, item)) {\n                return index;\n            }\n            index++;\n            currentNode = currentNode.next;\n        }\n        return -1;\n    };\n    /**\n       * Returns true if this list contains the specified element.\n       * <p>If the elements inside the list are\n       * not comparable with the === operator a custom equals function should be\n       * provided to perform searches, the function must receive two arguments and\n       * return true if they are equal, false otherwise. Example:</p>\n       *\n       * <pre>\n       * const petsAreEqualByName = function(pet1, pet2) {\n       *  return pet1.name === pet2.name;\n       * }\n       * </pre>\n       * @param {Object} item element to search for.\n       * @param {function(Object,Object):boolean=} equalsFunction Optional\n       * function used to check if two elements are equal.\n       * @return {boolean} true if this list contains the specified element, false\n       * otherwise.\n       */\n    LinkedList.prototype.contains = function (item, equalsFunction) {\n        return (this.indexOf(item, equalsFunction) >= 0);\n    };\n    /**\n     * Removes the first occurrence of the specified element in this list.\n     * <p>If the elements inside the list are\n     * not comparable with the === operator a custom equals function should be\n     * provided to perform searches, the function must receive two arguments and\n     * return true if they are equal, false otherwise. Example:</p>\n     *\n     * <pre>\n     * const petsAreEqualByName = function(pet1, pet2) {\n     *  return pet1.name === pet2.name;\n     * }\n     * </pre>\n     * @param {Object} item element to be removed from this list, if present.\n     * @return {boolean} true if the list contained the specified element.\n     */\n    LinkedList.prototype.remove = function (item, equalsFunction) {\n        var equalsF = equalsFunction || util.defaultEquals;\n        if (this.nElements < 1 || util.isUndefined(item)) {\n            return false;\n        }\n        var previous = null;\n        var currentNode = this.firstNode;\n        while (currentNode !== null) {\n            if (equalsF(currentNode.element, item)) {\n                if (currentNode === this.firstNode) {\n                    this.firstNode = this.firstNode.next;\n                    if (currentNode === this.lastNode) {\n                        this.lastNode = null;\n                    }\n                }\n                else if (currentNode === this.lastNode) {\n                    this.lastNode = previous;\n                    previous.next = currentNode.next;\n                    currentNode.next = null;\n                }\n                else {\n                    previous.next = currentNode.next;\n                    currentNode.next = null;\n                }\n                this.nElements--;\n                return true;\n            }\n            previous = currentNode;\n            currentNode = currentNode.next;\n        }\n        return false;\n    };\n    /**\n     * Removes all of the elements from this list.\n     */\n    LinkedList.prototype.clear = function () {\n        this.firstNode = null;\n        this.lastNode = null;\n        this.nElements = 0;\n    };\n    /**\n     * Returns true if this list is equal to the given list.\n     * Two lists are equal if they have the same elements in the same order.\n     * @param {LinkedList} other the other list.\n     * @param {function(Object,Object):boolean=} equalsFunction optional\n     * function used to check if two elements are equal. If the elements in the lists\n     * are custom objects you should provide a function, otherwise\n     * the === operator is used to check equality between elements.\n     * @return {boolean} true if this list is equal to the given list.\n     */\n    LinkedList.prototype.equals = function (other, equalsFunction) {\n        var eqF = equalsFunction || util.defaultEquals;\n        if (!(other instanceof LinkedList)) {\n            return false;\n        }\n        if (this.size() !== other.size()) {\n            return false;\n        }\n        return this.equalsAux(this.firstNode, other.firstNode, eqF);\n    };\n    /**\n    * @private\n    */\n    LinkedList.prototype.equalsAux = function (n1, n2, eqF) {\n        while (n1 !== null) {\n            if (!eqF(n1.element, n2.element)) {\n                return false;\n            }\n            n1 = n1.next;\n            n2 = n2.next;\n        }\n        return true;\n    };\n    /**\n     * Removes the element at the specified position in this list.\n     * @param {number} index given index.\n     * @return {*} removed element or undefined if the index is out of bounds.\n     */\n    LinkedList.prototype.removeElementAtIndex = function (index) {\n        if (index < 0 || index >= this.nElements) {\n            return undefined;\n        }\n        var element;\n        if (this.nElements === 1) {\n            //First node in the list.\n            element = this.firstNode.element;\n            this.firstNode = null;\n            this.lastNode = null;\n        }\n        else {\n            var previous = this.nodeAtIndex(index - 1);\n            if (previous === null) {\n                element = this.firstNode.element;\n                this.firstNode = this.firstNode.next;\n            }\n            else if (previous.next === this.lastNode) {\n                element = this.lastNode.element;\n                this.lastNode = previous;\n            }\n            if (previous !== null) {\n                element = previous.next.element;\n                previous.next = previous.next.next;\n            }\n        }\n        this.nElements--;\n        return element;\n    };\n    /**\n     * Executes the provided function once for each element present in this list in order.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element value, to break the iteration you can\n     * optionally return false.\n     */\n    LinkedList.prototype.forEach = function (callback) {\n        var currentNode = this.firstNode;\n        while (currentNode !== null) {\n            if (callback(currentNode.element) === false) {\n                break;\n            }\n            currentNode = currentNode.next;\n        }\n    };\n    /**\n     * Reverses the order of the elements in this linked list (makes the last\n     * element first, and the first element last).\n     */\n    LinkedList.prototype.reverse = function () {\n        var previous = null;\n        var current = this.firstNode;\n        var temp = null;\n        while (current !== null) {\n            temp = current.next;\n            current.next = previous;\n            previous = current;\n            current = temp;\n        }\n        temp = this.firstNode;\n        this.firstNode = this.lastNode;\n        this.lastNode = temp;\n    };\n    /**\n     * Returns an array containing all of the elements in this list in proper\n     * sequence.\n     * @return {Array.<*>} an array containing all of the elements in this list,\n     * in proper sequence.\n     */\n    LinkedList.prototype.toArray = function () {\n        var array = [];\n        var currentNode = this.firstNode;\n        while (currentNode !== null) {\n            array.push(currentNode.element);\n            currentNode = currentNode.next;\n        }\n        return array;\n    };\n    /**\n     * Returns the number of elements in this list.\n     * @return {number} the number of elements in this list.\n     */\n    LinkedList.prototype.size = function () {\n        return this.nElements;\n    };\n    /**\n     * Returns true if this list contains no elements.\n     * @return {boolean} true if this list contains no elements.\n     */\n    LinkedList.prototype.isEmpty = function () {\n        return this.nElements <= 0;\n    };\n    LinkedList.prototype.toString = function () {\n        return arrays.toString(this.toArray());\n    };\n    /**\n     * @private\n     */\n    LinkedList.prototype.nodeAtIndex = function (index) {\n        if (index < 0 || index >= this.nElements) {\n            return null;\n        }\n        if (index === (this.nElements - 1)) {\n            return this.lastNode;\n        }\n        var node = this.firstNode;\n        for (var i = 0; i < index; i++) {\n            node = node.next;\n        }\n        return node;\n    };\n    /**\n     * @private\n     */\n    LinkedList.prototype.createNode = function (item) {\n        return {\n            element: item,\n            next: null\n        };\n    };\n    return LinkedList;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = LinkedList; // End of linked list\n//# sourceMappingURL=LinkedList.js.map","\"use strict\";\nvar util = require('./util');\nvar Dictionary_1 = require('./Dictionary');\nvar arrays = require('./arrays');\nvar MultiDictionary = (function () {\n    /**\n     * Creates an empty multi dictionary.\n     * @class <p>A multi dictionary is a special kind of dictionary that holds\n     * multiple values against each key. Setting a value into the dictionary will\n     * add the value to an array at that key. Getting a key will return an array,\n     * holding all the values set to that key.\n     * You can configure to allow duplicates in the values.\n     * This implementation accepts any kind of objects as keys.</p>\n     *\n     * <p>If the keys are custom objects a function which converts keys to strings must be\n     * provided. Example:</p>\n     *\n     * <pre>\n     * function petToString(pet) {\n       *  return pet.name;\n       * }\n     * </pre>\n     * <p>If the values are custom objects a function to check equality between values\n     * must be provided. Example:</p>\n     *\n     * <pre>\n     * function petsAreEqualByAge(pet1,pet2) {\n       *  return pet1.age===pet2.age;\n       * }\n     * </pre>\n     * @constructor\n     * @param {function(Object):string=} toStrFunction optional function\n     * to convert keys to strings. If the keys aren't strings or if toString()\n     * is not appropriate, a custom function which receives a key and returns a\n     * unique string must be provided.\n     * @param {function(Object,Object):boolean=} valuesEqualsFunction optional\n     * function to check if two values are equal.\n     *\n     * @param allowDuplicateValues\n     */\n    function MultiDictionary(toStrFunction, valuesEqualsFunction, allowDuplicateValues) {\n        if (allowDuplicateValues === void 0) { allowDuplicateValues = false; }\n        this.dict = new Dictionary_1.default(toStrFunction);\n        this.equalsF = valuesEqualsFunction || util.defaultEquals;\n        this.allowDuplicate = allowDuplicateValues;\n    }\n    /**\n    * Returns an array holding the values to which this dictionary maps\n    * the specified key.\n    * Returns an empty array if this dictionary contains no mappings for this key.\n    * @param {Object} key key whose associated values are to be returned.\n    * @return {Array} an array holding the values to which this dictionary maps\n    * the specified key.\n    */\n    MultiDictionary.prototype.getValue = function (key) {\n        var values = this.dict.getValue(key);\n        if (util.isUndefined(values)) {\n            return [];\n        }\n        return arrays.copy(values);\n    };\n    /**\n     * Adds the value to the array associated with the specified key, if\n     * it is not already present.\n     * @param {Object} key key with which the specified value is to be\n     * associated.\n     * @param {Object} value the value to add to the array at the key\n     * @return {boolean} true if the value was not already associated with that key.\n     */\n    MultiDictionary.prototype.setValue = function (key, value) {\n        if (util.isUndefined(key) || util.isUndefined(value)) {\n            return false;\n        }\n        if (!this.containsKey(key)) {\n            this.dict.setValue(key, [value]);\n            return true;\n        }\n        var array = this.dict.getValue(key);\n        if (!this.allowDuplicate) {\n            if (arrays.contains(array, value, this.equalsF)) {\n                return false;\n            }\n        }\n        array.push(value);\n        return true;\n    };\n    /**\n     * Removes the specified values from the array of values associated with the\n     * specified key. If a value isn't given, all values associated with the specified\n     * key are removed.\n     * @param {Object} key key whose mapping is to be removed from the\n     * dictionary.\n     * @param {Object=} value optional argument to specify the value to remove\n     * from the array associated with the specified key.\n     * @return {*} true if the dictionary changed, false if the key doesn't exist or\n     * if the specified value isn't associated with the specified key.\n     */\n    MultiDictionary.prototype.remove = function (key, value) {\n        if (util.isUndefined(value)) {\n            var v = this.dict.remove(key);\n            return !util.isUndefined(v);\n        }\n        var array = this.dict.getValue(key);\n        if (arrays.remove(array, value, this.equalsF)) {\n            if (array.length === 0) {\n                this.dict.remove(key);\n            }\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Returns an array containing all of the keys in this dictionary.\n     * @return {Array} an array containing all of the keys in this dictionary.\n     */\n    MultiDictionary.prototype.keys = function () {\n        return this.dict.keys();\n    };\n    /**\n     * Returns an array containing all of the values in this dictionary.\n     * @return {Array} an array containing all of the values in this dictionary.\n     */\n    MultiDictionary.prototype.values = function () {\n        var values = this.dict.values();\n        var array = [];\n        for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {\n            var v = values_1[_i];\n            for (var _a = 0, v_1 = v; _a < v_1.length; _a++) {\n                var w = v_1[_a];\n                array.push(w);\n            }\n        }\n        return array;\n    };\n    /**\n     * Returns true if this dictionary at least one value associatted the specified key.\n     * @param {Object} key key whose presence in this dictionary is to be\n     * tested.\n     * @return {boolean} true if this dictionary at least one value associatted\n     * the specified key.\n     */\n    MultiDictionary.prototype.containsKey = function (key) {\n        return this.dict.containsKey(key);\n    };\n    /**\n     * Removes all mappings from this dictionary.\n     */\n    MultiDictionary.prototype.clear = function () {\n        this.dict.clear();\n    };\n    /**\n     * Returns the number of keys in this dictionary.\n     * @return {number} the number of key-value mappings in this dictionary.\n     */\n    MultiDictionary.prototype.size = function () {\n        return this.dict.size();\n    };\n    /**\n     * Returns true if this dictionary contains no mappings.\n     * @return {boolean} true if this dictionary contains no mappings.\n     */\n    MultiDictionary.prototype.isEmpty = function () {\n        return this.dict.isEmpty();\n    };\n    return MultiDictionary;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = MultiDictionary; // end of multi dictionary\n//# sourceMappingURL=MultiDictionary.js.map","\"use strict\";\nvar Direction;\n(function (Direction) {\n    Direction[Direction[\"BEFORE\"] = 0] = \"BEFORE\";\n    Direction[Direction[\"AFTER\"] = 1] = \"AFTER\";\n    Direction[Direction[\"INSIDE_AT_END\"] = 2] = \"INSIDE_AT_END\";\n    Direction[Direction[\"INSIDE_AT_START\"] = 3] = \"INSIDE_AT_START\";\n})(Direction || (Direction = {}));\nvar MultiRootTree = (function () {\n    function MultiRootTree(rootIds, nodes) {\n        if (rootIds === void 0) { rootIds = []; }\n        if (nodes === void 0) { nodes = {}; }\n        this.rootIds = rootIds;\n        this.nodes = nodes;\n        this.initRootIds();\n        this.initNodes();\n    }\n    MultiRootTree.prototype.initRootIds = function () {\n        for (var _i = 0, _a = this.rootIds; _i < _a.length; _i++) {\n            var rootId = _a[_i];\n            this.createEmptyNodeIfNotExist(rootId);\n        }\n    };\n    MultiRootTree.prototype.initNodes = function () {\n        for (var nodeKey in this.nodes) {\n            if (this.nodes.hasOwnProperty(nodeKey)) {\n                for (var _i = 0, _a = this.nodes[nodeKey]; _i < _a.length; _i++) {\n                    var nodeListItem = _a[_i];\n                    this.createEmptyNodeIfNotExist(nodeListItem);\n                }\n            }\n        }\n    };\n    MultiRootTree.prototype.createEmptyNodeIfNotExist = function (nodeKey) {\n        if (!this.nodes[nodeKey]) {\n            this.nodes[nodeKey] = [];\n        }\n    };\n    MultiRootTree.prototype.getRootIds = function () {\n        var clone = this.rootIds.slice();\n        return clone;\n    };\n    MultiRootTree.prototype.getNodes = function () {\n        var clone = {};\n        for (var nodeKey in this.nodes) {\n            if (this.nodes.hasOwnProperty(nodeKey)) {\n                clone[nodeKey] = this.nodes[nodeKey].slice();\n            }\n        }\n        return clone;\n    };\n    MultiRootTree.prototype.getObject = function () {\n        return {\n            rootIds: this.getRootIds(),\n            nodes: this.getNodes(),\n        };\n    };\n    MultiRootTree.prototype.toObject = function () {\n        return this.getObject();\n    };\n    MultiRootTree.prototype.flatten = function () {\n        var _this = this;\n        var extraPropsObject = [];\n        for (var i = 0; i < this.rootIds.length; i++) {\n            var rootId = this.rootIds[i];\n            extraPropsObject.push({\n                id: rootId,\n                level: 0,\n                hasParent: false,\n                childrenCount: undefined,\n            });\n            traverse(rootId, this.nodes, extraPropsObject, 0);\n        }\n        for (var _i = 0, extraPropsObject_1 = extraPropsObject; _i < extraPropsObject_1.length; _i++) {\n            var o = extraPropsObject_1[_i];\n            o.childrenCount = countChildren(o.id);\n        }\n        return extraPropsObject;\n        function countChildren(id) {\n            if (!_this.nodes[id]) {\n                return 0;\n            }\n            else {\n                var childrenCount = _this.nodes[id].length;\n                return childrenCount;\n            }\n        }\n        function traverse(startId, nodes, returnArray, level) {\n            if (level === void 0) { level = 0; }\n            if (!startId || !nodes || !returnArray || !nodes[startId]) {\n                return;\n            }\n            level++;\n            var idsList = nodes[startId];\n            for (var i = 0; i < idsList.length; i++) {\n                var id = idsList[i];\n                returnArray.push({ id: id, level: level, hasParent: true });\n                traverse(id, nodes, returnArray, level);\n            }\n            level--;\n        }\n    };\n    MultiRootTree.prototype.moveIdBeforeId = function (moveId, beforeId) {\n        return this.moveId(moveId, beforeId, Direction.BEFORE);\n    };\n    MultiRootTree.prototype.moveIdAfterId = function (moveId, afterId) {\n        return this.moveId(moveId, afterId, Direction.AFTER);\n    };\n    MultiRootTree.prototype.moveIdIntoId = function (moveId, insideId, atStart) {\n        if (atStart === void 0) { atStart = true; }\n        if (atStart) {\n            return this.moveId(moveId, insideId, Direction.INSIDE_AT_START);\n        }\n        else {\n            return this.moveId(moveId, insideId, Direction.INSIDE_AT_END);\n        }\n    };\n    MultiRootTree.prototype.swapRootIdWithRootId = function (rootId, withRootId) {\n        var leftIndex = this.findRootId(rootId);\n        var rightIndex = this.findRootId(withRootId);\n        this.swapRootPositionWithRootPosition(leftIndex, rightIndex);\n    };\n    MultiRootTree.prototype.swapRootPositionWithRootPosition = function (swapRootPosition, withRootPosition) {\n        var temp = this.rootIds[withRootPosition];\n        this.rootIds[withRootPosition] = this.rootIds[swapRootPosition];\n        this.rootIds[swapRootPosition] = temp;\n    };\n    MultiRootTree.prototype.deleteId = function (id) {\n        this.rootDeleteId(id);\n        this.nodeAndSubNodesDelete(id);\n        this.nodeRefrencesDelete(id);\n    };\n    MultiRootTree.prototype.insertIdBeforeId = function (beforeId, insertId) {\n        var foundRootIdIndex = this.findRootId(beforeId);\n        if (foundRootIdIndex > -1) {\n            this.insertIdIntoRoot(insertId, foundRootIdIndex);\n        }\n        for (var nodeKey in this.nodes) {\n            if (this.nodes.hasOwnProperty(nodeKey)) {\n                var foundNodeIdIndex = this.findNodeId(nodeKey, beforeId);\n                if (foundNodeIdIndex > -1) {\n                    this.insertIdIntoNode(nodeKey, insertId, foundNodeIdIndex);\n                }\n            }\n        }\n    };\n    MultiRootTree.prototype.insertIdAfterId = function (belowId, insertId) {\n        var foundRootIdIndex = this.findRootId(belowId);\n        if (foundRootIdIndex > -1) {\n            this.insertIdIntoRoot(insertId, foundRootIdIndex + 1);\n        }\n        for (var nodeKey in this.nodes) {\n            if (this.nodes.hasOwnProperty(nodeKey)) {\n                var foundNodeIdIndex = this.findNodeId(nodeKey, belowId);\n                if (foundNodeIdIndex > -1) {\n                    this.insertIdIntoNode(nodeKey, insertId, foundNodeIdIndex + 1);\n                }\n            }\n        }\n    };\n    MultiRootTree.prototype.insertIdIntoId = function (insideId, insertId) {\n        this.nodeInsertAtEnd(insideId, insertId);\n        this.nodes[insertId] = [];\n    };\n    MultiRootTree.prototype.insertIdIntoRoot = function (id, position) {\n        if (position === undefined) {\n            this.rootInsertAtEnd(id);\n        }\n        else {\n            if (position < 0) {\n                var length_1 = this.rootIds.length;\n                this.rootIds.splice((position + length_1 + 1), 0, id);\n            }\n            else {\n                this.rootIds.splice(position, 0, id);\n            }\n        }\n        this.nodes[id] = this.nodes[id] || [];\n    };\n    MultiRootTree.prototype.insertIdIntoNode = function (nodeKey, id, position) {\n        this.nodes[nodeKey] = this.nodes[nodeKey] || [];\n        this.nodes[id] = this.nodes[id] || [];\n        if (position === undefined) {\n            this.nodeInsertAtEnd(nodeKey, id);\n        }\n        else {\n            if (position < 0) {\n                var length_2 = this.nodes[nodeKey].length;\n                this.nodes[nodeKey].splice((position + length_2 + 1), 0, id);\n            }\n            else {\n                this.nodes[nodeKey].splice(position, 0, id);\n            }\n        }\n    };\n    MultiRootTree.prototype.moveId = function (moveId, beforeId, direction) {\n        var sourceId = moveId;\n        var sourceRootIndex = this.findRootId(sourceId);\n        var sourceNodeKey;\n        var sourceNodeIdIndex;\n        if (this.nodes[beforeId]) {\n            sourceNodeKey = beforeId;\n        }\n        for (var nodeKey in this.nodes) {\n            if (this.nodes.hasOwnProperty(nodeKey)) {\n                sourceNodeIdIndex = this.findNodeId(nodeKey, beforeId);\n                break;\n            }\n        }\n        // got all\n        var targetId = beforeId;\n        var targetRootIndex = this.findRootId(targetId);\n        var targetNodeKey;\n        var targetNodeIdIndex;\n        if (this.nodes[beforeId]) {\n            targetNodeKey = beforeId;\n        }\n        for (var nodeKey in this.nodes) {\n            if (this.nodes.hasOwnProperty(nodeKey)) {\n                targetNodeIdIndex = this.findNodeId(nodeKey, beforeId);\n                break;\n            }\n        }\n        // got all\n        if (sourceRootIndex > -1) {\n            if (targetRootIndex > -1) {\n                // moving root to root\n                // console.log(`Moving ROOT to ROOT`);\n                // console.log(`RootIds:`);\n                // console.log(this.rootIds);\n                // console.log(`TargetIndex=${targetRootIndex}, SourceIndex=${sourceRootIndex}`);\n                // console.log(`TargetId=${targetId}, SourceId=${sourceId}`);\n                this.rootDelete(sourceRootIndex); // indexes change now\n                if (targetRootIndex > sourceRootIndex) {\n                    targetRootIndex--;\n                }\n                else {\n                }\n                switch (direction) {\n                    case Direction.BEFORE:\n                        this.insertIdIntoRoot(sourceId, targetRootIndex);\n                        break;\n                    case Direction.AFTER:\n                        this.insertIdIntoRoot(sourceId, targetRootIndex + 1);\n                        break;\n                    case Direction.INSIDE_AT_START:\n                        this.nodeInsertAtStart(targetId, sourceId);\n                        break;\n                    case Direction.INSIDE_AT_END:\n                        this.nodeInsertAtEnd(targetId, sourceId);\n                        break;\n                }\n            }\n            else {\n                // moving root (source) ABOVE node (target)\n                // will remove one entry from roots\n                this.rootDelete(sourceRootIndex);\n                for (var nodeKey in this.nodes) {\n                    if (this.nodes.hasOwnProperty(nodeKey)) {\n                        var index = this.findNodeId(nodeKey, targetId);\n                        if (index > -1) {\n                            switch (direction) {\n                                case Direction.BEFORE:\n                                    this.insertIdIntoNode(nodeKey, sourceId, index);\n                                    break;\n                                case Direction.AFTER:\n                                    this.insertIdIntoNode(nodeKey, sourceId, index + 1);\n                                    break;\n                                case Direction.INSIDE_AT_START:\n                                    this.nodeInsertAtStart(targetId, sourceId);\n                                    break;\n                                case Direction.INSIDE_AT_END:\n                                    this.nodeInsertAtEnd(targetId, sourceId);\n                                    break;\n                            }\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            if (targetRootIndex > -1) {\n                // moving node (source) ABOVE root (target)\n                // delete source id from each node\n                for (var nodeKey in this.nodes) {\n                    if (this.nodes.hasOwnProperty(nodeKey)) {\n                        var index = this.findNodeId(nodeKey, sourceId);\n                        if (index > -1) {\n                            // this.nodeInsertId(nodeKey, sourceId, index);\n                            this.nodeDeleteAtIndex(nodeKey, index);\n                            break;\n                        }\n                    }\n                }\n                switch (direction) {\n                    case Direction.BEFORE:\n                        this.insertIdIntoRoot(sourceId, targetRootIndex);\n                        break;\n                    case Direction.AFTER:\n                        this.insertIdIntoRoot(sourceId, targetRootIndex + 1);\n                        break;\n                    case Direction.INSIDE_AT_START:\n                        this.nodeInsertAtStart(targetId, sourceId);\n                        break;\n                    case Direction.INSIDE_AT_END:\n                        this.nodeInsertAtEnd(targetId, sourceId);\n                        break;\n                }\n            }\n            else {\n                // moving node (source) ABOVE node (target)\n                // delete source id from each node\n                for (var nodeKey in this.nodes) {\n                    if (this.nodes.hasOwnProperty(nodeKey)) {\n                        var index = this.findNodeId(nodeKey, sourceId);\n                        if (index > -1) {\n                            this.nodeDeleteAtIndex(nodeKey, index);\n                            break;\n                        }\n                    }\n                }\n                for (var nodeKey in this.nodes) {\n                    if (this.nodes.hasOwnProperty(nodeKey)) {\n                        var index = this.findNodeId(nodeKey, targetId);\n                        if (index > -1) {\n                            switch (direction) {\n                                case Direction.BEFORE:\n                                    this.insertIdIntoNode(nodeKey, sourceId, index);\n                                    break;\n                                case Direction.AFTER:\n                                    this.insertIdIntoNode(nodeKey, sourceId, index + 1);\n                                    break;\n                                case Direction.INSIDE_AT_START:\n                                    this.nodeInsertAtStart(targetId, sourceId);\n                                    break;\n                                case Direction.INSIDE_AT_END:\n                                    this.nodeInsertAtEnd(targetId, sourceId);\n                                    break;\n                            }\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    };\n    MultiRootTree.prototype.swapArrayElements = function (arr, indexA, indexB) {\n        var temp = arr[indexA];\n        arr[indexA] = arr[indexB];\n        arr[indexB] = temp;\n        return arr;\n    };\n    ;\n    MultiRootTree.prototype.rootDeleteId = function (id) {\n        var index = this.findRootId(id);\n        if (index > -1) {\n            this.rootDelete(index);\n        }\n    };\n    MultiRootTree.prototype.nodeAndSubNodesDelete = function (nodeKey) {\n        var toDeleteLater = [];\n        for (var i = 0; i < this.nodes[nodeKey].length; i++) {\n            var id = this.nodes[nodeKey][i];\n            this.nodeAndSubNodesDelete(id);\n            toDeleteLater.push(nodeKey);\n        }\n        this.nodeDelete(nodeKey);\n        for (var i = 0; i < toDeleteLater.length; i++) {\n            this.nodeDelete(toDeleteLater[i]);\n        }\n    };\n    MultiRootTree.prototype.nodeRefrencesDelete = function (id) {\n        for (var nodeKey in this.nodes) {\n            if (this.nodes.hasOwnProperty(nodeKey)) {\n                for (var i = 0; i < this.nodes[nodeKey].length; i++) {\n                    var targetId = this.nodes[nodeKey][i];\n                    if (targetId === id) {\n                        this.nodeDeleteAtIndex(nodeKey, i);\n                    }\n                }\n            }\n        }\n    };\n    MultiRootTree.prototype.nodeDelete = function (nodeKey) {\n        delete this.nodes[nodeKey];\n    };\n    MultiRootTree.prototype.findRootId = function (id) {\n        return this.rootIds.indexOf(id);\n    };\n    MultiRootTree.prototype.findNodeId = function (nodeKey, id) {\n        return this.nodes[nodeKey].indexOf(id);\n    };\n    MultiRootTree.prototype.findNode = function (nodeKey) {\n        return this.nodes[nodeKey];\n    };\n    MultiRootTree.prototype.nodeInsertAtStart = function (nodeKey, id) {\n        this.nodes[nodeKey].unshift(id);\n    };\n    MultiRootTree.prototype.nodeInsertAtEnd = function (nodeKey, id) {\n        this.nodes[nodeKey].push(id);\n    };\n    MultiRootTree.prototype.rootDelete = function (index) {\n        this.rootIds.splice(index, 1);\n    };\n    MultiRootTree.prototype.nodeDeleteAtIndex = function (nodeKey, index) {\n        this.nodes[nodeKey].splice(index, 1);\n    };\n    MultiRootTree.prototype.rootInsertAtStart = function (id) {\n        this.rootIds.unshift(id);\n    };\n    MultiRootTree.prototype.rootInsertAtEnd = function (id) {\n        this.rootIds.push(id);\n    };\n    return MultiRootTree;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = MultiRootTree;\n//# sourceMappingURL=MultiRootTree.js.map","\"use strict\";\nvar util = require('./util');\nvar Heap_1 = require('./Heap');\nvar PriorityQueue = (function () {\n    /**\n     * Creates an empty priority queue.\n     * @class <p>In a priority queue each element is associated with a \"priority\",\n     * elements are dequeued in highest-priority-first order (the elements with the\n     * highest priority are dequeued first). Priority Queues are implemented as heaps.\n     * If the inserted elements are custom objects a compare function must be provided,\n     * otherwise the <=, === and >= operators are used to compare object priority.</p>\n     * <pre>\n     * function compare(a, b) {\n     *  if (a is less than b by some ordering criterion) {\n     *     return -1;\n     *  } if (a is greater than b by the ordering criterion) {\n     *     return 1;\n     *  }\n     *  // a must be equal to b\n     *  return 0;\n     * }\n     * </pre>\n     * @constructor\n     * @param {function(Object,Object):number=} compareFunction optional\n     * function used to compare two element priorities. Must return a negative integer,\n     * zero, or a positive integer as the first argument is less than, equal to,\n     * or greater than the second.\n     */\n    function PriorityQueue(compareFunction) {\n        this.heap = new Heap_1.default(util.reverseCompareFunction(compareFunction));\n    }\n    /**\n     * Inserts the specified element into this priority queue.\n     * @param {Object} element the element to insert.\n     * @return {boolean} true if the element was inserted, or false if it is undefined.\n     */\n    PriorityQueue.prototype.enqueue = function (element) {\n        return this.heap.add(element);\n    };\n    /**\n     * Inserts the specified element into this priority queue.\n     * @param {Object} element the element to insert.\n     * @return {boolean} true if the element was inserted, or false if it is undefined.\n     */\n    PriorityQueue.prototype.add = function (element) {\n        return this.heap.add(element);\n    };\n    /**\n     * Retrieves and removes the highest priority element of this queue.\n     * @return {*} the the highest priority element of this queue,\n     *  or undefined if this queue is empty.\n     */\n    PriorityQueue.prototype.dequeue = function () {\n        if (this.heap.size() !== 0) {\n            var el = this.heap.peek();\n            this.heap.removeRoot();\n            return el;\n        }\n        return undefined;\n    };\n    /**\n     * Retrieves, but does not remove, the highest priority element of this queue.\n     * @return {*} the highest priority element of this queue, or undefined if this queue is empty.\n     */\n    PriorityQueue.prototype.peek = function () {\n        return this.heap.peek();\n    };\n    /**\n     * Returns true if this priority queue contains the specified element.\n     * @param {Object} element element to search for.\n     * @return {boolean} true if this priority queue contains the specified element,\n     * false otherwise.\n     */\n    PriorityQueue.prototype.contains = function (element) {\n        return this.heap.contains(element);\n    };\n    /**\n     * Checks if this priority queue is empty.\n     * @return {boolean} true if and only if this priority queue contains no items; false\n     * otherwise.\n     */\n    PriorityQueue.prototype.isEmpty = function () {\n        return this.heap.isEmpty();\n    };\n    /**\n     * Returns the number of elements in this priority queue.\n     * @return {number} the number of elements in this priority queue.\n     */\n    PriorityQueue.prototype.size = function () {\n        return this.heap.size();\n    };\n    /**\n     * Removes all of the elements from this priority queue.\n     */\n    PriorityQueue.prototype.clear = function () {\n        this.heap.clear();\n    };\n    /**\n     * Executes the provided function once for each element present in this queue in\n     * no particular order.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element value, to break the iteration you can\n     * optionally return false.\n     */\n    PriorityQueue.prototype.forEach = function (callback) {\n        this.heap.forEach(callback);\n    };\n    return PriorityQueue;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = PriorityQueue; // end of priority queue\n//# sourceMappingURL=PriorityQueue.js.map","\"use strict\";\nvar LinkedList_1 = require('./LinkedList');\nvar Queue = (function () {\n    /**\n     * Creates an empty queue.\n     * @class A queue is a First-In-First-Out (FIFO) data structure, the first\n     * element added to the queue will be the first one to be removed. This\n     * implementation uses a linked list as a container.\n     * @constructor\n     */\n    function Queue() {\n        this.list = new LinkedList_1.default();\n    }\n    /**\n     * Inserts the specified element into the end of this queue.\n     * @param {Object} elem the element to insert.\n     * @return {boolean} true if the element was inserted, or false if it is undefined.\n     */\n    Queue.prototype.enqueue = function (elem) {\n        return this.list.add(elem);\n    };\n    /**\n     * Inserts the specified element into the end of this queue.\n     * @param {Object} elem the element to insert.\n     * @return {boolean} true if the element was inserted, or false if it is undefined.\n     */\n    Queue.prototype.add = function (elem) {\n        return this.list.add(elem);\n    };\n    /**\n     * Retrieves and removes the head of this queue.\n     * @return {*} the head of this queue, or undefined if this queue is empty.\n     */\n    Queue.prototype.dequeue = function () {\n        if (this.list.size() !== 0) {\n            var el = this.list.first();\n            this.list.removeElementAtIndex(0);\n            return el;\n        }\n        return undefined;\n    };\n    /**\n     * Retrieves, but does not remove, the head of this queue.\n     * @return {*} the head of this queue, or undefined if this queue is empty.\n     */\n    Queue.prototype.peek = function () {\n        if (this.list.size() !== 0) {\n            return this.list.first();\n        }\n        return undefined;\n    };\n    /**\n     * Returns the number of elements in this queue.\n     * @return {number} the number of elements in this queue.\n     */\n    Queue.prototype.size = function () {\n        return this.list.size();\n    };\n    /**\n     * Returns true if this queue contains the specified element.\n     * <p>If the elements inside this stack are\n     * not comparable with the === operator, a custom equals function should be\n     * provided to perform searches, the function must receive two arguments and\n     * return true if they are equal, false otherwise. Example:</p>\n     *\n     * <pre>\n     * const petsAreEqualByName (pet1, pet2) {\n     *  return pet1.name === pet2.name;\n     * }\n     * </pre>\n     * @param {Object} elem element to search for.\n     * @param {function(Object,Object):boolean=} equalsFunction optional\n     * function to check if two elements are equal.\n     * @return {boolean} true if this queue contains the specified element,\n     * false otherwise.\n     */\n    Queue.prototype.contains = function (elem, equalsFunction) {\n        return this.list.contains(elem, equalsFunction);\n    };\n    /**\n     * Checks if this queue is empty.\n     * @return {boolean} true if and only if this queue contains no items; false\n     * otherwise.\n     */\n    Queue.prototype.isEmpty = function () {\n        return this.list.size() <= 0;\n    };\n    /**\n     * Removes all of the elements from this queue.\n     */\n    Queue.prototype.clear = function () {\n        this.list.clear();\n    };\n    /**\n     * Executes the provided function once for each element present in this queue in\n     * FIFO order.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element value, to break the iteration you can\n     * optionally return false.\n     */\n    Queue.prototype.forEach = function (callback) {\n        this.list.forEach(callback);\n    };\n    return Queue;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Queue; // End of queue\n//# sourceMappingURL=Queue.js.map","\"use strict\";\nvar util = require('./util');\nvar arrays = require('./arrays');\nvar Dictionary_1 = require('./Dictionary');\nvar Set = (function () {\n    /**\n     * Creates an empty set.\n     * @class <p>A set is a data structure that contains no duplicate items.</p>\n     * <p>If the inserted elements are custom objects a function\n     * which converts elements to strings must be provided. Example:</p>\n     *\n     * <pre>\n     * function petToString(pet) {\n     *  return pet.name;\n     * }\n     * </pre>\n     *\n     * @constructor\n     * @param {function(Object):string=} toStringFunction optional function used\n     * to convert elements to strings. If the elements aren't strings or if toString()\n     * is not appropriate, a custom function which receives a onject and returns a\n     * unique string must be provided.\n     */\n    function Set(toStringFunction) {\n        this.dictionary = new Dictionary_1.default(toStringFunction);\n    }\n    /**\n     * Returns true if this set contains the specified element.\n     * @param {Object} element element to search for.\n     * @return {boolean} true if this set contains the specified element,\n     * false otherwise.\n     */\n    Set.prototype.contains = function (element) {\n        return this.dictionary.containsKey(element);\n    };\n    /**\n     * Adds the specified element to this set if it is not already present.\n     * @param {Object} element the element to insert.\n     * @return {boolean} true if this set did not already contain the specified element.\n     */\n    Set.prototype.add = function (element) {\n        if (this.contains(element) || util.isUndefined(element)) {\n            return false;\n        }\n        else {\n            this.dictionary.setValue(element, element);\n            return true;\n        }\n    };\n    /**\n     * Performs an intersecion between this an another set.\n     * Removes all values that are not present this set and the given set.\n     * @param {collections.Set} otherSet other set.\n     */\n    Set.prototype.intersection = function (otherSet) {\n        var set = this;\n        this.forEach(function (element) {\n            if (!otherSet.contains(element)) {\n                set.remove(element);\n            }\n            return true;\n        });\n    };\n    /**\n     * Performs a union between this an another set.\n     * Adds all values from the given set to this set.\n     * @param {collections.Set} otherSet other set.\n     */\n    Set.prototype.union = function (otherSet) {\n        var set = this;\n        otherSet.forEach(function (element) {\n            set.add(element);\n            return true;\n        });\n    };\n    /**\n     * Performs a difference between this an another set.\n     * Removes from this set all the values that are present in the given set.\n     * @param {collections.Set} otherSet other set.\n     */\n    Set.prototype.difference = function (otherSet) {\n        var set = this;\n        otherSet.forEach(function (element) {\n            set.remove(element);\n            return true;\n        });\n    };\n    /**\n     * Checks whether the given set contains all the elements in this set.\n     * @param {collections.Set} otherSet other set.\n     * @return {boolean} true if this set is a subset of the given set.\n     */\n    Set.prototype.isSubsetOf = function (otherSet) {\n        if (this.size() > otherSet.size()) {\n            return false;\n        }\n        var isSub = true;\n        this.forEach(function (element) {\n            if (!otherSet.contains(element)) {\n                isSub = false;\n                return false;\n            }\n            return true;\n        });\n        return isSub;\n    };\n    /**\n     * Removes the specified element from this set if it is present.\n     * @return {boolean} true if this set contained the specified element.\n     */\n    Set.prototype.remove = function (element) {\n        if (!this.contains(element)) {\n            return false;\n        }\n        else {\n            this.dictionary.remove(element);\n            return true;\n        }\n    };\n    /**\n     * Executes the provided function once for each element\n     * present in this set.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one arguments: the element. To break the iteration you can\n     * optionally return false.\n     */\n    Set.prototype.forEach = function (callback) {\n        this.dictionary.forEach(function (k, v) {\n            return callback(v);\n        });\n    };\n    /**\n     * Returns an array containing all of the elements in this set in arbitrary order.\n     * @return {Array} an array containing all of the elements in this set.\n     */\n    Set.prototype.toArray = function () {\n        return this.dictionary.values();\n    };\n    /**\n     * Returns true if this set contains no elements.\n     * @return {boolean} true if this set contains no elements.\n     */\n    Set.prototype.isEmpty = function () {\n        return this.dictionary.isEmpty();\n    };\n    /**\n     * Returns the number of elements in this set.\n     * @return {number} the number of elements in this set.\n     */\n    Set.prototype.size = function () {\n        return this.dictionary.size();\n    };\n    /**\n     * Removes all of the elements from this set.\n     */\n    Set.prototype.clear = function () {\n        this.dictionary.clear();\n    };\n    /*\n    * Provides a string representation for display\n    */\n    Set.prototype.toString = function () {\n        return arrays.toString(this.toArray());\n    };\n    return Set;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Set; // end of Set\n//# sourceMappingURL=Set.js.map","\"use strict\";\nvar LinkedList_1 = require('./LinkedList');\nvar Stack = (function () {\n    /**\n     * Creates an empty Stack.\n     * @class A Stack is a Last-In-First-Out (LIFO) data structure, the last\n     * element added to the stack will be the first one to be removed. This\n     * implementation uses a linked list as a container.\n     * @constructor\n     */\n    function Stack() {\n        this.list = new LinkedList_1.default();\n    }\n    /**\n     * Pushes an item onto the top of this stack.\n     * @param {Object} elem the element to be pushed onto this stack.\n     * @return {boolean} true if the element was pushed or false if it is undefined.\n     */\n    Stack.prototype.push = function (elem) {\n        return this.list.add(elem, 0);\n    };\n    /**\n     * Pushes an item onto the top of this stack.\n     * @param {Object} elem the element to be pushed onto this stack.\n     * @return {boolean} true if the element was pushed or false if it is undefined.\n     */\n    Stack.prototype.add = function (elem) {\n        return this.list.add(elem, 0);\n    };\n    /**\n     * Removes the object at the top of this stack and returns that object.\n     * @return {*} the object at the top of this stack or undefined if the\n     * stack is empty.\n     */\n    Stack.prototype.pop = function () {\n        return this.list.removeElementAtIndex(0);\n    };\n    /**\n     * Looks at the object at the top of this stack without removing it from the\n     * stack.\n     * @return {*} the object at the top of this stack or undefined if the\n     * stack is empty.\n     */\n    Stack.prototype.peek = function () {\n        return this.list.first();\n    };\n    /**\n     * Returns the number of elements in this stack.\n     * @return {number} the number of elements in this stack.\n     */\n    Stack.prototype.size = function () {\n        return this.list.size();\n    };\n    /**\n     * Returns true if this stack contains the specified element.\n     * <p>If the elements inside this stack are\n     * not comparable with the === operator, a custom equals function should be\n     * provided to perform searches, the function must receive two arguments and\n     * return true if they are equal, false otherwise. Example:</p>\n     *\n     * <pre>\n     * const petsAreEqualByName (pet1, pet2) {\n     *  return pet1.name === pet2.name;\n     * }\n     * </pre>\n     * @param {Object} elem element to search for.\n     * @param {function(Object,Object):boolean=} equalsFunction optional\n     * function to check if two elements are equal.\n     * @return {boolean} true if this stack contains the specified element,\n     * false otherwise.\n     */\n    Stack.prototype.contains = function (elem, equalsFunction) {\n        return this.list.contains(elem, equalsFunction);\n    };\n    /**\n     * Checks if this stack is empty.\n     * @return {boolean} true if and only if this stack contains no items; false\n     * otherwise.\n     */\n    Stack.prototype.isEmpty = function () {\n        return this.list.isEmpty();\n    };\n    /**\n     * Removes all of the elements from this stack.\n     */\n    Stack.prototype.clear = function () {\n        this.list.clear();\n    };\n    /**\n     * Executes the provided function once for each element present in this stack in\n     * LIFO order.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element value, to break the iteration you can\n     * optionally return false.\n     */\n    Stack.prototype.forEach = function (callback) {\n        this.list.forEach(callback);\n    };\n    return Stack;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Stack; // End of stack\n//# sourceMappingURL=Stack.js.map","\"use strict\";\nvar util = require('./util');\n/**\n * Returns the position of the first occurrence of the specified item\n * within the specified array.4\n * @param {*} array the array in which to search the element.\n * @param {Object} item the element to search.\n * @param {function(Object,Object):boolean=} equalsFunction optional function used to\n * check equality between 2 elements.\n * @return {number} the position of the first occurrence of the specified element\n * within the specified array, or -1 if not found.\n */\nfunction indexOf(array, item, equalsFunction) {\n    var equals = equalsFunction || util.defaultEquals;\n    var length = array.length;\n    for (var i = 0; i < length; i++) {\n        if (equals(array[i], item)) {\n            return i;\n        }\n    }\n    return -1;\n}\nexports.indexOf = indexOf;\n/**\n * Returns the position of the last occurrence of the specified element\n * within the specified array.\n * @param {*} array the array in which to search the element.\n * @param {Object} item the element to search.\n * @param {function(Object,Object):boolean=} equalsFunction optional function used to\n * check equality between 2 elements.\n * @return {number} the position of the last occurrence of the specified element\n * within the specified array or -1 if not found.\n */\nfunction lastIndexOf(array, item, equalsFunction) {\n    var equals = equalsFunction || util.defaultEquals;\n    var length = array.length;\n    for (var i = length - 1; i >= 0; i--) {\n        if (equals(array[i], item)) {\n            return i;\n        }\n    }\n    return -1;\n}\nexports.lastIndexOf = lastIndexOf;\n/**\n * Returns true if the specified array contains the specified element.\n * @param {*} array the array in which to search the element.\n * @param {Object} item the element to search.\n * @param {function(Object,Object):boolean=} equalsFunction optional function to\n * check equality between 2 elements.\n * @return {boolean} true if the specified array contains the specified element.\n */\nfunction contains(array, item, equalsFunction) {\n    return indexOf(array, item, equalsFunction) >= 0;\n}\nexports.contains = contains;\n/**\n * Removes the first ocurrence of the specified element from the specified array.\n * @param {*} array the array in which to search element.\n * @param {Object} item the element to search.\n * @param {function(Object,Object):boolean=} equalsFunction optional function to\n * check equality between 2 elements.\n * @return {boolean} true if the array changed after this call.\n */\nfunction remove(array, item, equalsFunction) {\n    var index = indexOf(array, item, equalsFunction);\n    if (index < 0) {\n        return false;\n    }\n    array.splice(index, 1);\n    return true;\n}\nexports.remove = remove;\n/**\n * Returns the number of elements in the specified array equal\n * to the specified object.\n * @param {Array} array the array in which to determine the frequency of the element.\n * @param {Object} item the element whose frequency is to be determined.\n * @param {function(Object,Object):boolean=} equalsFunction optional function used to\n * check equality between 2 elements.\n * @return {number} the number of elements in the specified array\n * equal to the specified object.\n */\nfunction frequency(array, item, equalsFunction) {\n    var equals = equalsFunction || util.defaultEquals;\n    var length = array.length;\n    var freq = 0;\n    for (var i = 0; i < length; i++) {\n        if (equals(array[i], item)) {\n            freq++;\n        }\n    }\n    return freq;\n}\nexports.frequency = frequency;\n/**\n * Returns true if the two specified arrays are equal to one another.\n * Two arrays are considered equal if both arrays contain the same number\n * of elements, and all corresponding pairs of elements in the two\n * arrays are equal and are in the same order.\n * @param {Array} array1 one array to be tested for equality.\n * @param {Array} array2 the other array to be tested for equality.\n * @param {function(Object,Object):boolean=} equalsFunction optional function used to\n * check equality between elemements in the arrays.\n * @return {boolean} true if the two arrays are equal\n */\nfunction equals(array1, array2, equalsFunction) {\n    var equals = equalsFunction || util.defaultEquals;\n    if (array1.length !== array2.length) {\n        return false;\n    }\n    var length = array1.length;\n    for (var i = 0; i < length; i++) {\n        if (!equals(array1[i], array2[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nexports.equals = equals;\n/**\n * Returns shallow a copy of the specified array.\n * @param {*} array the array to copy.\n * @return {Array} a copy of the specified array\n */\nfunction copy(array) {\n    return array.concat();\n}\nexports.copy = copy;\n/**\n * Swaps the elements at the specified positions in the specified array.\n * @param {Array} array The array in which to swap elements.\n * @param {number} i the index of one element to be swapped.\n * @param {number} j the index of the other element to be swapped.\n * @return {boolean} true if the array is defined and the indexes are valid.\n */\nfunction swap(array, i, j) {\n    if (i < 0 || i >= array.length || j < 0 || j >= array.length) {\n        return false;\n    }\n    var temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n    return true;\n}\nexports.swap = swap;\nfunction toString(array) {\n    return '[' + array.toString() + ']';\n}\nexports.toString = toString;\n/**\n * Executes the provided function once for each element present in this array\n * starting from index 0 to length - 1.\n * @param {Array} array The array in which to iterate.\n * @param {function(Object):*} callback function to execute, it is\n * invoked with one argument: the element value, to break the iteration you can\n * optionally return false.\n */\nfunction forEach(array, callback) {\n    for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {\n        var ele = array_1[_i];\n        if (callback(ele) === false) {\n            return;\n        }\n    }\n}\nexports.forEach = forEach;\n//# sourceMappingURL=arrays.js.map","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\nvar util = require('./util');\nvar Queue_1 = require('./Queue');\nvar BSTree = (function () {\n    /**\n     * Creates an empty binary search tree.\n     * @class <p>A binary search tree is a binary tree in which each\n     * internal node stores an element such that the elements stored in the\n     * left subtree are less than it and the elements\n     * stored in the right subtree are greater.</p>\n     * <p>Formally, a binary search tree is a node-based binary tree data structure which\n     * has the following properties:</p>\n     * <ul>\n     * <li>The left subtree of a node contains only nodes with elements less\n     * than the node's element</li>\n     * <li>The right subtree of a node contains only nodes with elements greater\n     * than the node's element</li>\n     * <li>Both the left and right subtrees must also be binary search trees.</li>\n     * </ul>\n     * <p>If the inserted elements are custom objects a compare function must\n     * be provided at construction time, otherwise the <=, === and >= operators are\n     * used to compare elements. Example:</p>\n     * <pre>\n     * function compare(a, b) {\n     *  if (a is less than b by some ordering criterion) {\n     *     return -1;\n     *  } if (a is greater than b by the ordering criterion) {\n     *     return 1;\n     *  }\n     *  // a must be equal to b\n     *  return 0;\n     * }\n     * </pre>\n     * @constructor\n     * @param {function(Object,Object):number=} compareFunction optional\n     * function used to compare two elements. Must return a negative integer,\n     * zero, or a positive integer as the first argument is less than, equal to,\n     * or greater than the second.\n     */\n    function BSTree(compareFunction) {\n        this.root = null;\n        this.compare = compareFunction || util.defaultCompare;\n        this.nElements = 0;\n    }\n    /**\n     * Adds the specified element to this tree if it is not already present.\n     * @param {Object} element the element to insert.\n     * @return {boolean} true if this tree did not already contain the specified element.\n     */\n    BSTree.prototype.add = function (element) {\n        if (util.isUndefined(element)) {\n            return false;\n        }\n        if (this.insertNode(this.createNode(element)) !== null) {\n            this.nElements++;\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Removes all of the elements from this tree.\n     */\n    BSTree.prototype.clear = function () {\n        this.root = null;\n        this.nElements = 0;\n    };\n    /**\n     * Returns true if this tree contains no elements.\n     * @return {boolean} true if this tree contains no elements.\n     */\n    BSTree.prototype.isEmpty = function () {\n        return this.nElements === 0;\n    };\n    /**\n     * Returns the number of elements in this tree.\n     * @return {number} the number of elements in this tree.\n     */\n    BSTree.prototype.size = function () {\n        return this.nElements;\n    };\n    /**\n     * Returns true if this tree contains the specified element.\n     * @param {Object} element element to search for.\n     * @return {boolean} true if this tree contains the specified element,\n     * false otherwise.\n     */\n    BSTree.prototype.contains = function (element) {\n        if (util.isUndefined(element)) {\n            return false;\n        }\n        return this.searchNode(this.root, element) !== null;\n    };\n    /**\n     * Removes the specified element from this tree if it is present.\n     * @return {boolean} true if this tree contained the specified element.\n     */\n    BSTree.prototype.remove = function (element) {\n        var node = this.searchNode(this.root, element);\n        if (node === null) {\n            return false;\n        }\n        this.removeNode(node);\n        this.nElements--;\n        return true;\n    };\n    /**\n     * Executes the provided function once for each element present in this tree in\n     * in-order.\n     * @param {function(Object):*} callback function to execute, it is invoked with one\n     * argument: the element value, to break the iteration you can optionally return false.\n     */\n    BSTree.prototype.inorderTraversal = function (callback) {\n        this.inorderTraversalAux(this.root, callback, {\n            stop: false\n        });\n    };\n    /**\n     * Executes the provided function once for each element present in this tree in pre-order.\n     * @param {function(Object):*} callback function to execute, it is invoked with one\n     * argument: the element value, to break the iteration you can optionally return false.\n     */\n    BSTree.prototype.preorderTraversal = function (callback) {\n        this.preorderTraversalAux(this.root, callback, {\n            stop: false\n        });\n    };\n    /**\n     * Executes the provided function once for each element present in this tree in post-order.\n     * @param {function(Object):*} callback function to execute, it is invoked with one\n     * argument: the element value, to break the iteration you can optionally return false.\n     */\n    BSTree.prototype.postorderTraversal = function (callback) {\n        this.postorderTraversalAux(this.root, callback, {\n            stop: false\n        });\n    };\n    /**\n     * Executes the provided function once for each element present in this tree in\n     * level-order.\n     * @param {function(Object):*} callback function to execute, it is invoked with one\n     * argument: the element value, to break the iteration you can optionally return false.\n     */\n    BSTree.prototype.levelTraversal = function (callback) {\n        this.levelTraversalAux(this.root, callback);\n    };\n    /**\n     * Returns the minimum element of this tree.\n     * @return {*} the minimum element of this tree or undefined if this tree is\n     * is empty.\n     */\n    BSTree.prototype.minimum = function () {\n        if (this.isEmpty()) {\n            return undefined;\n        }\n        return this.minimumAux(this.root).element;\n    };\n    /**\n     * Returns the maximum element of this tree.\n     * @return {*} the maximum element of this tree or undefined if this tree is\n     * is empty.\n     */\n    BSTree.prototype.maximum = function () {\n        if (this.isEmpty()) {\n            return undefined;\n        }\n        return this.maximumAux(this.root).element;\n    };\n    /**\n     * Executes the provided function once for each element present in this tree in inorder.\n     * Equivalent to inorderTraversal.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element value, to break the iteration you can\n     * optionally return false.\n     */\n    BSTree.prototype.forEach = function (callback) {\n        this.inorderTraversal(callback);\n    };\n    /**\n     * Returns an array containing all of the elements in this tree in in-order.\n     * @return {Array} an array containing all of the elements in this tree in in-order.\n     */\n    BSTree.prototype.toArray = function () {\n        var array = [];\n        this.inorderTraversal(function (element) {\n            array.push(element);\n            return true;\n        });\n        return array;\n    };\n    /**\n     * Returns the height of this tree.\n     * @return {number} the height of this tree or -1 if is empty.\n     */\n    BSTree.prototype.height = function () {\n        return this.heightAux(this.root);\n    };\n    /**\n    * @private\n    */\n    BSTree.prototype.searchNode = function (node, element) {\n        var cmp = null;\n        while (node !== null && cmp !== 0) {\n            cmp = this.compare(element, node.element);\n            if (cmp < 0) {\n                node = node.leftCh;\n            }\n            else if (cmp > 0) {\n                node = node.rightCh;\n            }\n        }\n        return node;\n    };\n    /**\n    * @private\n    */\n    BSTree.prototype.transplant = function (n1, n2) {\n        if (n1.parent === null) {\n            this.root = n2;\n        }\n        else if (n1 === n1.parent.leftCh) {\n            n1.parent.leftCh = n2;\n        }\n        else {\n            n1.parent.rightCh = n2;\n        }\n        if (n2 !== null) {\n            n2.parent = n1.parent;\n        }\n    };\n    /**\n    * @private\n    */\n    BSTree.prototype.removeNode = function (node) {\n        if (node.leftCh === null) {\n            this.transplant(node, node.rightCh);\n        }\n        else if (node.rightCh === null) {\n            this.transplant(node, node.leftCh);\n        }\n        else {\n            var y = this.minimumAux(node.rightCh);\n            if (y.parent !== node) {\n                this.transplant(y, y.rightCh);\n                y.rightCh = node.rightCh;\n                y.rightCh.parent = y;\n            }\n            this.transplant(node, y);\n            y.leftCh = node.leftCh;\n            y.leftCh.parent = y;\n        }\n    };\n    /**\n    * @private\n    */\n    BSTree.prototype.inorderTraversalAux = function (node, callback, signal) {\n        if (node === null || signal.stop) {\n            return;\n        }\n        this.inorderTraversalAux(node.leftCh, callback, signal);\n        if (signal.stop) {\n            return;\n        }\n        signal.stop = callback(node.element) === false;\n        if (signal.stop) {\n            return;\n        }\n        this.inorderTraversalAux(node.rightCh, callback, signal);\n    };\n    /**\n    * @private\n    */\n    BSTree.prototype.levelTraversalAux = function (node, callback) {\n        var queue = new Queue_1.default();\n        if (node !== null) {\n            queue.enqueue(node);\n        }\n        while (!queue.isEmpty()) {\n            node = queue.dequeue();\n            if (callback(node.element) === false) {\n                return;\n            }\n            if (node.leftCh !== null) {\n                queue.enqueue(node.leftCh);\n            }\n            if (node.rightCh !== null) {\n                queue.enqueue(node.rightCh);\n            }\n        }\n    };\n    /**\n    * @private\n    */\n    BSTree.prototype.preorderTraversalAux = function (node, callback, signal) {\n        if (node === null || signal.stop) {\n            return;\n        }\n        signal.stop = callback(node.element) === false;\n        if (signal.stop) {\n            return;\n        }\n        this.preorderTraversalAux(node.leftCh, callback, signal);\n        if (signal.stop) {\n            return;\n        }\n        this.preorderTraversalAux(node.rightCh, callback, signal);\n    };\n    /**\n    * @private\n    */\n    BSTree.prototype.postorderTraversalAux = function (node, callback, signal) {\n        if (node === null || signal.stop) {\n            return;\n        }\n        this.postorderTraversalAux(node.leftCh, callback, signal);\n        if (signal.stop) {\n            return;\n        }\n        this.postorderTraversalAux(node.rightCh, callback, signal);\n        if (signal.stop) {\n            return;\n        }\n        signal.stop = callback(node.element) === false;\n    };\n    /**\n    * @private\n    */\n    BSTree.prototype.minimumAux = function (node) {\n        while (node.leftCh !== null) {\n            node = node.leftCh;\n        }\n        return node;\n    };\n    /**\n    * @private\n    */\n    BSTree.prototype.maximumAux = function (node) {\n        while (node.rightCh !== null) {\n            node = node.rightCh;\n        }\n        return node;\n    };\n    /**\n      * @private\n      */\n    BSTree.prototype.heightAux = function (node) {\n        if (node === null) {\n            return -1;\n        }\n        return Math.max(this.heightAux(node.leftCh), this.heightAux(node.rightCh)) + 1;\n    };\n    /*\n    * @private\n    */\n    BSTree.prototype.insertNode = function (node) {\n        var parent = null;\n        var position = this.root;\n        var cmp = null;\n        while (position !== null) {\n            cmp = this.compare(node.element, position.element);\n            if (cmp === 0) {\n                return null;\n            }\n            else if (cmp < 0) {\n                parent = position;\n                position = position.leftCh;\n            }\n            else {\n                parent = position;\n                position = position.rightCh;\n            }\n        }\n        node.parent = parent;\n        if (parent === null) {\n            // tree is empty\n            this.root = node;\n        }\n        else if (this.compare(node.element, parent.element) < 0) {\n            parent.leftCh = node;\n        }\n        else {\n            parent.rightCh = node;\n        }\n        return node;\n    };\n    /**\n    * @private\n    */\n    BSTree.prototype.createNode = function (element) {\n        return {\n            element: element,\n            leftCh: null,\n            rightCh: null,\n            parent: null\n        };\n    };\n    return BSTree;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = BSTree;\n//# sourceMappingURL=BSTree.js.map","\"use strict\";\nvar util = require('./util');\nvar Dictionary_1 = require('./Dictionary');\nvar Set_1 = require('./Set');\nvar Bag = (function () {\n    /**\n     * Creates an empty bag.\n     * @class <p>A bag is a special kind of set in which members are\n     * allowed to appear more than once.</p>\n     * <p>If the inserted elements are custom objects a function\n     * which converts elements to unique strings must be provided. Example:</p>\n     *\n     * <pre>\n     * function petToString(pet) {\n     *  return pet.name;\n     * }\n     * </pre>\n     *\n     * @constructor\n     * @param {function(Object):string=} toStrFunction optional function used\n     * to convert elements to strings. If the elements aren't strings or if toString()\n     * is not appropriate, a custom function which receives an object and returns a\n     * unique string must be provided.\n     */\n    function Bag(toStrFunction) {\n        this.toStrF = toStrFunction || util.defaultToString;\n        this.dictionary = new Dictionary_1.default(this.toStrF);\n        this.nElements = 0;\n    }\n    /**\n    * Adds nCopies of the specified object to this bag.\n    * @param {Object} element element to add.\n    * @param {number=} nCopies the number of copies to add, if this argument is\n    * undefined 1 copy is added.\n    * @return {boolean} true unless element is undefined.\n    */\n    Bag.prototype.add = function (element, nCopies) {\n        if (nCopies === void 0) { nCopies = 1; }\n        if (util.isUndefined(element) || nCopies <= 0) {\n            return false;\n        }\n        if (!this.contains(element)) {\n            var node = {\n                value: element,\n                copies: nCopies\n            };\n            this.dictionary.setValue(element, node);\n        }\n        else {\n            this.dictionary.getValue(element).copies += nCopies;\n        }\n        this.nElements += nCopies;\n        return true;\n    };\n    /**\n    * Counts the number of copies of the specified object in this bag.\n    * @param {Object} element the object to search for..\n    * @return {number} the number of copies of the object, 0 if not found\n    */\n    Bag.prototype.count = function (element) {\n        if (!this.contains(element)) {\n            return 0;\n        }\n        else {\n            return this.dictionary.getValue(element).copies;\n        }\n    };\n    /**\n     * Returns true if this bag contains the specified element.\n     * @param {Object} element element to search for.\n     * @return {boolean} true if this bag contains the specified element,\n     * false otherwise.\n     */\n    Bag.prototype.contains = function (element) {\n        return this.dictionary.containsKey(element);\n    };\n    /**\n    * Removes nCopies of the specified object to this bag.\n    * If the number of copies to remove is greater than the actual number\n    * of copies in the Bag, all copies are removed.\n    * @param {Object} element element to remove.\n    * @param {number=} nCopies the number of copies to remove, if this argument is\n    * undefined 1 copy is removed.\n    * @return {boolean} true if at least 1 element was removed.\n    */\n    Bag.prototype.remove = function (element, nCopies) {\n        if (nCopies === void 0) { nCopies = 1; }\n        if (util.isUndefined(element) || nCopies <= 0) {\n            return false;\n        }\n        if (!this.contains(element)) {\n            return false;\n        }\n        else {\n            var node = this.dictionary.getValue(element);\n            if (nCopies > node.copies) {\n                this.nElements -= node.copies;\n            }\n            else {\n                this.nElements -= nCopies;\n            }\n            node.copies -= nCopies;\n            if (node.copies <= 0) {\n                this.dictionary.remove(element);\n            }\n            return true;\n        }\n    };\n    /**\n     * Returns an array containing all of the elements in this big in arbitrary order,\n     * including multiple copies.\n     * @return {Array} an array containing all of the elements in this bag.\n     */\n    Bag.prototype.toArray = function () {\n        var a = [];\n        var values = this.dictionary.values();\n        for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {\n            var node = values_1[_i];\n            var element = node.value;\n            var copies = node.copies;\n            for (var j = 0; j < copies; j++) {\n                a.push(element);\n            }\n        }\n        return a;\n    };\n    /**\n     * Returns a set of unique elements in this bag.\n     * @return {collections.Set<T>} a set of unique elements in this bag.\n     */\n    Bag.prototype.toSet = function () {\n        var toret = new Set_1.default(this.toStrF);\n        var elements = this.dictionary.values();\n        for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {\n            var ele = elements_1[_i];\n            var value = ele.value;\n            toret.add(value);\n        }\n        return toret;\n    };\n    /**\n     * Executes the provided function once for each element\n     * present in this bag, including multiple copies.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element. To break the iteration you can\n     * optionally return false.\n     */\n    Bag.prototype.forEach = function (callback) {\n        this.dictionary.forEach(function (k, v) {\n            var value = v.value;\n            var copies = v.copies;\n            for (var i = 0; i < copies; i++) {\n                if (callback(value) === false) {\n                    return false;\n                }\n            }\n            return true;\n        });\n    };\n    /**\n     * Returns the number of elements in this bag.\n     * @return {number} the number of elements in this bag.\n     */\n    Bag.prototype.size = function () {\n        return this.nElements;\n    };\n    /**\n     * Returns true if this bag contains no elements.\n     * @return {boolean} true if this bag contains no elements.\n     */\n    Bag.prototype.isEmpty = function () {\n        return this.nElements === 0;\n    };\n    /**\n     * Removes all of the elements from this bag.\n     */\n    Bag.prototype.clear = function () {\n        this.nElements = 0;\n        this.dictionary.clear();\n    };\n    return Bag;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Bag; // End of bag\n//# sourceMappingURL=Bag.js.map","\"use strict\";\nvar util = require('./util');\nvar Dictionary = (function () {\n    /**\n     * Creates an empty dictionary.\n     * @class <p>Dictionaries map keys to values; each key can map to at most one value.\n     * This implementation accepts any kind of objects as keys.</p>\n     *\n     * <p>If the keys are custom objects a function which converts keys to unique\n     * strings must be provided. Example:</p>\n     * <pre>\n     * function petToString(pet) {\n     *  return pet.name;\n     * }\n     * </pre>\n     * @constructor\n     * @param {function(Object):string=} toStrFunction optional function used\n     * to convert keys to strings. If the keys aren't strings or if toString()\n     * is not appropriate, a custom function which receives a key and returns a\n     * unique string must be provided.\n     */\n    function Dictionary(toStrFunction) {\n        this.table = {};\n        this.nElements = 0;\n        this.toStr = toStrFunction || util.defaultToString;\n    }\n    /**\n     * Returns the value to which this dictionary maps the specified key.\n     * Returns undefined if this dictionary contains no mapping for this key.\n     * @param {Object} key key whose associated value is to be returned.\n     * @return {*} the value to which this dictionary maps the specified key or\n     * undefined if the map contains no mapping for this key.\n     */\n    Dictionary.prototype.getValue = function (key) {\n        var pair = this.table['$' + this.toStr(key)];\n        if (util.isUndefined(pair)) {\n            return undefined;\n        }\n        return pair.value;\n    };\n    /**\n     * Associates the specified value with the specified key in this dictionary.\n     * If the dictionary previously contained a mapping for this key, the old\n     * value is replaced by the specified value.\n     * @param {Object} key key with which the specified value is to be\n     * associated.\n     * @param {Object} value value to be associated with the specified key.\n     * @return {*} previous value associated with the specified key, or undefined if\n     * there was no mapping for the key or if the key/value are undefined.\n     */\n    Dictionary.prototype.setValue = function (key, value) {\n        if (util.isUndefined(key) || util.isUndefined(value)) {\n            return undefined;\n        }\n        var ret;\n        var k = '$' + this.toStr(key);\n        var previousElement = this.table[k];\n        if (util.isUndefined(previousElement)) {\n            this.nElements++;\n            ret = undefined;\n        }\n        else {\n            ret = previousElement.value;\n        }\n        this.table[k] = {\n            key: key,\n            value: value\n        };\n        return ret;\n    };\n    /**\n     * Removes the mapping for this key from this dictionary if it is present.\n     * @param {Object} key key whose mapping is to be removed from the\n     * dictionary.\n     * @return {*} previous value associated with specified key, or undefined if\n     * there was no mapping for key.\n     */\n    Dictionary.prototype.remove = function (key) {\n        var k = '$' + this.toStr(key);\n        var previousElement = this.table[k];\n        if (!util.isUndefined(previousElement)) {\n            delete this.table[k];\n            this.nElements--;\n            return previousElement.value;\n        }\n        return undefined;\n    };\n    /**\n     * Returns an array containing all of the keys in this dictionary.\n     * @return {Array} an array containing all of the keys in this dictionary.\n     */\n    Dictionary.prototype.keys = function () {\n        var array = [];\n        for (var name_1 in this.table) {\n            if (util.has(this.table, name_1)) {\n                var pair = this.table[name_1];\n                array.push(pair.key);\n            }\n        }\n        return array;\n    };\n    /**\n     * Returns an array containing all of the values in this dictionary.\n     * @return {Array} an array containing all of the values in this dictionary.\n     */\n    Dictionary.prototype.values = function () {\n        var array = [];\n        for (var name_2 in this.table) {\n            if (util.has(this.table, name_2)) {\n                var pair = this.table[name_2];\n                array.push(pair.value);\n            }\n        }\n        return array;\n    };\n    /**\n    * Executes the provided function once for each key-value pair\n    * present in this dictionary.\n    * @param {function(Object,Object):*} callback function to execute, it is\n    * invoked with two arguments: key and value. To break the iteration you can\n    * optionally return false.\n    */\n    Dictionary.prototype.forEach = function (callback) {\n        for (var name_3 in this.table) {\n            if (util.has(this.table, name_3)) {\n                var pair = this.table[name_3];\n                var ret = callback(pair.key, pair.value);\n                if (ret === false) {\n                    return;\n                }\n            }\n        }\n    };\n    /**\n     * Returns true if this dictionary contains a mapping for the specified key.\n     * @param {Object} key key whose presence in this dictionary is to be\n     * tested.\n     * @return {boolean} true if this dictionary contains a mapping for the\n     * specified key.\n     */\n    Dictionary.prototype.containsKey = function (key) {\n        return !util.isUndefined(this.getValue(key));\n    };\n    /**\n    * Removes all mappings from this dictionary.\n    * @this {collections.Dictionary}\n    */\n    Dictionary.prototype.clear = function () {\n        this.table = {};\n        this.nElements = 0;\n    };\n    /**\n     * Returns the number of keys in this dictionary.\n     * @return {number} the number of key-value mappings in this dictionary.\n     */\n    Dictionary.prototype.size = function () {\n        return this.nElements;\n    };\n    /**\n     * Returns true if this dictionary contains no mappings.\n     * @return {boolean} true if this dictionary contains no mappings.\n     */\n    Dictionary.prototype.isEmpty = function () {\n        return this.nElements <= 0;\n    };\n    Dictionary.prototype.toString = function () {\n        var toret = '{';\n        this.forEach(function (k, v) {\n            toret += \"\\n\\t\" + k + \" : \" + v;\n        });\n        return toret + '\\n}';\n    };\n    return Dictionary;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Dictionary; // End of dictionary\n//# sourceMappingURL=Dictionary.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Dictionary_1 = require('./Dictionary');\nvar util = require('./util');\nvar FactoryDictionary = (function (_super) {\n    __extends(FactoryDictionary, _super);\n    /**\n     * Creates an empty dictionary.\n     * @class <p>Dictionaries map keys to values; each key can map to at most one value.\n     * This implementation accepts any kind of objects as keys.</p>\n     *\n     * <p>The default factory function should return a new object of the provided\n     * type. Example:</p>\n     * <pre>\n     * function petFactory() {\n     *  return new Pet();\n     * }\n     * </pre>\n     *\n     * <p>If the keys are custom objects a function which converts keys to unique\n     * strings must be provided. Example:</p>\n     * <pre>\n     * function petToString(pet) {\n     *  return pet.name;\n     * }\n     * </pre>\n     * @constructor\n     * @param {function():V=} defaultFactoryFunction function used to create a\n     * default object.\n     * @param {function(Object):string=} toStrFunction optional function used\n     * to convert keys to strings. If the keys aren't strings or if toString()\n     * is not appropriate, a custom function which receives a key and returns a\n     * unique string must be provided.\n     */\n    function FactoryDictionary(defaultFactoryFunction, toStrFunction) {\n        _super.call(this, toStrFunction);\n        this.defaultFactoryFunction = defaultFactoryFunction;\n    }\n    /**\n     * Associates the specified default value with the specified key in this dictionary,\n     * if it didn't contain the key yet. If the key existed, the existing value will be used.\n     * @param {Object} key key with which the specified value is to be\n     * associated.\n     * @param {Object} defaultValue default value to be associated with the specified key.\n     * @return {*} previous value associated with the specified key, or the default value,\n     * if the key didn't exist yet.\n     */\n    FactoryDictionary.prototype.setDefault = function (key, defaultValue) {\n        var currentValue = _super.prototype.getValue.call(this, key);\n        if (util.isUndefined(currentValue)) {\n            this.setValue(key, defaultValue);\n            return defaultValue;\n        }\n        return currentValue;\n    };\n    /**\n     * Returns the value to which this dictionary maps the specified key.\n     * Returns a default value created by the factory passed in the constructor,\n     * if this dictionary contains no mapping for this key. The missing key will\n     * automatically be added to the dictionary.\n     * @param {Object} key key whose associated value is to be returned.\n     * @return {*} the value to which this dictionary maps the specified key or\n     * a default value if the map contains no mapping for this key.\n     */\n    FactoryDictionary.prototype.getValue = function (key) {\n        return this.setDefault(key, this.defaultFactoryFunction());\n    };\n    return FactoryDictionary;\n}(Dictionary_1.default));\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = FactoryDictionary;\n//# sourceMappingURL=FactoryDictionary.js.map","\"use strict\";\nvar collections = require('./util');\nvar arrays = require('./arrays');\nvar Heap = (function () {\n    /**\n     * Creates an empty Heap.\n     * @class\n     * <p>A heap is a binary tree, where the nodes maintain the heap property:\n     * each node is smaller than each of its children and therefore a MinHeap\n     * This implementation uses an array to store elements.</p>\n     * <p>If the inserted elements are custom objects a compare function must be provided,\n     *  at construction time, otherwise the <=, === and >= operators are\n     * used to compare elements. Example:</p>\n     *\n     * <pre>\n     * function compare(a, b) {\n     *  if (a is less than b by some ordering criterion) {\n     *     return -1;\n     *  } if (a is greater than b by the ordering criterion) {\n     *     return 1;\n     *  }\n     *  // a must be equal to b\n     *  return 0;\n     * }\n     * </pre>\n     *\n     * <p>If a Max-Heap is wanted (greater elements on top) you can a provide a\n     * reverse compare function to accomplish that behavior. Example:</p>\n     *\n     * <pre>\n     * function reverseCompare(a, b) {\n     *  if (a is less than b by some ordering criterion) {\n     *     return 1;\n     *  } if (a is greater than b by the ordering criterion) {\n     *     return -1;\n     *  }\n     *  // a must be equal to b\n     *  return 0;\n     * }\n     * </pre>\n     *\n     * @constructor\n     * @param {function(Object,Object):number=} compareFunction optional\n     * function used to compare two elements. Must return a negative integer,\n     * zero, or a positive integer as the first argument is less than, equal to,\n     * or greater than the second.\n     */\n    function Heap(compareFunction) {\n        /**\n         * Array used to store the elements od the heap.\n         * @type {Array.<Object>}\n         * @private\n         */\n        this.data = [];\n        this.compare = compareFunction || collections.defaultCompare;\n    }\n    /**\n     * Returns the index of the left child of the node at the given index.\n     * @param {number} nodeIndex The index of the node to get the left child\n     * for.\n     * @return {number} The index of the left child.\n     * @private\n     */\n    Heap.prototype.leftChildIndex = function (nodeIndex) {\n        return (2 * nodeIndex) + 1;\n    };\n    /**\n     * Returns the index of the right child of the node at the given index.\n     * @param {number} nodeIndex The index of the node to get the right child\n     * for.\n     * @return {number} The index of the right child.\n     * @private\n     */\n    Heap.prototype.rightChildIndex = function (nodeIndex) {\n        return (2 * nodeIndex) + 2;\n    };\n    /**\n     * Returns the index of the parent of the node at the given index.\n     * @param {number} nodeIndex The index of the node to get the parent for.\n     * @return {number} The index of the parent.\n     * @private\n     */\n    Heap.prototype.parentIndex = function (nodeIndex) {\n        return Math.floor((nodeIndex - 1) / 2);\n    };\n    /**\n     * Returns the index of the smaller child node (if it exists).\n     * @param {number} leftChild left child index.\n     * @param {number} rightChild right child index.\n     * @return {number} the index with the minimum value or -1 if it doesn't\n     * exists.\n     * @private\n     */\n    Heap.prototype.minIndex = function (leftChild, rightChild) {\n        if (rightChild >= this.data.length) {\n            if (leftChild >= this.data.length) {\n                return -1;\n            }\n            else {\n                return leftChild;\n            }\n        }\n        else {\n            if (this.compare(this.data[leftChild], this.data[rightChild]) <= 0) {\n                return leftChild;\n            }\n            else {\n                return rightChild;\n            }\n        }\n    };\n    /**\n     * Moves the node at the given index up to its proper place in the heap.\n     * @param {number} index The index of the node to move up.\n     * @private\n     */\n    Heap.prototype.siftUp = function (index) {\n        var parent = this.parentIndex(index);\n        while (index > 0 && this.compare(this.data[parent], this.data[index]) > 0) {\n            arrays.swap(this.data, parent, index);\n            index = parent;\n            parent = this.parentIndex(index);\n        }\n    };\n    /**\n     * Moves the node at the given index down to its proper place in the heap.\n     * @param {number} nodeIndex The index of the node to move down.\n     * @private\n     */\n    Heap.prototype.siftDown = function (nodeIndex) {\n        //smaller child index\n        var min = this.minIndex(this.leftChildIndex(nodeIndex), this.rightChildIndex(nodeIndex));\n        while (min >= 0 && this.compare(this.data[nodeIndex], this.data[min]) > 0) {\n            arrays.swap(this.data, min, nodeIndex);\n            nodeIndex = min;\n            min = this.minIndex(this.leftChildIndex(nodeIndex), this.rightChildIndex(nodeIndex));\n        }\n    };\n    /**\n     * Retrieves but does not remove the root element of this heap.\n     * @return {*} The value at the root of the heap. Returns undefined if the\n     * heap is empty.\n     */\n    Heap.prototype.peek = function () {\n        if (this.data.length > 0) {\n            return this.data[0];\n        }\n        else {\n            return undefined;\n        }\n    };\n    /**\n     * Adds the given element into the heap.\n     * @param {*} element the element.\n     * @return true if the element was added or fals if it is undefined.\n     */\n    Heap.prototype.add = function (element) {\n        if (collections.isUndefined(element)) {\n            return undefined;\n        }\n        this.data.push(element);\n        this.siftUp(this.data.length - 1);\n        return true;\n    };\n    /**\n     * Retrieves and removes the root element of this heap.\n     * @return {*} The value removed from the root of the heap. Returns\n     * undefined if the heap is empty.\n     */\n    Heap.prototype.removeRoot = function () {\n        if (this.data.length > 0) {\n            var obj = this.data[0];\n            this.data[0] = this.data[this.data.length - 1];\n            this.data.splice(this.data.length - 1, 1);\n            if (this.data.length > 0) {\n                this.siftDown(0);\n            }\n            return obj;\n        }\n        return undefined;\n    };\n    /**\n     * Returns true if this heap contains the specified element.\n     * @param {Object} element element to search for.\n     * @return {boolean} true if this Heap contains the specified element, false\n     * otherwise.\n     */\n    Heap.prototype.contains = function (element) {\n        var equF = collections.compareToEquals(this.compare);\n        return arrays.contains(this.data, element, equF);\n    };\n    /**\n     * Returns the number of elements in this heap.\n     * @return {number} the number of elements in this heap.\n     */\n    Heap.prototype.size = function () {\n        return this.data.length;\n    };\n    /**\n     * Checks if this heap is empty.\n     * @return {boolean} true if and only if this heap contains no items; false\n     * otherwise.\n     */\n    Heap.prototype.isEmpty = function () {\n        return this.data.length <= 0;\n    };\n    /**\n     * Removes all of the elements from this heap.\n     */\n    Heap.prototype.clear = function () {\n        this.data.length = 0;\n    };\n    /**\n     * Executes the provided function once for each element present in this heap in\n     * no particular order.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element value, to break the iteration you can\n     * optionally return false.\n     */\n    Heap.prototype.forEach = function (callback) {\n        arrays.forEach(this.data, callback);\n    };\n    return Heap;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Heap;\n//# sourceMappingURL=Heap.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Dictionary_1 = require('./Dictionary');\nvar util = require('./util');\n/**\n * This class is used by the LinkedDictionary Internally\n * Has to be a class, not an interface, because it needs to have\n * the 'unlink' function defined.\n */\nvar LinkedDictionaryPair = (function () {\n    function LinkedDictionaryPair(key, value) {\n        this.key = key;\n        this.value = value;\n    }\n    LinkedDictionaryPair.prototype.unlink = function () {\n        this.prev.next = this.next;\n        this.next.prev = this.prev;\n    };\n    return LinkedDictionaryPair;\n}());\nvar LinkedDictionary = (function (_super) {\n    __extends(LinkedDictionary, _super);\n    function LinkedDictionary(toStrFunction) {\n        _super.call(this, toStrFunction);\n        this.head = new LinkedDictionaryPair(null, null);\n        this.tail = new LinkedDictionaryPair(null, null);\n        this.head.next = this.tail;\n        this.tail.prev = this.head;\n    }\n    /**\n     * Inserts the new node to the 'tail' of the list, updating the\n     * neighbors, and moving 'this.tail' (the End of List indicator) that\n     * to the end.\n     */\n    LinkedDictionary.prototype.appendToTail = function (entry) {\n        var lastNode = this.tail.prev;\n        lastNode.next = entry;\n        entry.prev = lastNode;\n        entry.next = this.tail;\n        this.tail.prev = entry;\n    };\n    /**\n     * Retrieves a linked dictionary from the table internally\n     */\n    LinkedDictionary.prototype.getLinkedDictionaryPair = function (key) {\n        if (util.isUndefined(key)) {\n            return undefined;\n        }\n        var k = '$' + this.toStr(key);\n        var pair = (this.table[k]);\n        return pair;\n    };\n    /**\n     * Returns the value to which this dictionary maps the specified key.\n     * Returns undefined if this dictionary contains no mapping for this key.\n     * @param {Object} key key whose associated value is to be returned.\n     * @return {*} the value to which this dictionary maps the specified key or\n     * undefined if the map contains no mapping for this key.\n     */\n    LinkedDictionary.prototype.getValue = function (key) {\n        var pair = this.getLinkedDictionaryPair(key);\n        if (!util.isUndefined(pair)) {\n            return pair.value;\n        }\n        return undefined;\n    };\n    /**\n     * Removes the mapping for this key from this dictionary if it is present.\n     * Also, if a value is present for this key, the entry is removed from the\n     * insertion ordering.\n     * @param {Object} key key whose mapping is to be removed from the\n     * dictionary.\n     * @return {*} previous value associated with specified key, or undefined if\n     * there was no mapping for key.\n     */\n    LinkedDictionary.prototype.remove = function (key) {\n        var pair = this.getLinkedDictionaryPair(key);\n        if (!util.isUndefined(pair)) {\n            _super.prototype.remove.call(this, key); // This will remove it from the table\n            pair.unlink(); // This will unlink it from the chain\n            return pair.value;\n        }\n        return undefined;\n    };\n    /**\n    * Removes all mappings from this LinkedDictionary.\n    * @this {collections.LinkedDictionary}\n    */\n    LinkedDictionary.prototype.clear = function () {\n        _super.prototype.clear.call(this);\n        this.head.next = this.tail;\n        this.tail.prev = this.head;\n    };\n    /**\n     * Internal function used when updating an existing KeyValue pair.\n     * It places the new value indexed by key into the table, but maintains\n     * its place in the linked ordering.\n     */\n    LinkedDictionary.prototype.replace = function (oldPair, newPair) {\n        var k = '$' + this.toStr(newPair.key);\n        // set the new Pair's links to existingPair's links\n        newPair.next = oldPair.next;\n        newPair.prev = oldPair.prev;\n        // Delete Existing Pair from the table, unlink it from chain.\n        // As a result, the nElements gets decremented by this operation\n        this.remove(oldPair.key);\n        // Link new Pair in place of where oldPair was,\n        // by pointing the old pair's neighbors to it.\n        newPair.prev.next = newPair;\n        newPair.next.prev = newPair;\n        this.table[k] = newPair;\n        // To make up for the fact that the number of elements was decremented,\n        // We need to increase it by one.\n        ++this.nElements;\n    };\n    /**\n     * Associates the specified value with the specified key in this dictionary.\n     * If the dictionary previously contained a mapping for this key, the old\n     * value is replaced by the specified value.\n     * Updating of a key that already exists maintains its place in the\n     * insertion order into the map.\n     * @param {Object} key key with which the specified value is to be\n     * associated.\n     * @param {Object} value value to be associated with the specified key.\n     * @return {*} previous value associated with the specified key, or undefined if\n     * there was no mapping for the key or if the key/value are undefined.\n     */\n    LinkedDictionary.prototype.setValue = function (key, value) {\n        if (util.isUndefined(key) || util.isUndefined(value)) {\n            return undefined;\n        }\n        var existingPair = this.getLinkedDictionaryPair(key);\n        var newPair = new LinkedDictionaryPair(key, value);\n        var k = '$' + this.toStr(key);\n        // If there is already an element for that key, we\n        // keep it's place in the LinkedList\n        if (!util.isUndefined(existingPair)) {\n            this.replace(existingPair, newPair);\n            return existingPair.value;\n        }\n        else {\n            this.appendToTail(newPair);\n            this.table[k] = newPair;\n            ++this.nElements;\n            return undefined;\n        }\n    };\n    /**\n     * Returns an array containing all of the keys in this LinkedDictionary, ordered\n     * by insertion order.\n     * @return {Array} an array containing all of the keys in this LinkedDictionary,\n     * ordered by insertion order.\n     */\n    LinkedDictionary.prototype.keys = function () {\n        var array = [];\n        this.forEach(function (key, value) {\n            array.push(key);\n        });\n        return array;\n    };\n    /**\n     * Returns an array containing all of the values in this LinkedDictionary, ordered by\n     * insertion order.\n     * @return {Array} an array containing all of the values in this LinkedDictionary,\n     * ordered by insertion order.\n     */\n    LinkedDictionary.prototype.values = function () {\n        var array = [];\n        this.forEach(function (key, value) {\n            array.push(value);\n        });\n        return array;\n    };\n    /**\n    * Executes the provided function once for each key-value pair\n    * present in this LinkedDictionary. It is done in the order of insertion\n    * into the LinkedDictionary\n    * @param {function(Object,Object):*} callback function to execute, it is\n    * invoked with two arguments: key and value. To break the iteration you can\n    * optionally return false.\n    */\n    LinkedDictionary.prototype.forEach = function (callback) {\n        var crawlNode = this.head.next;\n        while (crawlNode.next != null) {\n            var ret = callback(crawlNode.key, crawlNode.value);\n            if (ret === false) {\n                return;\n            }\n            crawlNode = crawlNode.next;\n        }\n    };\n    return LinkedDictionary;\n}(Dictionary_1.default));\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = LinkedDictionary; // End of LinkedDictionary\n// /**\n//  * Returns true if this dictionary is equal to the given dictionary.\n//  * Two dictionaries are equal if they contain the same mappings.\n//  * @param {collections.Dictionary} other the other dictionary.\n//  * @param {function(Object,Object):boolean=} valuesEqualFunction optional\n//  * function used to check if two values are equal.\n//  * @return {boolean} true if this dictionary is equal to the given dictionary.\n//  */\n// collections.Dictionary.prototype.equals = function(other,valuesEqualFunction) {\n// \tconst eqF = valuesEqualFunction || collections.defaultEquals;\n// \tif(!(other instanceof collections.Dictionary)){\n// \t\treturn false;\n// \t}\n// \tif(this.size() !== other.size()){\n// \t\treturn false;\n// \t}\n// \treturn this.equalsAux(this.firstNode,other.firstNode,eqF);\n// }\n//# sourceMappingURL=LinkedDictionary.js.map","\"use strict\";\nvar util = require('./util');\nvar arrays = require('./arrays');\nvar LinkedList = (function () {\n    /**\n    * Creates an empty Linked List.\n    * @class A linked list is a data structure consisting of a group of nodes\n    * which together represent a sequence.\n    * @constructor\n    */\n    function LinkedList() {\n        /**\n        * First node in the list\n        * @type {Object}\n        * @private\n        */\n        this.firstNode = null;\n        /**\n        * Last node in the list\n        * @type {Object}\n        * @private\n        */\n        this.lastNode = null;\n        /**\n        * Number of elements in the list\n        * @type {number}\n        * @private\n        */\n        this.nElements = 0;\n    }\n    /**\n    * Adds an element to this list.\n    * @param {Object} item element to be added.\n    * @param {number=} index optional index to add the element. If no index is specified\n    * the element is added to the end of this list.\n    * @return {boolean} true if the element was added or false if the index is invalid\n    * or if the element is undefined.\n    */\n    LinkedList.prototype.add = function (item, index) {\n        if (util.isUndefined(index)) {\n            index = this.nElements;\n        }\n        if (index < 0 || index > this.nElements || util.isUndefined(item)) {\n            return false;\n        }\n        var newNode = this.createNode(item);\n        if (this.nElements === 0) {\n            // First node in the list.\n            this.firstNode = newNode;\n            this.lastNode = newNode;\n        }\n        else if (index === this.nElements) {\n            // Insert at the end.\n            this.lastNode.next = newNode;\n            this.lastNode = newNode;\n        }\n        else if (index === 0) {\n            // Change first node.\n            newNode.next = this.firstNode;\n            this.firstNode = newNode;\n        }\n        else {\n            var prev = this.nodeAtIndex(index - 1);\n            newNode.next = prev.next;\n            prev.next = newNode;\n        }\n        this.nElements++;\n        return true;\n    };\n    /**\n    * Returns the first element in this list.\n    * @return {*} the first element of the list or undefined if the list is\n    * empty.\n    */\n    LinkedList.prototype.first = function () {\n        if (this.firstNode !== null) {\n            return this.firstNode.element;\n        }\n        return undefined;\n    };\n    /**\n    * Returns the last element in this list.\n    * @return {*} the last element in the list or undefined if the list is\n    * empty.\n    */\n    LinkedList.prototype.last = function () {\n        if (this.lastNode !== null) {\n            return this.lastNode.element;\n        }\n        return undefined;\n    };\n    /**\n     * Returns the element at the specified position in this list.\n     * @param {number} index desired index.\n     * @return {*} the element at the given index or undefined if the index is\n     * out of bounds.\n     */\n    LinkedList.prototype.elementAtIndex = function (index) {\n        var node = this.nodeAtIndex(index);\n        if (node === null) {\n            return undefined;\n        }\n        return node.element;\n    };\n    /**\n     * Returns the index in this list of the first occurrence of the\n     * specified element, or -1 if the List does not contain this element.\n     * <p>If the elements inside this list are\n     * not comparable with the === operator a custom equals function should be\n     * provided to perform searches, the function must receive two arguments and\n     * return true if they are equal, false otherwise. Example:</p>\n     *\n     * <pre>\n     * const petsAreEqualByName = function(pet1, pet2) {\n     *  return pet1.name === pet2.name;\n     * }\n     * </pre>\n     * @param {Object} item element to search for.\n     * @param {function(Object,Object):boolean=} equalsFunction Optional\n     * function used to check if two elements are equal.\n     * @return {number} the index in this list of the first occurrence\n     * of the specified element, or -1 if this list does not contain the\n     * element.\n     */\n    LinkedList.prototype.indexOf = function (item, equalsFunction) {\n        var equalsF = equalsFunction || util.defaultEquals;\n        if (util.isUndefined(item)) {\n            return -1;\n        }\n        var currentNode = this.firstNode;\n        var index = 0;\n        while (currentNode !== null) {\n            if (equalsF(currentNode.element, item)) {\n                return index;\n            }\n            index++;\n            currentNode = currentNode.next;\n        }\n        return -1;\n    };\n    /**\n       * Returns true if this list contains the specified element.\n       * <p>If the elements inside the list are\n       * not comparable with the === operator a custom equals function should be\n       * provided to perform searches, the function must receive two arguments and\n       * return true if they are equal, false otherwise. Example:</p>\n       *\n       * <pre>\n       * const petsAreEqualByName = function(pet1, pet2) {\n       *  return pet1.name === pet2.name;\n       * }\n       * </pre>\n       * @param {Object} item element to search for.\n       * @param {function(Object,Object):boolean=} equalsFunction Optional\n       * function used to check if two elements are equal.\n       * @return {boolean} true if this list contains the specified element, false\n       * otherwise.\n       */\n    LinkedList.prototype.contains = function (item, equalsFunction) {\n        return (this.indexOf(item, equalsFunction) >= 0);\n    };\n    /**\n     * Removes the first occurrence of the specified element in this list.\n     * <p>If the elements inside the list are\n     * not comparable with the === operator a custom equals function should be\n     * provided to perform searches, the function must receive two arguments and\n     * return true if they are equal, false otherwise. Example:</p>\n     *\n     * <pre>\n     * const petsAreEqualByName = function(pet1, pet2) {\n     *  return pet1.name === pet2.name;\n     * }\n     * </pre>\n     * @param {Object} item element to be removed from this list, if present.\n     * @return {boolean} true if the list contained the specified element.\n     */\n    LinkedList.prototype.remove = function (item, equalsFunction) {\n        var equalsF = equalsFunction || util.defaultEquals;\n        if (this.nElements < 1 || util.isUndefined(item)) {\n            return false;\n        }\n        var previous = null;\n        var currentNode = this.firstNode;\n        while (currentNode !== null) {\n            if (equalsF(currentNode.element, item)) {\n                if (currentNode === this.firstNode) {\n                    this.firstNode = this.firstNode.next;\n                    if (currentNode === this.lastNode) {\n                        this.lastNode = null;\n                    }\n                }\n                else if (currentNode === this.lastNode) {\n                    this.lastNode = previous;\n                    previous.next = currentNode.next;\n                    currentNode.next = null;\n                }\n                else {\n                    previous.next = currentNode.next;\n                    currentNode.next = null;\n                }\n                this.nElements--;\n                return true;\n            }\n            previous = currentNode;\n            currentNode = currentNode.next;\n        }\n        return false;\n    };\n    /**\n     * Removes all of the elements from this list.\n     */\n    LinkedList.prototype.clear = function () {\n        this.firstNode = null;\n        this.lastNode = null;\n        this.nElements = 0;\n    };\n    /**\n     * Returns true if this list is equal to the given list.\n     * Two lists are equal if they have the same elements in the same order.\n     * @param {LinkedList} other the other list.\n     * @param {function(Object,Object):boolean=} equalsFunction optional\n     * function used to check if two elements are equal. If the elements in the lists\n     * are custom objects you should provide a function, otherwise\n     * the === operator is used to check equality between elements.\n     * @return {boolean} true if this list is equal to the given list.\n     */\n    LinkedList.prototype.equals = function (other, equalsFunction) {\n        var eqF = equalsFunction || util.defaultEquals;\n        if (!(other instanceof LinkedList)) {\n            return false;\n        }\n        if (this.size() !== other.size()) {\n            return false;\n        }\n        return this.equalsAux(this.firstNode, other.firstNode, eqF);\n    };\n    /**\n    * @private\n    */\n    LinkedList.prototype.equalsAux = function (n1, n2, eqF) {\n        while (n1 !== null) {\n            if (!eqF(n1.element, n2.element)) {\n                return false;\n            }\n            n1 = n1.next;\n            n2 = n2.next;\n        }\n        return true;\n    };\n    /**\n     * Removes the element at the specified position in this list.\n     * @param {number} index given index.\n     * @return {*} removed element or undefined if the index is out of bounds.\n     */\n    LinkedList.prototype.removeElementAtIndex = function (index) {\n        if (index < 0 || index >= this.nElements) {\n            return undefined;\n        }\n        var element;\n        if (this.nElements === 1) {\n            //First node in the list.\n            element = this.firstNode.element;\n            this.firstNode = null;\n            this.lastNode = null;\n        }\n        else {\n            var previous = this.nodeAtIndex(index - 1);\n            if (previous === null) {\n                element = this.firstNode.element;\n                this.firstNode = this.firstNode.next;\n            }\n            else if (previous.next === this.lastNode) {\n                element = this.lastNode.element;\n                this.lastNode = previous;\n            }\n            if (previous !== null) {\n                element = previous.next.element;\n                previous.next = previous.next.next;\n            }\n        }\n        this.nElements--;\n        return element;\n    };\n    /**\n     * Executes the provided function once for each element present in this list in order.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element value, to break the iteration you can\n     * optionally return false.\n     */\n    LinkedList.prototype.forEach = function (callback) {\n        var currentNode = this.firstNode;\n        while (currentNode !== null) {\n            if (callback(currentNode.element) === false) {\n                break;\n            }\n            currentNode = currentNode.next;\n        }\n    };\n    /**\n     * Reverses the order of the elements in this linked list (makes the last\n     * element first, and the first element last).\n     */\n    LinkedList.prototype.reverse = function () {\n        var previous = null;\n        var current = this.firstNode;\n        var temp = null;\n        while (current !== null) {\n            temp = current.next;\n            current.next = previous;\n            previous = current;\n            current = temp;\n        }\n        temp = this.firstNode;\n        this.firstNode = this.lastNode;\n        this.lastNode = temp;\n    };\n    /**\n     * Returns an array containing all of the elements in this list in proper\n     * sequence.\n     * @return {Array.<*>} an array containing all of the elements in this list,\n     * in proper sequence.\n     */\n    LinkedList.prototype.toArray = function () {\n        var array = [];\n        var currentNode = this.firstNode;\n        while (currentNode !== null) {\n            array.push(currentNode.element);\n            currentNode = currentNode.next;\n        }\n        return array;\n    };\n    /**\n     * Returns the number of elements in this list.\n     * @return {number} the number of elements in this list.\n     */\n    LinkedList.prototype.size = function () {\n        return this.nElements;\n    };\n    /**\n     * Returns true if this list contains no elements.\n     * @return {boolean} true if this list contains no elements.\n     */\n    LinkedList.prototype.isEmpty = function () {\n        return this.nElements <= 0;\n    };\n    LinkedList.prototype.toString = function () {\n        return arrays.toString(this.toArray());\n    };\n    /**\n     * @private\n     */\n    LinkedList.prototype.nodeAtIndex = function (index) {\n        if (index < 0 || index >= this.nElements) {\n            return null;\n        }\n        if (index === (this.nElements - 1)) {\n            return this.lastNode;\n        }\n        var node = this.firstNode;\n        for (var i = 0; i < index; i++) {\n            node = node.next;\n        }\n        return node;\n    };\n    /**\n     * @private\n     */\n    LinkedList.prototype.createNode = function (item) {\n        return {\n            element: item,\n            next: null\n        };\n    };\n    return LinkedList;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = LinkedList; // End of linked list\n//# sourceMappingURL=LinkedList.js.map","\"use strict\";\nvar util = require('./util');\nvar Dictionary_1 = require('./Dictionary');\nvar arrays = require('./arrays');\nvar MultiDictionary = (function () {\n    /**\n     * Creates an empty multi dictionary.\n     * @class <p>A multi dictionary is a special kind of dictionary that holds\n     * multiple values against each key. Setting a value into the dictionary will\n     * add the value to an array at that key. Getting a key will return an array,\n     * holding all the values set to that key.\n     * You can configure to allow duplicates in the values.\n     * This implementation accepts any kind of objects as keys.</p>\n     *\n     * <p>If the keys are custom objects a function which converts keys to strings must be\n     * provided. Example:</p>\n     *\n     * <pre>\n     * function petToString(pet) {\n       *  return pet.name;\n       * }\n     * </pre>\n     * <p>If the values are custom objects a function to check equality between values\n     * must be provided. Example:</p>\n     *\n     * <pre>\n     * function petsAreEqualByAge(pet1,pet2) {\n       *  return pet1.age===pet2.age;\n       * }\n     * </pre>\n     * @constructor\n     * @param {function(Object):string=} toStrFunction optional function\n     * to convert keys to strings. If the keys aren't strings or if toString()\n     * is not appropriate, a custom function which receives a key and returns a\n     * unique string must be provided.\n     * @param {function(Object,Object):boolean=} valuesEqualsFunction optional\n     * function to check if two values are equal.\n     *\n     * @param allowDuplicateValues\n     */\n    function MultiDictionary(toStrFunction, valuesEqualsFunction, allowDuplicateValues) {\n        if (allowDuplicateValues === void 0) { allowDuplicateValues = false; }\n        this.dict = new Dictionary_1.default(toStrFunction);\n        this.equalsF = valuesEqualsFunction || util.defaultEquals;\n        this.allowDuplicate = allowDuplicateValues;\n    }\n    /**\n    * Returns an array holding the values to which this dictionary maps\n    * the specified key.\n    * Returns an empty array if this dictionary contains no mappings for this key.\n    * @param {Object} key key whose associated values are to be returned.\n    * @return {Array} an array holding the values to which this dictionary maps\n    * the specified key.\n    */\n    MultiDictionary.prototype.getValue = function (key) {\n        var values = this.dict.getValue(key);\n        if (util.isUndefined(values)) {\n            return [];\n        }\n        return arrays.copy(values);\n    };\n    /**\n     * Adds the value to the array associated with the specified key, if\n     * it is not already present.\n     * @param {Object} key key with which the specified value is to be\n     * associated.\n     * @param {Object} value the value to add to the array at the key\n     * @return {boolean} true if the value was not already associated with that key.\n     */\n    MultiDictionary.prototype.setValue = function (key, value) {\n        if (util.isUndefined(key) || util.isUndefined(value)) {\n            return false;\n        }\n        if (!this.containsKey(key)) {\n            this.dict.setValue(key, [value]);\n            return true;\n        }\n        var array = this.dict.getValue(key);\n        if (!this.allowDuplicate) {\n            if (arrays.contains(array, value, this.equalsF)) {\n                return false;\n            }\n        }\n        array.push(value);\n        return true;\n    };\n    /**\n     * Removes the specified values from the array of values associated with the\n     * specified key. If a value isn't given, all values associated with the specified\n     * key are removed.\n     * @param {Object} key key whose mapping is to be removed from the\n     * dictionary.\n     * @param {Object=} value optional argument to specify the value to remove\n     * from the array associated with the specified key.\n     * @return {*} true if the dictionary changed, false if the key doesn't exist or\n     * if the specified value isn't associated with the specified key.\n     */\n    MultiDictionary.prototype.remove = function (key, value) {\n        if (util.isUndefined(value)) {\n            var v = this.dict.remove(key);\n            return !util.isUndefined(v);\n        }\n        var array = this.dict.getValue(key);\n        if (arrays.remove(array, value, this.equalsF)) {\n            if (array.length === 0) {\n                this.dict.remove(key);\n            }\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Returns an array containing all of the keys in this dictionary.\n     * @return {Array} an array containing all of the keys in this dictionary.\n     */\n    MultiDictionary.prototype.keys = function () {\n        return this.dict.keys();\n    };\n    /**\n     * Returns an array containing all of the values in this dictionary.\n     * @return {Array} an array containing all of the values in this dictionary.\n     */\n    MultiDictionary.prototype.values = function () {\n        var values = this.dict.values();\n        var array = [];\n        for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {\n            var v = values_1[_i];\n            for (var _a = 0, v_1 = v; _a < v_1.length; _a++) {\n                var w = v_1[_a];\n                array.push(w);\n            }\n        }\n        return array;\n    };\n    /**\n     * Returns true if this dictionary at least one value associatted the specified key.\n     * @param {Object} key key whose presence in this dictionary is to be\n     * tested.\n     * @return {boolean} true if this dictionary at least one value associatted\n     * the specified key.\n     */\n    MultiDictionary.prototype.containsKey = function (key) {\n        return this.dict.containsKey(key);\n    };\n    /**\n     * Removes all mappings from this dictionary.\n     */\n    MultiDictionary.prototype.clear = function () {\n        this.dict.clear();\n    };\n    /**\n     * Returns the number of keys in this dictionary.\n     * @return {number} the number of key-value mappings in this dictionary.\n     */\n    MultiDictionary.prototype.size = function () {\n        return this.dict.size();\n    };\n    /**\n     * Returns true if this dictionary contains no mappings.\n     * @return {boolean} true if this dictionary contains no mappings.\n     */\n    MultiDictionary.prototype.isEmpty = function () {\n        return this.dict.isEmpty();\n    };\n    return MultiDictionary;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = MultiDictionary; // end of multi dictionary\n//# sourceMappingURL=MultiDictionary.js.map","\"use strict\";\nvar Direction;\n(function (Direction) {\n    Direction[Direction[\"BEFORE\"] = 0] = \"BEFORE\";\n    Direction[Direction[\"AFTER\"] = 1] = \"AFTER\";\n    Direction[Direction[\"INSIDE_AT_END\"] = 2] = \"INSIDE_AT_END\";\n    Direction[Direction[\"INSIDE_AT_START\"] = 3] = \"INSIDE_AT_START\";\n})(Direction || (Direction = {}));\nvar MultiRootTree = (function () {\n    function MultiRootTree(rootIds, nodes) {\n        if (rootIds === void 0) { rootIds = []; }\n        if (nodes === void 0) { nodes = {}; }\n        this.rootIds = rootIds;\n        this.nodes = nodes;\n        this.initRootIds();\n        this.initNodes();\n    }\n    MultiRootTree.prototype.initRootIds = function () {\n        for (var _i = 0, _a = this.rootIds; _i < _a.length; _i++) {\n            var rootId = _a[_i];\n            this.createEmptyNodeIfNotExist(rootId);\n        }\n    };\n    MultiRootTree.prototype.initNodes = function () {\n        for (var nodeKey in this.nodes) {\n            if (this.nodes.hasOwnProperty(nodeKey)) {\n                for (var _i = 0, _a = this.nodes[nodeKey]; _i < _a.length; _i++) {\n                    var nodeListItem = _a[_i];\n                    this.createEmptyNodeIfNotExist(nodeListItem);\n                }\n            }\n        }\n    };\n    MultiRootTree.prototype.createEmptyNodeIfNotExist = function (nodeKey) {\n        if (!this.nodes[nodeKey]) {\n            this.nodes[nodeKey] = [];\n        }\n    };\n    MultiRootTree.prototype.getRootIds = function () {\n        var clone = this.rootIds.slice();\n        return clone;\n    };\n    MultiRootTree.prototype.getNodes = function () {\n        var clone = {};\n        for (var nodeKey in this.nodes) {\n            if (this.nodes.hasOwnProperty(nodeKey)) {\n                clone[nodeKey] = this.nodes[nodeKey].slice();\n            }\n        }\n        return clone;\n    };\n    MultiRootTree.prototype.getObject = function () {\n        return {\n            rootIds: this.getRootIds(),\n            nodes: this.getNodes(),\n        };\n    };\n    MultiRootTree.prototype.toObject = function () {\n        return this.getObject();\n    };\n    MultiRootTree.prototype.flatten = function () {\n        var _this = this;\n        var extraPropsObject = [];\n        for (var i = 0; i < this.rootIds.length; i++) {\n            var rootId = this.rootIds[i];\n            extraPropsObject.push({\n                id: rootId,\n                level: 0,\n                hasParent: false,\n                childrenCount: undefined,\n            });\n            traverse(rootId, this.nodes, extraPropsObject, 0);\n        }\n        for (var _i = 0, extraPropsObject_1 = extraPropsObject; _i < extraPropsObject_1.length; _i++) {\n            var o = extraPropsObject_1[_i];\n            o.childrenCount = countChildren(o.id);\n        }\n        return extraPropsObject;\n        function countChildren(id) {\n            if (!_this.nodes[id]) {\n                return 0;\n            }\n            else {\n                var childrenCount = _this.nodes[id].length;\n                return childrenCount;\n            }\n        }\n        function traverse(startId, nodes, returnArray, level) {\n            if (level === void 0) { level = 0; }\n            if (!startId || !nodes || !returnArray || !nodes[startId]) {\n                return;\n            }\n            level++;\n            var idsList = nodes[startId];\n            for (var i = 0; i < idsList.length; i++) {\n                var id = idsList[i];\n                returnArray.push({ id: id, level: level, hasParent: true });\n                traverse(id, nodes, returnArray, level);\n            }\n            level--;\n        }\n    };\n    MultiRootTree.prototype.moveIdBeforeId = function (moveId, beforeId) {\n        return this.moveId(moveId, beforeId, Direction.BEFORE);\n    };\n    MultiRootTree.prototype.moveIdAfterId = function (moveId, afterId) {\n        return this.moveId(moveId, afterId, Direction.AFTER);\n    };\n    MultiRootTree.prototype.moveIdIntoId = function (moveId, insideId, atStart) {\n        if (atStart === void 0) { atStart = true; }\n        if (atStart) {\n            return this.moveId(moveId, insideId, Direction.INSIDE_AT_START);\n        }\n        else {\n            return this.moveId(moveId, insideId, Direction.INSIDE_AT_END);\n        }\n    };\n    MultiRootTree.prototype.swapRootIdWithRootId = function (rootId, withRootId) {\n        var leftIndex = this.findRootId(rootId);\n        var rightIndex = this.findRootId(withRootId);\n        this.swapRootPositionWithRootPosition(leftIndex, rightIndex);\n    };\n    MultiRootTree.prototype.swapRootPositionWithRootPosition = function (swapRootPosition, withRootPosition) {\n        var temp = this.rootIds[withRootPosition];\n        this.rootIds[withRootPosition] = this.rootIds[swapRootPosition];\n        this.rootIds[swapRootPosition] = temp;\n    };\n    MultiRootTree.prototype.deleteId = function (id) {\n        this.rootDeleteId(id);\n        this.nodeAndSubNodesDelete(id);\n        this.nodeRefrencesDelete(id);\n    };\n    MultiRootTree.prototype.insertIdBeforeId = function (beforeId, insertId) {\n        var foundRootIdIndex = this.findRootId(beforeId);\n        if (foundRootIdIndex > -1) {\n            this.insertIdIntoRoot(insertId, foundRootIdIndex);\n        }\n        for (var nodeKey in this.nodes) {\n            if (this.nodes.hasOwnProperty(nodeKey)) {\n                var foundNodeIdIndex = this.findNodeId(nodeKey, beforeId);\n                if (foundNodeIdIndex > -1) {\n                    this.insertIdIntoNode(nodeKey, insertId, foundNodeIdIndex);\n                }\n            }\n        }\n    };\n    MultiRootTree.prototype.insertIdAfterId = function (belowId, insertId) {\n        var foundRootIdIndex = this.findRootId(belowId);\n        if (foundRootIdIndex > -1) {\n            this.insertIdIntoRoot(insertId, foundRootIdIndex + 1);\n        }\n        for (var nodeKey in this.nodes) {\n            if (this.nodes.hasOwnProperty(nodeKey)) {\n                var foundNodeIdIndex = this.findNodeId(nodeKey, belowId);\n                if (foundNodeIdIndex > -1) {\n                    this.insertIdIntoNode(nodeKey, insertId, foundNodeIdIndex + 1);\n                }\n            }\n        }\n    };\n    MultiRootTree.prototype.insertIdIntoId = function (insideId, insertId) {\n        this.nodeInsertAtEnd(insideId, insertId);\n        this.nodes[insertId] = [];\n    };\n    MultiRootTree.prototype.insertIdIntoRoot = function (id, position) {\n        if (position === undefined) {\n            this.rootInsertAtEnd(id);\n        }\n        else {\n            if (position < 0) {\n                var length_1 = this.rootIds.length;\n                this.rootIds.splice((position + length_1 + 1), 0, id);\n            }\n            else {\n                this.rootIds.splice(position, 0, id);\n            }\n        }\n        this.nodes[id] = this.nodes[id] || [];\n    };\n    MultiRootTree.prototype.insertIdIntoNode = function (nodeKey, id, position) {\n        this.nodes[nodeKey] = this.nodes[nodeKey] || [];\n        this.nodes[id] = this.nodes[id] || [];\n        if (position === undefined) {\n            this.nodeInsertAtEnd(nodeKey, id);\n        }\n        else {\n            if (position < 0) {\n                var length_2 = this.nodes[nodeKey].length;\n                this.nodes[nodeKey].splice((position + length_2 + 1), 0, id);\n            }\n            else {\n                this.nodes[nodeKey].splice(position, 0, id);\n            }\n        }\n    };\n    MultiRootTree.prototype.moveId = function (moveId, beforeId, direction) {\n        var sourceId = moveId;\n        var sourceRootIndex = this.findRootId(sourceId);\n        var sourceNodeKey;\n        var sourceNodeIdIndex;\n        if (this.nodes[beforeId]) {\n            sourceNodeKey = beforeId;\n        }\n        for (var nodeKey in this.nodes) {\n            if (this.nodes.hasOwnProperty(nodeKey)) {\n                sourceNodeIdIndex = this.findNodeId(nodeKey, beforeId);\n                break;\n            }\n        }\n        // got all\n        var targetId = beforeId;\n        var targetRootIndex = this.findRootId(targetId);\n        var targetNodeKey;\n        var targetNodeIdIndex;\n        if (this.nodes[beforeId]) {\n            targetNodeKey = beforeId;\n        }\n        for (var nodeKey in this.nodes) {\n            if (this.nodes.hasOwnProperty(nodeKey)) {\n                targetNodeIdIndex = this.findNodeId(nodeKey, beforeId);\n                break;\n            }\n        }\n        // got all\n        if (sourceRootIndex > -1) {\n            if (targetRootIndex > -1) {\n                // moving root to root\n                // console.log(`Moving ROOT to ROOT`);\n                // console.log(`RootIds:`);\n                // console.log(this.rootIds);\n                // console.log(`TargetIndex=${targetRootIndex}, SourceIndex=${sourceRootIndex}`);\n                // console.log(`TargetId=${targetId}, SourceId=${sourceId}`);\n                this.rootDelete(sourceRootIndex); // indexes change now\n                if (targetRootIndex > sourceRootIndex) {\n                    targetRootIndex--;\n                }\n                else {\n                }\n                switch (direction) {\n                    case Direction.BEFORE:\n                        this.insertIdIntoRoot(sourceId, targetRootIndex);\n                        break;\n                    case Direction.AFTER:\n                        this.insertIdIntoRoot(sourceId, targetRootIndex + 1);\n                        break;\n                    case Direction.INSIDE_AT_START:\n                        this.nodeInsertAtStart(targetId, sourceId);\n                        break;\n                    case Direction.INSIDE_AT_END:\n                        this.nodeInsertAtEnd(targetId, sourceId);\n                        break;\n                }\n            }\n            else {\n                // moving root (source) ABOVE node (target)\n                // will remove one entry from roots\n                this.rootDelete(sourceRootIndex);\n                for (var nodeKey in this.nodes) {\n                    if (this.nodes.hasOwnProperty(nodeKey)) {\n                        var index = this.findNodeId(nodeKey, targetId);\n                        if (index > -1) {\n                            switch (direction) {\n                                case Direction.BEFORE:\n                                    this.insertIdIntoNode(nodeKey, sourceId, index);\n                                    break;\n                                case Direction.AFTER:\n                                    this.insertIdIntoNode(nodeKey, sourceId, index + 1);\n                                    break;\n                                case Direction.INSIDE_AT_START:\n                                    this.nodeInsertAtStart(targetId, sourceId);\n                                    break;\n                                case Direction.INSIDE_AT_END:\n                                    this.nodeInsertAtEnd(targetId, sourceId);\n                                    break;\n                            }\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            if (targetRootIndex > -1) {\n                // moving node (source) ABOVE root (target)\n                // delete source id from each node\n                for (var nodeKey in this.nodes) {\n                    if (this.nodes.hasOwnProperty(nodeKey)) {\n                        var index = this.findNodeId(nodeKey, sourceId);\n                        if (index > -1) {\n                            // this.nodeInsertId(nodeKey, sourceId, index);\n                            this.nodeDeleteAtIndex(nodeKey, index);\n                            break;\n                        }\n                    }\n                }\n                switch (direction) {\n                    case Direction.BEFORE:\n                        this.insertIdIntoRoot(sourceId, targetRootIndex);\n                        break;\n                    case Direction.AFTER:\n                        this.insertIdIntoRoot(sourceId, targetRootIndex + 1);\n                        break;\n                    case Direction.INSIDE_AT_START:\n                        this.nodeInsertAtStart(targetId, sourceId);\n                        break;\n                    case Direction.INSIDE_AT_END:\n                        this.nodeInsertAtEnd(targetId, sourceId);\n                        break;\n                }\n            }\n            else {\n                // moving node (source) ABOVE node (target)\n                // delete source id from each node\n                for (var nodeKey in this.nodes) {\n                    if (this.nodes.hasOwnProperty(nodeKey)) {\n                        var index = this.findNodeId(nodeKey, sourceId);\n                        if (index > -1) {\n                            this.nodeDeleteAtIndex(nodeKey, index);\n                            break;\n                        }\n                    }\n                }\n                for (var nodeKey in this.nodes) {\n                    if (this.nodes.hasOwnProperty(nodeKey)) {\n                        var index = this.findNodeId(nodeKey, targetId);\n                        if (index > -1) {\n                            switch (direction) {\n                                case Direction.BEFORE:\n                                    this.insertIdIntoNode(nodeKey, sourceId, index);\n                                    break;\n                                case Direction.AFTER:\n                                    this.insertIdIntoNode(nodeKey, sourceId, index + 1);\n                                    break;\n                                case Direction.INSIDE_AT_START:\n                                    this.nodeInsertAtStart(targetId, sourceId);\n                                    break;\n                                case Direction.INSIDE_AT_END:\n                                    this.nodeInsertAtEnd(targetId, sourceId);\n                                    break;\n                            }\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    };\n    MultiRootTree.prototype.swapArrayElements = function (arr, indexA, indexB) {\n        var temp = arr[indexA];\n        arr[indexA] = arr[indexB];\n        arr[indexB] = temp;\n        return arr;\n    };\n    ;\n    MultiRootTree.prototype.rootDeleteId = function (id) {\n        var index = this.findRootId(id);\n        if (index > -1) {\n            this.rootDelete(index);\n        }\n    };\n    MultiRootTree.prototype.nodeAndSubNodesDelete = function (nodeKey) {\n        var toDeleteLater = [];\n        for (var i = 0; i < this.nodes[nodeKey].length; i++) {\n            var id = this.nodes[nodeKey][i];\n            this.nodeAndSubNodesDelete(id);\n            toDeleteLater.push(nodeKey);\n        }\n        this.nodeDelete(nodeKey);\n        for (var i = 0; i < toDeleteLater.length; i++) {\n            this.nodeDelete(toDeleteLater[i]);\n        }\n    };\n    MultiRootTree.prototype.nodeRefrencesDelete = function (id) {\n        for (var nodeKey in this.nodes) {\n            if (this.nodes.hasOwnProperty(nodeKey)) {\n                for (var i = 0; i < this.nodes[nodeKey].length; i++) {\n                    var targetId = this.nodes[nodeKey][i];\n                    if (targetId === id) {\n                        this.nodeDeleteAtIndex(nodeKey, i);\n                    }\n                }\n            }\n        }\n    };\n    MultiRootTree.prototype.nodeDelete = function (nodeKey) {\n        delete this.nodes[nodeKey];\n    };\n    MultiRootTree.prototype.findRootId = function (id) {\n        return this.rootIds.indexOf(id);\n    };\n    MultiRootTree.prototype.findNodeId = function (nodeKey, id) {\n        return this.nodes[nodeKey].indexOf(id);\n    };\n    MultiRootTree.prototype.findNode = function (nodeKey) {\n        return this.nodes[nodeKey];\n    };\n    MultiRootTree.prototype.nodeInsertAtStart = function (nodeKey, id) {\n        this.nodes[nodeKey].unshift(id);\n    };\n    MultiRootTree.prototype.nodeInsertAtEnd = function (nodeKey, id) {\n        this.nodes[nodeKey].push(id);\n    };\n    MultiRootTree.prototype.rootDelete = function (index) {\n        this.rootIds.splice(index, 1);\n    };\n    MultiRootTree.prototype.nodeDeleteAtIndex = function (nodeKey, index) {\n        this.nodes[nodeKey].splice(index, 1);\n    };\n    MultiRootTree.prototype.rootInsertAtStart = function (id) {\n        this.rootIds.unshift(id);\n    };\n    MultiRootTree.prototype.rootInsertAtEnd = function (id) {\n        this.rootIds.push(id);\n    };\n    return MultiRootTree;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = MultiRootTree;\n//# sourceMappingURL=MultiRootTree.js.map","\"use strict\";\nvar util = require('./util');\nvar Heap_1 = require('./Heap');\nvar PriorityQueue = (function () {\n    /**\n     * Creates an empty priority queue.\n     * @class <p>In a priority queue each element is associated with a \"priority\",\n     * elements are dequeued in highest-priority-first order (the elements with the\n     * highest priority are dequeued first). Priority Queues are implemented as heaps.\n     * If the inserted elements are custom objects a compare function must be provided,\n     * otherwise the <=, === and >= operators are used to compare object priority.</p>\n     * <pre>\n     * function compare(a, b) {\n     *  if (a is less than b by some ordering criterion) {\n     *     return -1;\n     *  } if (a is greater than b by the ordering criterion) {\n     *     return 1;\n     *  }\n     *  // a must be equal to b\n     *  return 0;\n     * }\n     * </pre>\n     * @constructor\n     * @param {function(Object,Object):number=} compareFunction optional\n     * function used to compare two element priorities. Must return a negative integer,\n     * zero, or a positive integer as the first argument is less than, equal to,\n     * or greater than the second.\n     */\n    function PriorityQueue(compareFunction) {\n        this.heap = new Heap_1.default(util.reverseCompareFunction(compareFunction));\n    }\n    /**\n     * Inserts the specified element into this priority queue.\n     * @param {Object} element the element to insert.\n     * @return {boolean} true if the element was inserted, or false if it is undefined.\n     */\n    PriorityQueue.prototype.enqueue = function (element) {\n        return this.heap.add(element);\n    };\n    /**\n     * Inserts the specified element into this priority queue.\n     * @param {Object} element the element to insert.\n     * @return {boolean} true if the element was inserted, or false if it is undefined.\n     */\n    PriorityQueue.prototype.add = function (element) {\n        return this.heap.add(element);\n    };\n    /**\n     * Retrieves and removes the highest priority element of this queue.\n     * @return {*} the the highest priority element of this queue,\n     *  or undefined if this queue is empty.\n     */\n    PriorityQueue.prototype.dequeue = function () {\n        if (this.heap.size() !== 0) {\n            var el = this.heap.peek();\n            this.heap.removeRoot();\n            return el;\n        }\n        return undefined;\n    };\n    /**\n     * Retrieves, but does not remove, the highest priority element of this queue.\n     * @return {*} the highest priority element of this queue, or undefined if this queue is empty.\n     */\n    PriorityQueue.prototype.peek = function () {\n        return this.heap.peek();\n    };\n    /**\n     * Returns true if this priority queue contains the specified element.\n     * @param {Object} element element to search for.\n     * @return {boolean} true if this priority queue contains the specified element,\n     * false otherwise.\n     */\n    PriorityQueue.prototype.contains = function (element) {\n        return this.heap.contains(element);\n    };\n    /**\n     * Checks if this priority queue is empty.\n     * @return {boolean} true if and only if this priority queue contains no items; false\n     * otherwise.\n     */\n    PriorityQueue.prototype.isEmpty = function () {\n        return this.heap.isEmpty();\n    };\n    /**\n     * Returns the number of elements in this priority queue.\n     * @return {number} the number of elements in this priority queue.\n     */\n    PriorityQueue.prototype.size = function () {\n        return this.heap.size();\n    };\n    /**\n     * Removes all of the elements from this priority queue.\n     */\n    PriorityQueue.prototype.clear = function () {\n        this.heap.clear();\n    };\n    /**\n     * Executes the provided function once for each element present in this queue in\n     * no particular order.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element value, to break the iteration you can\n     * optionally return false.\n     */\n    PriorityQueue.prototype.forEach = function (callback) {\n        this.heap.forEach(callback);\n    };\n    return PriorityQueue;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = PriorityQueue; // end of priority queue\n//# sourceMappingURL=PriorityQueue.js.map","\"use strict\";\nvar LinkedList_1 = require('./LinkedList');\nvar Queue = (function () {\n    /**\n     * Creates an empty queue.\n     * @class A queue is a First-In-First-Out (FIFO) data structure, the first\n     * element added to the queue will be the first one to be removed. This\n     * implementation uses a linked list as a container.\n     * @constructor\n     */\n    function Queue() {\n        this.list = new LinkedList_1.default();\n    }\n    /**\n     * Inserts the specified element into the end of this queue.\n     * @param {Object} elem the element to insert.\n     * @return {boolean} true if the element was inserted, or false if it is undefined.\n     */\n    Queue.prototype.enqueue = function (elem) {\n        return this.list.add(elem);\n    };\n    /**\n     * Inserts the specified element into the end of this queue.\n     * @param {Object} elem the element to insert.\n     * @return {boolean} true if the element was inserted, or false if it is undefined.\n     */\n    Queue.prototype.add = function (elem) {\n        return this.list.add(elem);\n    };\n    /**\n     * Retrieves and removes the head of this queue.\n     * @return {*} the head of this queue, or undefined if this queue is empty.\n     */\n    Queue.prototype.dequeue = function () {\n        if (this.list.size() !== 0) {\n            var el = this.list.first();\n            this.list.removeElementAtIndex(0);\n            return el;\n        }\n        return undefined;\n    };\n    /**\n     * Retrieves, but does not remove, the head of this queue.\n     * @return {*} the head of this queue, or undefined if this queue is empty.\n     */\n    Queue.prototype.peek = function () {\n        if (this.list.size() !== 0) {\n            return this.list.first();\n        }\n        return undefined;\n    };\n    /**\n     * Returns the number of elements in this queue.\n     * @return {number} the number of elements in this queue.\n     */\n    Queue.prototype.size = function () {\n        return this.list.size();\n    };\n    /**\n     * Returns true if this queue contains the specified element.\n     * <p>If the elements inside this stack are\n     * not comparable with the === operator, a custom equals function should be\n     * provided to perform searches, the function must receive two arguments and\n     * return true if they are equal, false otherwise. Example:</p>\n     *\n     * <pre>\n     * const petsAreEqualByName (pet1, pet2) {\n     *  return pet1.name === pet2.name;\n     * }\n     * </pre>\n     * @param {Object} elem element to search for.\n     * @param {function(Object,Object):boolean=} equalsFunction optional\n     * function to check if two elements are equal.\n     * @return {boolean} true if this queue contains the specified element,\n     * false otherwise.\n     */\n    Queue.prototype.contains = function (elem, equalsFunction) {\n        return this.list.contains(elem, equalsFunction);\n    };\n    /**\n     * Checks if this queue is empty.\n     * @return {boolean} true if and only if this queue contains no items; false\n     * otherwise.\n     */\n    Queue.prototype.isEmpty = function () {\n        return this.list.size() <= 0;\n    };\n    /**\n     * Removes all of the elements from this queue.\n     */\n    Queue.prototype.clear = function () {\n        this.list.clear();\n    };\n    /**\n     * Executes the provided function once for each element present in this queue in\n     * FIFO order.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element value, to break the iteration you can\n     * optionally return false.\n     */\n    Queue.prototype.forEach = function (callback) {\n        this.list.forEach(callback);\n    };\n    return Queue;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Queue; // End of queue\n//# sourceMappingURL=Queue.js.map","\"use strict\";\nvar util = require('./util');\nvar arrays = require('./arrays');\nvar Dictionary_1 = require('./Dictionary');\nvar Set = (function () {\n    /**\n     * Creates an empty set.\n     * @class <p>A set is a data structure that contains no duplicate items.</p>\n     * <p>If the inserted elements are custom objects a function\n     * which converts elements to strings must be provided. Example:</p>\n     *\n     * <pre>\n     * function petToString(pet) {\n     *  return pet.name;\n     * }\n     * </pre>\n     *\n     * @constructor\n     * @param {function(Object):string=} toStringFunction optional function used\n     * to convert elements to strings. If the elements aren't strings or if toString()\n     * is not appropriate, a custom function which receives a onject and returns a\n     * unique string must be provided.\n     */\n    function Set(toStringFunction) {\n        this.dictionary = new Dictionary_1.default(toStringFunction);\n    }\n    /**\n     * Returns true if this set contains the specified element.\n     * @param {Object} element element to search for.\n     * @return {boolean} true if this set contains the specified element,\n     * false otherwise.\n     */\n    Set.prototype.contains = function (element) {\n        return this.dictionary.containsKey(element);\n    };\n    /**\n     * Adds the specified element to this set if it is not already present.\n     * @param {Object} element the element to insert.\n     * @return {boolean} true if this set did not already contain the specified element.\n     */\n    Set.prototype.add = function (element) {\n        if (this.contains(element) || util.isUndefined(element)) {\n            return false;\n        }\n        else {\n            this.dictionary.setValue(element, element);\n            return true;\n        }\n    };\n    /**\n     * Performs an intersecion between this an another set.\n     * Removes all values that are not present this set and the given set.\n     * @param {collections.Set} otherSet other set.\n     */\n    Set.prototype.intersection = function (otherSet) {\n        var set = this;\n        this.forEach(function (element) {\n            if (!otherSet.contains(element)) {\n                set.remove(element);\n            }\n            return true;\n        });\n    };\n    /**\n     * Performs a union between this an another set.\n     * Adds all values from the given set to this set.\n     * @param {collections.Set} otherSet other set.\n     */\n    Set.prototype.union = function (otherSet) {\n        var set = this;\n        otherSet.forEach(function (element) {\n            set.add(element);\n            return true;\n        });\n    };\n    /**\n     * Performs a difference between this an another set.\n     * Removes from this set all the values that are present in the given set.\n     * @param {collections.Set} otherSet other set.\n     */\n    Set.prototype.difference = function (otherSet) {\n        var set = this;\n        otherSet.forEach(function (element) {\n            set.remove(element);\n            return true;\n        });\n    };\n    /**\n     * Checks whether the given set contains all the elements in this set.\n     * @param {collections.Set} otherSet other set.\n     * @return {boolean} true if this set is a subset of the given set.\n     */\n    Set.prototype.isSubsetOf = function (otherSet) {\n        if (this.size() > otherSet.size()) {\n            return false;\n        }\n        var isSub = true;\n        this.forEach(function (element) {\n            if (!otherSet.contains(element)) {\n                isSub = false;\n                return false;\n            }\n            return true;\n        });\n        return isSub;\n    };\n    /**\n     * Removes the specified element from this set if it is present.\n     * @return {boolean} true if this set contained the specified element.\n     */\n    Set.prototype.remove = function (element) {\n        if (!this.contains(element)) {\n            return false;\n        }\n        else {\n            this.dictionary.remove(element);\n            return true;\n        }\n    };\n    /**\n     * Executes the provided function once for each element\n     * present in this set.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one arguments: the element. To break the iteration you can\n     * optionally return false.\n     */\n    Set.prototype.forEach = function (callback) {\n        this.dictionary.forEach(function (k, v) {\n            return callback(v);\n        });\n    };\n    /**\n     * Returns an array containing all of the elements in this set in arbitrary order.\n     * @return {Array} an array containing all of the elements in this set.\n     */\n    Set.prototype.toArray = function () {\n        return this.dictionary.values();\n    };\n    /**\n     * Returns true if this set contains no elements.\n     * @return {boolean} true if this set contains no elements.\n     */\n    Set.prototype.isEmpty = function () {\n        return this.dictionary.isEmpty();\n    };\n    /**\n     * Returns the number of elements in this set.\n     * @return {number} the number of elements in this set.\n     */\n    Set.prototype.size = function () {\n        return this.dictionary.size();\n    };\n    /**\n     * Removes all of the elements from this set.\n     */\n    Set.prototype.clear = function () {\n        this.dictionary.clear();\n    };\n    /*\n    * Provides a string representation for display\n    */\n    Set.prototype.toString = function () {\n        return arrays.toString(this.toArray());\n    };\n    return Set;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Set; // end of Set\n//# sourceMappingURL=Set.js.map","\"use strict\";\nvar LinkedList_1 = require('./LinkedList');\nvar Stack = (function () {\n    /**\n     * Creates an empty Stack.\n     * @class A Stack is a Last-In-First-Out (LIFO) data structure, the last\n     * element added to the stack will be the first one to be removed. This\n     * implementation uses a linked list as a container.\n     * @constructor\n     */\n    function Stack() {\n        this.list = new LinkedList_1.default();\n    }\n    /**\n     * Pushes an item onto the top of this stack.\n     * @param {Object} elem the element to be pushed onto this stack.\n     * @return {boolean} true if the element was pushed or false if it is undefined.\n     */\n    Stack.prototype.push = function (elem) {\n        return this.list.add(elem, 0);\n    };\n    /**\n     * Pushes an item onto the top of this stack.\n     * @param {Object} elem the element to be pushed onto this stack.\n     * @return {boolean} true if the element was pushed or false if it is undefined.\n     */\n    Stack.prototype.add = function (elem) {\n        return this.list.add(elem, 0);\n    };\n    /**\n     * Removes the object at the top of this stack and returns that object.\n     * @return {*} the object at the top of this stack or undefined if the\n     * stack is empty.\n     */\n    Stack.prototype.pop = function () {\n        return this.list.removeElementAtIndex(0);\n    };\n    /**\n     * Looks at the object at the top of this stack without removing it from the\n     * stack.\n     * @return {*} the object at the top of this stack or undefined if the\n     * stack is empty.\n     */\n    Stack.prototype.peek = function () {\n        return this.list.first();\n    };\n    /**\n     * Returns the number of elements in this stack.\n     * @return {number} the number of elements in this stack.\n     */\n    Stack.prototype.size = function () {\n        return this.list.size();\n    };\n    /**\n     * Returns true if this stack contains the specified element.\n     * <p>If the elements inside this stack are\n     * not comparable with the === operator, a custom equals function should be\n     * provided to perform searches, the function must receive two arguments and\n     * return true if they are equal, false otherwise. Example:</p>\n     *\n     * <pre>\n     * const petsAreEqualByName (pet1, pet2) {\n     *  return pet1.name === pet2.name;\n     * }\n     * </pre>\n     * @param {Object} elem element to search for.\n     * @param {function(Object,Object):boolean=} equalsFunction optional\n     * function to check if two elements are equal.\n     * @return {boolean} true if this stack contains the specified element,\n     * false otherwise.\n     */\n    Stack.prototype.contains = function (elem, equalsFunction) {\n        return this.list.contains(elem, equalsFunction);\n    };\n    /**\n     * Checks if this stack is empty.\n     * @return {boolean} true if and only if this stack contains no items; false\n     * otherwise.\n     */\n    Stack.prototype.isEmpty = function () {\n        return this.list.isEmpty();\n    };\n    /**\n     * Removes all of the elements from this stack.\n     */\n    Stack.prototype.clear = function () {\n        this.list.clear();\n    };\n    /**\n     * Executes the provided function once for each element present in this stack in\n     * LIFO order.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element value, to break the iteration you can\n     * optionally return false.\n     */\n    Stack.prototype.forEach = function (callback) {\n        this.list.forEach(callback);\n    };\n    return Stack;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Stack; // End of stack\n//# sourceMappingURL=Stack.js.map","\"use strict\";\nvar util = require('./util');\n/**\n * Returns the position of the first occurrence of the specified item\n * within the specified array.4\n * @param {*} array the array in which to search the element.\n * @param {Object} item the element to search.\n * @param {function(Object,Object):boolean=} equalsFunction optional function used to\n * check equality between 2 elements.\n * @return {number} the position of the first occurrence of the specified element\n * within the specified array, or -1 if not found.\n */\nfunction indexOf(array, item, equalsFunction) {\n    var equals = equalsFunction || util.defaultEquals;\n    var length = array.length;\n    for (var i = 0; i < length; i++) {\n        if (equals(array[i], item)) {\n            return i;\n        }\n    }\n    return -1;\n}\nexports.indexOf = indexOf;\n/**\n * Returns the position of the last occurrence of the specified element\n * within the specified array.\n * @param {*} array the array in which to search the element.\n * @param {Object} item the element to search.\n * @param {function(Object,Object):boolean=} equalsFunction optional function used to\n * check equality between 2 elements.\n * @return {number} the position of the last occurrence of the specified element\n * within the specified array or -1 if not found.\n */\nfunction lastIndexOf(array, item, equalsFunction) {\n    var equals = equalsFunction || util.defaultEquals;\n    var length = array.length;\n    for (var i = length - 1; i >= 0; i--) {\n        if (equals(array[i], item)) {\n            return i;\n        }\n    }\n    return -1;\n}\nexports.lastIndexOf = lastIndexOf;\n/**\n * Returns true if the specified array contains the specified element.\n * @param {*} array the array in which to search the element.\n * @param {Object} item the element to search.\n * @param {function(Object,Object):boolean=} equalsFunction optional function to\n * check equality between 2 elements.\n * @return {boolean} true if the specified array contains the specified element.\n */\nfunction contains(array, item, equalsFunction) {\n    return indexOf(array, item, equalsFunction) >= 0;\n}\nexports.contains = contains;\n/**\n * Removes the first ocurrence of the specified element from the specified array.\n * @param {*} array the array in which to search element.\n * @param {Object} item the element to search.\n * @param {function(Object,Object):boolean=} equalsFunction optional function to\n * check equality between 2 elements.\n * @return {boolean} true if the array changed after this call.\n */\nfunction remove(array, item, equalsFunction) {\n    var index = indexOf(array, item, equalsFunction);\n    if (index < 0) {\n        return false;\n    }\n    array.splice(index, 1);\n    return true;\n}\nexports.remove = remove;\n/**\n * Returns the number of elements in the specified array equal\n * to the specified object.\n * @param {Array} array the array in which to determine the frequency of the element.\n * @param {Object} item the element whose frequency is to be determined.\n * @param {function(Object,Object):boolean=} equalsFunction optional function used to\n * check equality between 2 elements.\n * @return {number} the number of elements in the specified array\n * equal to the specified object.\n */\nfunction frequency(array, item, equalsFunction) {\n    var equals = equalsFunction || util.defaultEquals;\n    var length = array.length;\n    var freq = 0;\n    for (var i = 0; i < length; i++) {\n        if (equals(array[i], item)) {\n            freq++;\n        }\n    }\n    return freq;\n}\nexports.frequency = frequency;\n/**\n * Returns true if the two specified arrays are equal to one another.\n * Two arrays are considered equal if both arrays contain the same number\n * of elements, and all corresponding pairs of elements in the two\n * arrays are equal and are in the same order.\n * @param {Array} array1 one array to be tested for equality.\n * @param {Array} array2 the other array to be tested for equality.\n * @param {function(Object,Object):boolean=} equalsFunction optional function used to\n * check equality between elemements in the arrays.\n * @return {boolean} true if the two arrays are equal\n */\nfunction equals(array1, array2, equalsFunction) {\n    var equals = equalsFunction || util.defaultEquals;\n    if (array1.length !== array2.length) {\n        return false;\n    }\n    var length = array1.length;\n    for (var i = 0; i < length; i++) {\n        if (!equals(array1[i], array2[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nexports.equals = equals;\n/**\n * Returns shallow a copy of the specified array.\n * @param {*} array the array to copy.\n * @return {Array} a copy of the specified array\n */\nfunction copy(array) {\n    return array.concat();\n}\nexports.copy = copy;\n/**\n * Swaps the elements at the specified positions in the specified array.\n * @param {Array} array The array in which to swap elements.\n * @param {number} i the index of one element to be swapped.\n * @param {number} j the index of the other element to be swapped.\n * @return {boolean} true if the array is defined and the indexes are valid.\n */\nfunction swap(array, i, j) {\n    if (i < 0 || i >= array.length || j < 0 || j >= array.length) {\n        return false;\n    }\n    var temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n    return true;\n}\nexports.swap = swap;\nfunction toString(array) {\n    return '[' + array.toString() + ']';\n}\nexports.toString = toString;\n/**\n * Executes the provided function once for each element present in this array\n * starting from index 0 to length - 1.\n * @param {Array} array The array in which to iterate.\n * @param {function(Object):*} callback function to execute, it is\n * invoked with one argument: the element value, to break the iteration you can\n * optionally return false.\n */\nfunction forEach(array, callback) {\n    for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {\n        var ele = array_1[_i];\n        if (callback(ele) === false) {\n            return;\n        }\n    }\n}\nexports.forEach = forEach;\n//# sourceMappingURL=arrays.js.map","\"use strict\";\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\nexports.has = function (obj, prop) {\n    return _hasOwnProperty.call(obj, prop);\n};\n/**\n * Default function to compare element order.\n * @function\n */\nfunction defaultCompare(a, b) {\n    if (a < b) {\n        return -1;\n    }\n    else if (a === b) {\n        return 0;\n    }\n    else {\n        return 1;\n    }\n}\nexports.defaultCompare = defaultCompare;\n/**\n * Default function to test equality.\n * @function\n */\nfunction defaultEquals(a, b) {\n    return a === b;\n}\nexports.defaultEquals = defaultEquals;\n/**\n * Default function to convert an object to a string.\n * @function\n */\nfunction defaultToString(item) {\n    if (item === null) {\n        return 'COLLECTION_NULL';\n    }\n    else if (isUndefined(item)) {\n        return 'COLLECTION_UNDEFINED';\n    }\n    else if (isString(item)) {\n        return '$s' + item;\n    }\n    else {\n        return '$o' + item.toString();\n    }\n}\nexports.defaultToString = defaultToString;\n/**\n* Joins all the properies of the object using the provided join string\n*/\nfunction makeString(item, join) {\n    if (join === void 0) { join = ','; }\n    if (item === null) {\n        return 'COLLECTION_NULL';\n    }\n    else if (isUndefined(item)) {\n        return 'COLLECTION_UNDEFINED';\n    }\n    else if (isString(item)) {\n        return item.toString();\n    }\n    else {\n        var toret = '{';\n        var first = true;\n        for (var prop in item) {\n            if (exports.has(item, prop)) {\n                if (first) {\n                    first = false;\n                }\n                else {\n                    toret = toret + join;\n                }\n                toret = toret + prop + ':' + item[prop];\n            }\n        }\n        return toret + '}';\n    }\n}\nexports.makeString = makeString;\n/**\n * Checks if the given argument is a function.\n * @function\n */\nfunction isFunction(func) {\n    return (typeof func) === 'function';\n}\nexports.isFunction = isFunction;\n/**\n * Checks if the given argument is undefined.\n * @function\n */\nfunction isUndefined(obj) {\n    return (typeof obj) === 'undefined';\n}\nexports.isUndefined = isUndefined;\n/**\n * Checks if the given argument is a string.\n * @function\n */\nfunction isString(obj) {\n    return Object.prototype.toString.call(obj) === '[object String]';\n}\nexports.isString = isString;\n/**\n * Reverses a compare function.\n * @function\n */\nfunction reverseCompareFunction(compareFunction) {\n    if (!isFunction(compareFunction)) {\n        return function (a, b) {\n            if (a < b) {\n                return 1;\n            }\n            else if (a === b) {\n                return 0;\n            }\n            else {\n                return -1;\n            }\n        };\n    }\n    else {\n        return function (d, v) {\n            return compareFunction(d, v) * -1;\n        };\n    }\n}\nexports.reverseCompareFunction = reverseCompareFunction;\n/**\n * Returns an equal function given a compare function.\n * @function\n */\nfunction compareToEquals(compareFunction) {\n    return function (a, b) {\n        return compareFunction(a, b) === 0;\n    };\n}\nexports.compareToEquals = compareToEquals;\n//# sourceMappingURL=util.js.map","\"use strict\";\n// Copyright 2013 Basarat Ali Syed. All Rights Reserved.\n//\n// Licensed under MIT open source license http://opensource.org/licenses/MIT\n//\n// Orginal javascript code was by Mauricio Santos\n//\nvar _arrays = require('./arrays');\nexports.arrays = _arrays;\nvar Bag_1 = require('./Bag');\nexports.Bag = Bag_1.default;\nvar BSTree_1 = require('./BSTree');\nexports.BSTree = BSTree_1.default;\nvar Dictionary_1 = require('./Dictionary');\nexports.Dictionary = Dictionary_1.default;\nvar Heap_1 = require('./Heap');\nexports.Heap = Heap_1.default;\nvar LinkedDictionary_1 = require('./LinkedDictionary');\nexports.LinkedDictionary = LinkedDictionary_1.default;\nvar LinkedList_1 = require('./LinkedList');\nexports.LinkedList = LinkedList_1.default;\nvar MultiDictionary_1 = require('./MultiDictionary');\nexports.MultiDictionary = MultiDictionary_1.default;\nvar FactoryDictionary_1 = require('./FactoryDictionary');\nexports.FactoryDictionary = FactoryDictionary_1.default;\nvar FactoryDictionary_2 = require('./FactoryDictionary');\nexports.DefaultDictionary = FactoryDictionary_2.default;\nvar Queue_1 = require('./Queue');\nexports.Queue = Queue_1.default;\nvar PriorityQueue_1 = require('./PriorityQueue');\nexports.PriorityQueue = PriorityQueue_1.default;\nvar Set_1 = require('./Set');\nexports.Set = Set_1.default;\nvar Stack_1 = require('./Stack');\nexports.Stack = Stack_1.default;\nvar MultiRootTree_1 = require('./MultiRootTree');\nexports.MultiRootTree = MultiRootTree_1.default;\nvar _util = require('./util');\nexports.util = _util;\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\nexports.has = function (obj, prop) {\n    return _hasOwnProperty.call(obj, prop);\n};\n/**\n * Default function to compare element order.\n * @function\n */\nfunction defaultCompare(a, b) {\n    if (a < b) {\n        return -1;\n    }\n    else if (a === b) {\n        return 0;\n    }\n    else {\n        return 1;\n    }\n}\nexports.defaultCompare = defaultCompare;\n/**\n * Default function to test equality.\n * @function\n */\nfunction defaultEquals(a, b) {\n    return a === b;\n}\nexports.defaultEquals = defaultEquals;\n/**\n * Default function to convert an object to a string.\n * @function\n */\nfunction defaultToString(item) {\n    if (item === null) {\n        return 'COLLECTION_NULL';\n    }\n    else if (isUndefined(item)) {\n        return 'COLLECTION_UNDEFINED';\n    }\n    else if (isString(item)) {\n        return '$s' + item;\n    }\n    else {\n        return '$o' + item.toString();\n    }\n}\nexports.defaultToString = defaultToString;\n/**\n* Joins all the properies of the object using the provided join string\n*/\nfunction makeString(item, join) {\n    if (join === void 0) { join = ','; }\n    if (item === null) {\n        return 'COLLECTION_NULL';\n    }\n    else if (isUndefined(item)) {\n        return 'COLLECTION_UNDEFINED';\n    }\n    else if (isString(item)) {\n        return item.toString();\n    }\n    else {\n        var toret = '{';\n        var first = true;\n        for (var prop in item) {\n            if (exports.has(item, prop)) {\n                if (first) {\n                    first = false;\n                }\n                else {\n                    toret = toret + join;\n                }\n                toret = toret + prop + ':' + item[prop];\n            }\n        }\n        return toret + '}';\n    }\n}\nexports.makeString = makeString;\n/**\n * Checks if the given argument is a function.\n * @function\n */\nfunction isFunction(func) {\n    return (typeof func) === 'function';\n}\nexports.isFunction = isFunction;\n/**\n * Checks if the given argument is undefined.\n * @function\n */\nfunction isUndefined(obj) {\n    return (typeof obj) === 'undefined';\n}\nexports.isUndefined = isUndefined;\n/**\n * Checks if the given argument is a string.\n * @function\n */\nfunction isString(obj) {\n    return Object.prototype.toString.call(obj) === '[object String]';\n}\nexports.isString = isString;\n/**\n * Reverses a compare function.\n * @function\n */\nfunction reverseCompareFunction(compareFunction) {\n    if (!isFunction(compareFunction)) {\n        return function (a, b) {\n            if (a < b) {\n                return 1;\n            }\n            else if (a === b) {\n                return 0;\n            }\n            else {\n                return -1;\n            }\n        };\n    }\n    else {\n        return function (d, v) {\n            return compareFunction(d, v) * -1;\n        };\n    }\n}\nexports.reverseCompareFunction = reverseCompareFunction;\n/**\n * Returns an equal function given a compare function.\n * @function\n */\nfunction compareToEquals(compareFunction) {\n    return function (a, b) {\n        return compareFunction(a, b) === 0;\n    };\n}\nexports.compareToEquals = compareToEquals;\n//# sourceMappingURL=util.js.map","\"use strict\";\nvar DataStructures_1 = require(\"../utils/DataStructures\");\nvar CategoryService_1 = require(\"../log/category/CategoryService\");\nvar LoggerOptions_1 = require(\"../log/LoggerOptions\");\n/**\n * Implementation class for CategoryServiceControl.\n */\nvar CategoryServiceControlImpl = (function () {\n    function CategoryServiceControlImpl() {\n    }\n    CategoryServiceControlImpl.prototype.help = function () {\n        /* tslint:disable:no-console */\n        console.log(CategoryServiceControlImpl._help);\n        /* tslint:enable:no-console */\n    };\n    CategoryServiceControlImpl.prototype.example = function () {\n        /* tslint:disable:no-console */\n        console.log(CategoryServiceControlImpl._example);\n        /* tslint:enable:no-console */\n    };\n    CategoryServiceControlImpl.prototype.showSettings = function (id) {\n        if (id === void 0) { id = \"all\"; }\n        var result = new DataStructures_1.StringBuilder();\n        var service = CategoryServiceControlImpl._getCategoryService();\n        var categories = CategoryServiceControlImpl._getCategories(id);\n        categories.forEach(function (category) {\n            CategoryServiceControlImpl._processCategory(service, category, result, 0);\n        });\n        /* tslint:disable:no-console */\n        console.log(result.toString());\n        /* tslint:enable:no-console */\n    };\n    CategoryServiceControlImpl.prototype.change = function (settings) {\n        var service = CategoryServiceControlImpl._getCategoryService();\n        var categories = CategoryServiceControlImpl._getCategories(settings.category);\n        var logLevel = null;\n        var formatEnum = null;\n        var showCategoryName = null;\n        var showTimestamp = null;\n        var result = null;\n        var addResult = function (value) {\n            if (result !== null) {\n                result += \", \";\n            }\n            if (result === null) {\n                result = value;\n            }\n            else {\n                result += value;\n            }\n        };\n        addResult(\"recursive=\" + settings.recursive);\n        if (typeof settings.logLevel === \"string\") {\n            logLevel = LoggerOptions_1.LogLevel.fromString(settings.logLevel);\n            addResult(\"logLevel=\" + settings.logLevel);\n        }\n        if (typeof settings.logFormat === \"string\") {\n            formatEnum = LoggerOptions_1.DateFormatEnum.fromString(settings.logFormat);\n            addResult(\"logFormat=\" + settings.logFormat);\n        }\n        if (typeof settings.showCategoryName === \"boolean\") {\n            showCategoryName = settings.showCategoryName;\n            addResult(\"showCategoryName=\" + settings.showCategoryName);\n        }\n        if (typeof settings.showTimestamp === \"boolean\") {\n            showTimestamp = settings.showTimestamp;\n            addResult(\"showTimestamp=\" + settings.showTimestamp);\n        }\n        var applyChanges = function (cat) {\n            var categorySettings = service.getCategorySettings(cat);\n            // Should not happen but make tslint happy\n            if (categorySettings !== null) {\n                if (logLevel !== null) {\n                    categorySettings.logLevel = logLevel;\n                }\n                if (formatEnum !== null) {\n                    categorySettings.logFormat.dateFormat.formatEnum = formatEnum;\n                }\n                if (showTimestamp !== null) {\n                    categorySettings.logFormat.showTimeStamp = showTimestamp;\n                }\n                if (showCategoryName !== null) {\n                    categorySettings.logFormat.showCategoryName = showCategoryName;\n                }\n            }\n        };\n        categories.forEach(function (cat) { return CategoryServiceControlImpl._applyToCategory(cat, settings.recursive, applyChanges); });\n        /* tslint:disable:no-console */\n        console.log(\"Applied changes: \" + result + \" to categories '\" + settings.category + \"'.\");\n        /* tslint:enable:no-console */\n    };\n    CategoryServiceControlImpl.prototype.reset = function (id) {\n        if (id === void 0) { id = \"all\"; }\n        var service = CategoryServiceControlImpl._getCategoryService();\n        var categories = CategoryServiceControlImpl._getCategories(id);\n        var applyChanges = function (cat) {\n            var categorySettings = service.getCategorySettings(cat);\n            var original = service.getOriginalCategorySettings(cat);\n            // Should not happen but make tslint happy\n            if (categorySettings !== null && original !== null) {\n                categorySettings.logLevel = original.logLevel;\n                categorySettings.logFormat.dateFormat.formatEnum = original.logFormat.dateFormat.formatEnum;\n                categorySettings.logFormat.showTimeStamp = original.logFormat.showTimeStamp;\n                categorySettings.logFormat.showCategoryName = original.logFormat.showCategoryName;\n            }\n        };\n        categories.forEach(function (cat) { return CategoryServiceControlImpl._applyToCategory(cat, true, applyChanges); });\n        /* tslint:disable:no-console */\n        console.log(\"Applied reset to category: \" + id + \".\");\n        /* tslint:enable:no-console */\n    };\n    CategoryServiceControlImpl._processCategory = function (service, category, result, indent) {\n        var settings = service.getCategorySettings(category);\n        if (settings !== null) {\n            result.append(\"  \" + category.id + \": \");\n            if (indent > 0) {\n                for (var i = 0; i < indent; i++) {\n                    result.append(\"  \");\n                }\n            }\n            result.append(category.name + \" (\" + LoggerOptions_1.LogLevel[settings.logLevel].toString() + \"@\" + LoggerOptions_1.LoggerType[settings.loggerType].toString() + \")\\n\");\n            if (category.children.length > 0) {\n                category.children.forEach(function (child) {\n                    CategoryServiceControlImpl._processCategory(service, child, result, indent + 1);\n                });\n            }\n        }\n    };\n    CategoryServiceControlImpl._applyToCategory = function (category, recursive, apply) {\n        apply(category);\n        if (recursive) {\n            category.children.forEach(function (child) {\n                CategoryServiceControlImpl._applyToCategory(child, recursive, apply);\n            });\n        }\n    };\n    CategoryServiceControlImpl._getCategoryService = function () {\n        return CategoryService_1.CategoryServiceFactory.getRuntimeSettings();\n    };\n    CategoryServiceControlImpl._getCategories = function (idCategory) {\n        var service = CategoryServiceControlImpl._getCategoryService();\n        var categories = [];\n        if (idCategory === \"all\") {\n            categories = service.getRootCategories();\n        }\n        else {\n            var category = service.getCategoryById(idCategory);\n            if (category === null) {\n                throw new Error(\"Failed to find category with id \" + idCategory);\n            }\n            categories.push(category);\n        }\n        return categories;\n    };\n    return CategoryServiceControlImpl;\n}());\nCategoryServiceControlImpl._help = \"\\n  help(): void\\n    ** Shows this help.\\n    \\n  example(): void\\n    ** Shows an example on how to use this.\\n    \\n  showSettings(id: number | \\\"all\\\" = \\\"all\\\"): void\\n    ** Shows settings for a specific category, or for all. The id of categories can be found by calling this method without parameter.\\n    \\n  change(settings: CategoryServiceControlSettings): void\\n    ** Changes the current settings for one or all categories. \\n    ** \\n       CategoryServiceControlSettings, properties of object:\\n         category: number | \\\"all\\\"\\n           ** Apply to specific category, or \\\"all\\\".\\n           ** Required        \\n        \\n         recursive: boolean\\n           ** Apply to child categories (true) or not.\\n           ** Required\\n           \\n         logLevel: \\\"Fatal\\\" | \\\"Error\\\" | \\\"Warn\\\" | \\\"Info\\\" | \\\"Debug\\\" | \\\"Trace\\\" | undefined\\n           ** Set log level, undefined will not change the setting.\\n           ** Optional\\n         \\n         logFormat: \\\"Default\\\" | \\\"YearMonthDayTime\\\" | \\\"YearDayMonthWithFullTime\\\" | \\\"YearDayMonthTime\\\" | undefined\\n           ** Set the log format, undefined will not change the setting.\\n           ** Optional\\n         \\n         showTimestamp: boolean | undefined  \\n           ** Whether to show timestamp, undefined will not change the setting.\\n           ** Optional\\n         \\n         showCategoryName: boolean | undefined\\n           ** Whether to show the category name, undefined will not change the setting.\\n           ** Optional\\n           \\n   reset(id: number | \\\"all\\\"): void\\n     ** Resets everything to original values, for one specific or for all categories.\\n\";\nCategoryServiceControlImpl._example = \"\\n  Examples:\\n    change({category: \\\"all\\\", recursive:true, logLevel: \\\"Info\\\"}) \\n      ** Change loglevel to Info for all categories, apply to child categories as well.\\n     \\n    change({category: 1, recursive:false, logLevel: \\\"Warn\\\"})\\n      ** Change logLevel for category 1, do not recurse.\\n      \\n    change({category: \\\"all\\\", recursive:true, logLevel: \\\"Debug\\\", logFormat: \\\"YearDayMonthTime\\\", showTimestamp:false, showCategoryName:false})    \\n      ** Change loglevel to Debug for all categories, apply format, do not show timestamp and category names - recursively to child categories.    \\n      \\n\";\nexports.CategoryServiceControlImpl = CategoryServiceControlImpl;\n//# sourceMappingURL=CategoryServiceControl.js.map","\"use strict\";\nvar LoggerOptions_1 = require(\"../log/LoggerOptions\");\nvar LoggerFactoryService_1 = require(\"../log/standard/LoggerFactoryService\");\nvar DataStructures_1 = require(\"../utils/DataStructures\");\nvar LoggerControlImpl = (function () {\n    function LoggerControlImpl() {\n    }\n    LoggerControlImpl.prototype.help = function () {\n        /* tslint:disable:no-console */\n        console.log(LoggerControlImpl._help);\n        /* tslint:enable:no-console */\n    };\n    LoggerControlImpl.prototype.listFactories = function () {\n        var rtSettingsFactories = LoggerControlImpl._getRuntimeSettingsLoggerFactories();\n        var result = new DataStructures_1.StringBuilder();\n        result.appendLine(\"Registered LoggerFactories (index / name)\");\n        for (var i = 0; i < rtSettingsFactories.length; i++) {\n            var rtSettingsFactory = rtSettingsFactories[i];\n            result.append(\"  \" + i).append(\": \" + rtSettingsFactory.getName() + \"\\n\");\n        }\n        /* tslint:disable:no-console */\n        console.log(result.toString());\n        /* tslint:enable:no-console */\n    };\n    LoggerControlImpl.prototype.showSettings = function (id) {\n        if (id === void 0) { id = \"all\"; }\n        var result = [];\n        if (id === \"all\") {\n            var idx_1 = 0;\n            LoggerControlImpl._getRuntimeSettingsLoggerFactories().forEach(function (item) {\n                result.push(new DataStructures_1.TuplePair(idx_1++, item));\n            });\n        }\n        else {\n            var settings = LoggerControlImpl._getRuntimeSettingsLoggerFactories();\n            if (id >= 0 && id < settings.length) {\n                result.push(new DataStructures_1.TuplePair(id, settings[id]));\n            }\n            else {\n                throw new Error(\"Requested number: \" + id + \" was not found.\");\n            }\n        }\n        for (var _i = 0, result_1 = result; _i < result_1.length; _i++) {\n            var setting = result_1[_i];\n            /* tslint:disable:no-console */\n            console.log(\"  LoggerFactory: \" + setting.y.getName() + \" (id=\" + setting.x + \")\");\n            var logGroupRuntimeSettings = setting.y.getLogGroupRuntimeSettings();\n            for (var g = 0; g < logGroupRuntimeSettings.length; g++) {\n                var groupSetting = logGroupRuntimeSettings[g];\n                console.log(\"     LogGroup: (id=\" + g + \")\");\n                console.log(\"       RegExp: \" + groupSetting.logGroupRule.regExp.source);\n                console.log(\"       Level: \" + LoggerOptions_1.LogLevel[groupSetting.level].toString());\n                console.log(\"       LoggerType: \" + LoggerOptions_1.LoggerType[groupSetting.loggerType].toString());\n            }\n        }\n    };\n    LoggerControlImpl.prototype.reset = function (idFactory) {\n        if (idFactory === void 0) { idFactory = \"all\"; }\n        var loggerFactoriesSettings = LoggerControlImpl._getRuntimeSettingsLoggerFactories();\n        var result = [];\n        if (idFactory === \"all\") {\n            result = loggerFactoriesSettings;\n        }\n        else {\n            if (idFactory >= 0 && idFactory < loggerFactoriesSettings.length) {\n                result.push(loggerFactoriesSettings[idFactory]);\n            }\n        }\n        result.forEach(function (setting) {\n            /* tslint:disable:no-console */\n            console.log(\"Reset all settings for factory \" + idFactory);\n            /* tslint:enable:no-console */\n            var control = new LoggerFactoryControlImpl(setting);\n            control.reset();\n        });\n    };\n    LoggerControlImpl.prototype.getLoggerFactoryControl = function (idFactory) {\n        var loggerFactoriesSettings = LoggerControlImpl._getRuntimeSettingsLoggerFactories();\n        if (idFactory >= 0 && idFactory < loggerFactoriesSettings.length) {\n            return new LoggerFactoryControlImpl(loggerFactoriesSettings[idFactory]);\n        }\n        throw new Error(\"idFactory is invalid (less than 0) or non existing id.\");\n    };\n    LoggerControlImpl._getRuntimeSettingsLoggerFactories = function () {\n        return LoggerControlImpl._getSettings().getRuntimeSettingsForLoggerFactories();\n    };\n    LoggerControlImpl._getSettings = function () {\n        return LoggerFactoryService_1.LFService.getRuntimeSettings();\n    };\n    return LoggerControlImpl;\n}());\nLoggerControlImpl._help = \"\\n  help(): void\\n    ** Shows this help.\\n    \\n  listFactories(): void\\n    ** List all registered LoggerFactories with associated log groups with respective ids (ids can be used to target a factory and/or group).\\n    \\n  showSettings(idFactory: number | \\\"all\\\"): void\\n    ** Show log group settings for idFactory (use listFactories to find id for a LoggerFactory). If idFactory is \\\"all\\\" shows all factories. \\n  \\n  getLoggerFactoryControl(idFactory: number): LoggerFactoryControl\\n    ** Return LoggerFactoryControl when found for given idFactory or throws Error if invalid or null, get the id by using listFactories()\\n    \\n  reset(idFactory: number | \\\"all\\\"): void\\n    ** Resets given factory or all factories back to original values. \\n\";\nexports.LoggerControlImpl = LoggerControlImpl;\nvar LoggerFactoryControlImpl = (function () {\n    function LoggerFactoryControlImpl(settings) {\n        this._settings = settings;\n    }\n    LoggerFactoryControlImpl.prototype.help = function () {\n        /* tslint:disable:no-console */\n        console.log(LoggerFactoryControlImpl._help);\n        /* tslint:enable:no-console */\n    };\n    LoggerFactoryControlImpl.prototype.example = function () {\n        /* tslint:disable:no-console */\n        console.log(LoggerFactoryControlImpl._example);\n        /* tslint:enable:no-console */\n    };\n    LoggerFactoryControlImpl.prototype.showSettings = function (id) {\n        if (id === void 0) { id = \"all\"; }\n        var result = new DataStructures_1.StringBuilder();\n        var logGroupRuntimeSettings = this._settings.getLogGroupRuntimeSettings();\n        result.appendLine(\"Registered LogGroups (index / expression)\");\n        for (var i = 0; i < logGroupRuntimeSettings.length; i++) {\n            var logGroupRuntimeSetting = logGroupRuntimeSettings[i];\n            result.appendLine(\"  \" + i + \": \" + logGroupRuntimeSetting.logGroupRule.regExp.source + \", logLevel=\" +\n                LoggerOptions_1.LogLevel[logGroupRuntimeSetting.level].toString() + \", showTimestamp=\" + logGroupRuntimeSetting.logFormat.showTimeStamp +\n                \", showLoggerName=\" + logGroupRuntimeSetting.logFormat.showLoggerName +\n                \", format=\" + LoggerOptions_1.DateFormatEnum[logGroupRuntimeSetting.logFormat.dateFormat.formatEnum].toString());\n        }\n        /* tslint:disable:no-console */\n        console.log(result.toString());\n        /* tslint:enable:no-console */\n    };\n    LoggerFactoryControlImpl.prototype.change = function (settings) {\n        var logGroupRuntimeSettings = this._getLogGroupRunTimeSettingsFor(settings.group);\n        var logLevel = null;\n        var formatEnum = null;\n        var showLoggerName = null;\n        var showTimestamp = null;\n        var result = null;\n        var addResult = function (value) {\n            if (result !== null) {\n                result += \", \";\n            }\n            if (result === null) {\n                result = value;\n            }\n            else {\n                result += value;\n            }\n        };\n        if (typeof settings.logLevel === \"string\") {\n            logLevel = LoggerOptions_1.LogLevel.fromString(settings.logLevel);\n            addResult(\"logLevel=\" + settings.logLevel);\n        }\n        if (typeof settings.logFormat === \"string\") {\n            formatEnum = LoggerOptions_1.DateFormatEnum.fromString(settings.logFormat);\n            addResult(\"logFormat=\" + settings.logFormat);\n        }\n        if (typeof settings.showLoggerName === \"boolean\") {\n            showLoggerName = settings.showLoggerName;\n            addResult(\"showLoggerName=\" + settings.showLoggerName);\n        }\n        if (typeof settings.showTimestamp === \"boolean\") {\n            showTimestamp = settings.showTimestamp;\n            addResult(\"showTimestamp=\" + settings.showTimestamp);\n        }\n        logGroupRuntimeSettings.forEach(function (s) {\n            if (logLevel !== null) {\n                s.level = logLevel;\n            }\n            if (formatEnum !== null) {\n                s.logFormat.dateFormat.formatEnum = formatEnum;\n            }\n            if (showTimestamp !== null) {\n                s.logFormat.showTimeStamp = showTimestamp;\n            }\n            if (showLoggerName !== null) {\n                s.logFormat.showLoggerName = showLoggerName;\n            }\n        });\n        /* tslint:disable:no-console */\n        console.log(\"Applied changes: \" + result + \" to log groups '\" + settings.group + \"'.\");\n        /* tslint:enable:no-console */\n    };\n    LoggerFactoryControlImpl.prototype.reset = function (idGroup) {\n        if (idGroup === void 0) { idGroup = \"all\"; }\n        var settings = this._getLogGroupRunTimeSettingsFor(idGroup);\n        for (var _i = 0, settings_1 = settings; _i < settings_1.length; _i++) {\n            var setting = settings_1[_i];\n            setting.level = setting.logGroupRule.level;\n            setting.logFormat.showTimeStamp = setting.logGroupRule.logFormat.showTimeStamp;\n            setting.logFormat.showLoggerName = setting.logGroupRule.logFormat.showLoggerName;\n            setting.logFormat.dateFormat.formatEnum = setting.logGroupRule.logFormat.dateFormat.formatEnum;\n        }\n        /* tslint:disable:no-console */\n        console.log(\"Reset all settings for group \" + idGroup);\n        /* tslint:enable:no-console */\n    };\n    LoggerFactoryControlImpl.prototype._getLogGroupRunTimeSettingsFor = function (idGroup) {\n        var settings = [];\n        if (idGroup === \"all\") {\n            settings = this._settings.getLogGroupRuntimeSettings();\n        }\n        else {\n            this._checkIndex(idGroup);\n            settings.push(this._settings.getLogGroupRuntimeSettings()[idGroup]);\n        }\n        return settings;\n    };\n    LoggerFactoryControlImpl.prototype._checkIndex = function (index) {\n        if (index < 0 || index >= this._settings.getLogGroupRuntimeSettings().length) {\n            throw new Error(\"Invalid index, use listLogGroups to find out a valid one.\");\n        }\n    };\n    return LoggerFactoryControlImpl;\n}());\nLoggerFactoryControlImpl._help = \"\\n  help(): void\\n    ** Shows this help.\\n    \\n  example(): void\\n    ** Shows an example of usage.\\n\\n  showSettings(id: number | \\\"all\\\"): void\\n    ** Prints settings for given group id, \\\"all\\\" for all group.\\n\\n  change(settings: LogGroupControlSettings): void\\n    ** Changes the current settings for one or all log groups. \\n    ** \\n       LogGroupControlSettings, properties of object:\\n         group: number | \\\"all\\\"\\n           ** Apply to specific group, or \\\"all\\\".\\n           ** Required        \\n           \\n         logLevel: \\\"Fatal\\\" | \\\"Error\\\" | \\\"Warn\\\" | \\\"Info\\\" | \\\"Debug\\\" | \\\"Trace\\\" | undefined\\n           ** Set log level, undefined will not change the setting.\\n           ** Optional\\n         \\n         logFormat: \\\"Default\\\" | \\\"YearMonthDayTime\\\" | \\\"YearDayMonthWithFullTime\\\" | \\\"YearDayMonthTime\\\" | undefined\\n           ** Set the log format, undefined will not change the setting.\\n           ** Optional\\n         \\n         showTimestamp: boolean | undefined  \\n           ** Whether to show timestamp, undefined will not change the setting.\\n           ** Optional\\n         \\n         showLoggerName: boolean | undefined\\n           ** Whether to show the logger name, undefined will not change the setting.\\n           ** Optional  \\n           \\n  reset(id: number | \\\"all\\\"): void\\n    ** Resets everything to original values, for one specific or for all groups.\\n    \\n  help():\\n    ** Shows this help.\\n\";\nLoggerFactoryControlImpl._example = \"\\n  Examples:\\n    change({group: \\\"all\\\", logLevel: \\\"Info\\\"}) \\n      ** Change loglevel to Info for all groups.\\n     \\n    change({group: 1, recursive:false, logLevel: \\\"Warn\\\"})\\n      ** Change logLevel for group 1 to Warn.\\n      \\n    change({group: \\\"all\\\", logLevel: \\\"Debug\\\", logFormat: \\\"YearDayMonthTime\\\", showTimestamp:false, showLoggerName:false})    \\n      ** Change loglevel to Debug for all groups, apply format, do not show timestamp and logger names.      \\n\";\n//# sourceMappingURL=LogGroupControl.js.map","\"use strict\";\nvar CategoryService_1 = require(\"../log/category/CategoryService\");\nvar LoggerOptions_1 = require(\"../log/LoggerOptions\");\nvar MessageUtils_1 = require(\"../utils/MessageUtils\");\nvar ExtensionHelper = (function () {\n    function ExtensionHelper() {\n        // Private constructor\n    }\n    /**\n     * Enables the window event listener to listen to messages (from extensions).\n     * Can be registered/enabled only once.\n     */\n    ExtensionHelper.register = function () {\n        if (!ExtensionHelper.registered) {\n            ExtensionHelper.registered = true;\n            var listener = function (evt) {\n                var msg = evt.data;\n                if (msg !== null) {\n                    ExtensionHelper.processMessageFromExtension(msg);\n                }\n            };\n            if (typeof window !== \"undefined\") {\n                window.removeEventListener(\"message\", listener);\n                window.addEventListener(\"message\", listener);\n            }\n        }\n    };\n    ExtensionHelper.processMessageFromExtension = function (msg) {\n        if (!ExtensionHelper.registered) {\n            return;\n        }\n        /* tslint:disable:no-console */\n        if (msg.from === \"tsl-extension\") {\n            var data = msg.data;\n            switch (data.type) {\n                case \"register\":\n                    ExtensionHelper.enableExtensionIntegration();\n                    break;\n                case \"request-change-loglevel\":\n                    var valueRequest = data.value;\n                    var catsApplied = ExtensionHelper.applyLogLevel(valueRequest.categoryId, valueRequest.logLevel, valueRequest.recursive);\n                    if (catsApplied.length > 0) {\n                        // Send changes back\n                        ExtensionHelper.sendCategoriesRuntimeUpdateMessage(catsApplied);\n                    }\n                    break;\n                default:\n                    console.log(\"Unknown command to process message from extension, command was: \" + data.type);\n                    break;\n            }\n        }\n        /* tslint:enable:no-console */\n    };\n    ExtensionHelper.sendCategoryLogMessage = function (msg) {\n        if (!ExtensionHelper.registered) {\n            return;\n        }\n        var categoryIds = msg.getCategories().map(function (cat) {\n            return cat.id;\n        });\n        var content = {\n            type: \"log-message\",\n            value: {\n                categories: categoryIds,\n                errorAsStack: msg.getErrorAsStack(),\n                formattedMessage: MessageUtils_1.MessageFormatUtils.renderDefaultMessage(msg, false),\n                logLevel: LoggerOptions_1.LogLevel[msg.getLevel()].toString(),\n                message: msg.getMessage(),\n                resolvedErrorMessage: msg.isResolvedErrorMessage()\n            }\n        };\n        var message = {\n            data: content,\n            from: \"tsl-logging\",\n        };\n        ExtensionHelper.sendMessage(message);\n    };\n    ExtensionHelper.sendCategoriesRuntimeUpdateMessage = function (categories) {\n        if (!ExtensionHelper.registered) {\n            return;\n        }\n        var service = CategoryService_1.CategoryServiceImpl.getInstance();\n        var catLevels = { categories: Array() };\n        categories.forEach(function (cat) {\n            var catSettings = service.getCategorySettings(cat);\n            if (catSettings != null) {\n                catLevels.categories.push({ id: cat.id, logLevel: LoggerOptions_1.LogLevel[catSettings.logLevel].toString() });\n            }\n        });\n        var content = {\n            type: \"categories-rt-update\",\n            value: catLevels,\n        };\n        var message = {\n            data: content,\n            from: \"tsl-logging\"\n        };\n        ExtensionHelper.sendMessage(message);\n    };\n    ExtensionHelper.sendRootCategoriesToExtension = function () {\n        if (!ExtensionHelper.registered) {\n            return;\n        }\n        var categories = CategoryService_1.CategoryServiceImpl.getInstance().getRootCategories().map(function (cat) {\n            return ExtensionHelper.getCategoryAsJSON(cat);\n        });\n        var content = {\n            type: \"root-categories-tree\",\n            value: categories\n        };\n        var message = {\n            data: content,\n            from: \"tsl-logging\"\n        };\n        ExtensionHelper.sendMessage(message);\n    };\n    /**\n     * If extension integration is enabled, will send the root categories over to the extension.\n     * Otherwise does nothing.\n     */\n    ExtensionHelper.getCategoryAsJSON = function (cat) {\n        var childCategories = cat.children.map(function (child) {\n            return ExtensionHelper.getCategoryAsJSON(child);\n        });\n        return {\n            children: childCategories,\n            id: cat.id,\n            logLevel: LoggerOptions_1.LogLevel[cat.logLevel].toString(),\n            name: cat.name,\n            parentId: (cat.parent != null ? cat.parent.id : null),\n        };\n    };\n    ExtensionHelper.applyLogLevel = function (categoryId, logLevel, recursive) {\n        var cats = [];\n        var category = CategoryService_1.CategoryServiceImpl.getInstance().getCategoryById(categoryId);\n        if (category != null) {\n            ExtensionHelper._applyLogLevelRecursive(category, LoggerOptions_1.LogLevel.fromString(logLevel), recursive, cats);\n        }\n        else {\n            /* tslint:disable:no-console */\n            console.log(\"Could not change log level, failed to find category with id: \" + categoryId);\n        }\n        return cats;\n    };\n    ExtensionHelper._applyLogLevelRecursive = function (category, logLevel, recursive, cats) {\n        var categorySettings = CategoryService_1.CategoryServiceImpl.getInstance().getCategorySettings(category);\n        if (categorySettings != null) {\n            categorySettings.logLevel = logLevel;\n            cats.push(category);\n            if (recursive) {\n                category.children.forEach(function (child) {\n                    ExtensionHelper._applyLogLevelRecursive(child, logLevel, recursive, cats);\n                });\n            }\n        }\n    };\n    ExtensionHelper.getAllCategories = function () {\n        var cats = [];\n        var addCats = function (cat, allCats) {\n            allCats.push(cat);\n            cat.children.forEach(function (catChild) {\n                addCats(catChild, allCats);\n            });\n        };\n        CategoryService_1.CategoryServiceImpl.getInstance().getRootCategories().forEach(function (cat) {\n            addCats(cat, cats);\n        });\n        return cats;\n    };\n    ExtensionHelper.sendMessage = function (msg) {\n        if (!ExtensionHelper.registered) {\n            return;\n        }\n        if (typeof window !== \"undefined\") {\n            window.postMessage(msg, \"*\");\n        }\n    };\n    /**\n     *  Extension framework will call this to enable the integration between two,\n     *  after this call the framework will respond with postMessage() messages.\n     */\n    ExtensionHelper.enableExtensionIntegration = function () {\n        if (!ExtensionHelper.registered) {\n            return;\n        }\n        var instance = CategoryService_1.CategoryServiceImpl.getInstance();\n        instance.enableExtensionIntegration();\n        // Send over all categories\n        ExtensionHelper.sendRootCategoriesToExtension();\n        // Send over the current runtime levels\n        var cats = ExtensionHelper.getAllCategories();\n        ExtensionHelper.sendCategoriesRuntimeUpdateMessage(cats);\n    };\n    return ExtensionHelper;\n}());\nExtensionHelper.registered = false;\nexports.ExtensionHelper = ExtensionHelper;\n//# sourceMappingURL=ExtensionHelper.js.map","\"use strict\";\n/**\n * Log level for a logger.\n */\nvar LogLevel;\n(function (LogLevel) {\n    LogLevel[LogLevel[\"Trace\"] = 0] = \"Trace\";\n    LogLevel[LogLevel[\"Debug\"] = 1] = \"Debug\";\n    LogLevel[LogLevel[\"Info\"] = 2] = \"Info\";\n    LogLevel[LogLevel[\"Warn\"] = 3] = \"Warn\";\n    LogLevel[LogLevel[\"Error\"] = 4] = \"Error\";\n    LogLevel[LogLevel[\"Fatal\"] = 5] = \"Fatal\";\n})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));\n/* tslint:disable:no-namespace */\n(function (LogLevel) {\n    /**\n     * Returns LogLevel based on string representation\n     * @param val Value\n     * @returns {LogLevel}, Error is thrown if invalid.\n     */\n    function fromString(val) {\n        if (val == null) {\n            throw new Error(\"Argument must be set\");\n        }\n        switch (val.toLowerCase()) {\n            case \"trace\":\n                return LogLevel.Trace;\n            case \"debug\":\n                return LogLevel.Debug;\n            case \"info\":\n                return LogLevel.Info;\n            case \"warn\":\n                return LogLevel.Warn;\n            case \"error\":\n                return LogLevel.Error;\n            case \"fatal\":\n                return LogLevel.Fatal;\n            default:\n                throw new Error(\"Unsupported value for conversion: \" + val);\n        }\n    }\n    LogLevel.fromString = fromString;\n})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));\n/* tslint:disable:enable-namespace */\n/**\n * Where to log to? Pick one of the constants. Custom requires a callback to be present, see LFService.createLoggerFactory(...)\n * where this comes into play.\n */\nvar LoggerType;\n(function (LoggerType) {\n    LoggerType[LoggerType[\"Console\"] = 0] = \"Console\";\n    LoggerType[LoggerType[\"MessageBuffer\"] = 1] = \"MessageBuffer\";\n    LoggerType[LoggerType[\"Custom\"] = 2] = \"Custom\";\n})(LoggerType = exports.LoggerType || (exports.LoggerType = {}));\n/**\n * Defines several date enums used for formatting a date.\n */\nvar DateFormatEnum;\n(function (DateFormatEnum) {\n    /**\n     * Displays as: year-month-day hour:minute:second,millis -> 1999-02-12 23:59:59,123\n     * Note the date separator can be set separately.\n     */\n    DateFormatEnum[DateFormatEnum[\"Default\"] = 0] = \"Default\";\n    /**\n     * Displays as: year-month-day hour:minute:second -> 1999-02-12 23:59:59\n     * Note the date separator can be set separately.\n     */\n    DateFormatEnum[DateFormatEnum[\"YearMonthDayTime\"] = 1] = \"YearMonthDayTime\";\n    /**\n     * Displays as: year-day-month hour:minute:second,millis -> 1999-12-02 23:59:59,123\n     * Note the date separator can be set separately.\n     */\n    DateFormatEnum[DateFormatEnum[\"YearDayMonthWithFullTime\"] = 2] = \"YearDayMonthWithFullTime\";\n    /**\n     * Displays as: year-day-month hour:minute:second -> 1999-12-02 23:59:59\n     * Note the date separator can be set separately.\n     */\n    DateFormatEnum[DateFormatEnum[\"YearDayMonthTime\"] = 3] = \"YearDayMonthTime\";\n})(DateFormatEnum = exports.DateFormatEnum || (exports.DateFormatEnum = {}));\n/* tslint:disable:no-namespace */\n(function (DateFormatEnum) {\n    /**\n     * Returns LogLevel based on string representation\n     * @param val Value\n     * @returns {LogLevel}, Error is thrown if invalid.\n     */\n    function fromString(val) {\n        if (val == null) {\n            throw new Error(\"Argument must be set\");\n        }\n        switch (val.toLowerCase()) {\n            case \"default\":\n                return DateFormatEnum.Default;\n            case \"yearmonthdayTime\":\n                return DateFormatEnum.YearMonthDayTime;\n            case \"yeardaymonthwithfulltime\":\n                return DateFormatEnum.YearDayMonthWithFullTime;\n            case \"yeardaymonthtime\":\n                return DateFormatEnum.YearDayMonthTime;\n            default:\n                throw new Error(\"Unsupported value for conversion: \" + val);\n        }\n    }\n    DateFormatEnum.fromString = fromString;\n})(DateFormatEnum = exports.DateFormatEnum || (exports.DateFormatEnum = {}));\n/* tslint:disable:enable-namespace */\n/**\n * DateFormat class, stores data on how to format a date.\n */\nvar DateFormat = (function () {\n    /**\n     * Constructor to define the dateformat used for logging, can be called empty as it uses defaults.\n     * @param formatEnum DateFormatEnum, use one of the constants from the enum. Defaults to DateFormatEnum.Default\n     * @param dateSeparator Separator used between dates, defaults to -\n     */\n    function DateFormat(formatEnum, dateSeparator) {\n        if (formatEnum === void 0) { formatEnum = DateFormatEnum.Default; }\n        if (dateSeparator === void 0) { dateSeparator = \"-\"; }\n        this._formatEnum = formatEnum;\n        this._dateSeparator = dateSeparator;\n    }\n    Object.defineProperty(DateFormat.prototype, \"formatEnum\", {\n        get: function () {\n            return this._formatEnum;\n        },\n        set: function (value) {\n            this._formatEnum = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DateFormat.prototype, \"dateSeparator\", {\n        get: function () {\n            return this._dateSeparator;\n        },\n        set: function (value) {\n            this._dateSeparator = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DateFormat.prototype.copy = function () {\n        return new DateFormat(this._formatEnum, this._dateSeparator);\n    };\n    return DateFormat;\n}());\nexports.DateFormat = DateFormat;\n/**\n * Information about the log format, what will a log line look like?\n */\nvar LogFormat = (function () {\n    /**\n     * Constructor to create a LogFormat. Can be created without parameters where it will use sane defaults.\n     * @param dateFormat DateFormat (what needs the date look like in the log line)\n     * @param showTimeStamp Show date timestamp at all?\n     * @param showLoggerName Show the logger name?\n     */\n    function LogFormat(dateFormat, showTimeStamp, showLoggerName) {\n        if (dateFormat === void 0) { dateFormat = new DateFormat(); }\n        if (showTimeStamp === void 0) { showTimeStamp = true; }\n        if (showLoggerName === void 0) { showLoggerName = true; }\n        this._showTimeStamp = true;\n        this._showLoggerName = true;\n        this._dateFormat = dateFormat;\n        this._showTimeStamp = showTimeStamp;\n        this._showLoggerName = showLoggerName;\n    }\n    Object.defineProperty(LogFormat.prototype, \"dateFormat\", {\n        get: function () {\n            return this._dateFormat;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LogFormat.prototype, \"showTimeStamp\", {\n        get: function () {\n            return this._showTimeStamp;\n        },\n        set: function (value) {\n            this._showTimeStamp = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LogFormat.prototype, \"showLoggerName\", {\n        get: function () {\n            return this._showLoggerName;\n        },\n        set: function (value) {\n            this._showLoggerName = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return LogFormat;\n}());\nexports.LogFormat = LogFormat;\n/**\n * Information about the log format, what will a log line look like?\n */\nvar CategoryLogFormat = (function () {\n    /**\n     * Create an instance defining the category log format used.\n     * @param dateFormat Date format (uses default), for details see DateFormat class.\n     * @param showTimeStamp True to show timestamp in the logging, defaults to true.\n     * @param showCategoryName True to show category name in the logging, defaults to true.\n     */\n    function CategoryLogFormat(dateFormat, showTimeStamp, showCategoryName) {\n        if (dateFormat === void 0) { dateFormat = new DateFormat(); }\n        if (showTimeStamp === void 0) { showTimeStamp = true; }\n        if (showCategoryName === void 0) { showCategoryName = true; }\n        this._dateFormat = dateFormat;\n        this._showTimeStamp = showTimeStamp;\n        this._showCategoryName = showCategoryName;\n    }\n    Object.defineProperty(CategoryLogFormat.prototype, \"dateFormat\", {\n        get: function () {\n            return this._dateFormat;\n        },\n        set: function (value) {\n            this._dateFormat = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CategoryLogFormat.prototype, \"showTimeStamp\", {\n        get: function () {\n            return this._showTimeStamp;\n        },\n        set: function (value) {\n            this._showTimeStamp = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CategoryLogFormat.prototype, \"showCategoryName\", {\n        get: function () {\n            return this._showCategoryName;\n        },\n        set: function (value) {\n            this._showCategoryName = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CategoryLogFormat.prototype.copy = function () {\n        return new CategoryLogFormat(this._dateFormat.copy(), this._showTimeStamp, this._showCategoryName);\n    };\n    return CategoryLogFormat;\n}());\nexports.CategoryLogFormat = CategoryLogFormat;\n//# sourceMappingURL=LoggerOptions.js.map","\"use strict\";\nvar DataStructures_1 = require(\"../../utils/DataStructures\");\nvar MessageUtils_1 = require(\"../../utils/MessageUtils\");\nvar LoggerOptions_1 = require(\"../LoggerOptions\");\nvar CategoryLogMessageImpl = (function () {\n    function CategoryLogMessageImpl(message, error, categories, date, level, logFormat, ready) {\n        this._resolvedErrorMessage = false;\n        this._errorAsStack = null;\n        this._message = message;\n        this._error = error;\n        this._categories = categories;\n        this._date = date;\n        this._level = level;\n        this._logFormat = logFormat;\n        this._ready = ready;\n    }\n    CategoryLogMessageImpl.prototype.getMessage = function () {\n        return this._message;\n    };\n    CategoryLogMessageImpl.prototype.getErrorAsStack = function () {\n        return this._errorAsStack;\n    };\n    CategoryLogMessageImpl.prototype.setErrorAsStack = function (stack) {\n        this._errorAsStack = stack;\n    };\n    CategoryLogMessageImpl.prototype.getError = function () {\n        return this._error;\n    };\n    CategoryLogMessageImpl.prototype.getCategories = function () {\n        return this._categories;\n    };\n    CategoryLogMessageImpl.prototype.getDate = function () {\n        return this._date;\n    };\n    CategoryLogMessageImpl.prototype.getLevel = function () {\n        return this._level;\n    };\n    CategoryLogMessageImpl.prototype.getLogFormat = function () {\n        return this._logFormat;\n    };\n    CategoryLogMessageImpl.prototype.isReady = function () {\n        return this._ready;\n    };\n    CategoryLogMessageImpl.prototype.setReady = function (value) {\n        this._ready = value;\n    };\n    Object.defineProperty(CategoryLogMessageImpl.prototype, \"resolvedErrorMessage\", {\n        get: function () {\n            return this._resolvedErrorMessage;\n        },\n        set: function (value) {\n            this._resolvedErrorMessage = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CategoryLogMessageImpl.prototype.isResolvedErrorMessage = function () {\n        return this._resolvedErrorMessage;\n    };\n    return CategoryLogMessageImpl;\n}());\n/**\n * Abstract category logger, use as your base class for new type of loggers (it\n * saves you a lot of work) and override doLog(CategoryLogMessage). The message argument\n * provides full access to anything related to the logging event.\n * If you just want the standard line of logging, call: this.createDefaultLogMessage(msg) on\n * this class which will return you the formatted log message as string (e.g. the\n * default loggers all use this).\n */\nvar AbstractCategoryLogger = (function () {\n    function AbstractCategoryLogger(rootCategory, runtimeSettings) {\n        this.allMessages = new DataStructures_1.LinkedList();\n        this.rootCategory = rootCategory;\n        this.runtimeSettings = runtimeSettings;\n    }\n    AbstractCategoryLogger.prototype.trace = function (msg) {\n        var categories = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            categories[_i - 1] = arguments[_i];\n        }\n        this._log.apply(this, [LoggerOptions_1.LogLevel.Trace, msg, null, false].concat(categories));\n    };\n    AbstractCategoryLogger.prototype.debug = function (msg) {\n        var categories = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            categories[_i - 1] = arguments[_i];\n        }\n        this._log.apply(this, [LoggerOptions_1.LogLevel.Debug, msg, null, false].concat(categories));\n    };\n    AbstractCategoryLogger.prototype.info = function (msg) {\n        var categories = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            categories[_i - 1] = arguments[_i];\n        }\n        this._log.apply(this, [LoggerOptions_1.LogLevel.Info, msg, null, false].concat(categories));\n    };\n    AbstractCategoryLogger.prototype.warn = function (msg) {\n        var categories = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            categories[_i - 1] = arguments[_i];\n        }\n        this._log.apply(this, [LoggerOptions_1.LogLevel.Warn, msg, null, false].concat(categories));\n    };\n    AbstractCategoryLogger.prototype.error = function (msg, error) {\n        var categories = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            categories[_i - 2] = arguments[_i];\n        }\n        this._log.apply(this, [LoggerOptions_1.LogLevel.Error, msg, error, false].concat(categories));\n    };\n    AbstractCategoryLogger.prototype.fatal = function (msg, error) {\n        var categories = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            categories[_i - 2] = arguments[_i];\n        }\n        this._log.apply(this, [LoggerOptions_1.LogLevel.Fatal, msg, error, false].concat(categories));\n    };\n    AbstractCategoryLogger.prototype.resolved = function (msg, error) {\n        var categories = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            categories[_i - 2] = arguments[_i];\n        }\n        this._log.apply(this, [LoggerOptions_1.LogLevel.Error, msg, error, true].concat(categories));\n    };\n    AbstractCategoryLogger.prototype.log = function (level, msg, error) {\n        var categories = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            categories[_i - 3] = arguments[_i];\n        }\n        this._log.apply(this, [level, msg, error, false].concat(categories));\n    };\n    AbstractCategoryLogger.prototype.tracec = function (msg) {\n        var categories = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            categories[_i - 1] = arguments[_i];\n        }\n        this._logc.apply(this, [LoggerOptions_1.LogLevel.Trace, msg, function () { return null; }, false].concat(categories));\n    };\n    AbstractCategoryLogger.prototype.debugc = function (msg) {\n        var categories = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            categories[_i - 1] = arguments[_i];\n        }\n        this._logc.apply(this, [LoggerOptions_1.LogLevel.Debug, msg, function () { return null; }, false].concat(categories));\n    };\n    AbstractCategoryLogger.prototype.infoc = function (msg) {\n        var categories = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            categories[_i - 1] = arguments[_i];\n        }\n        this._logc.apply(this, [LoggerOptions_1.LogLevel.Info, msg, function () { return null; }, false].concat(categories));\n    };\n    AbstractCategoryLogger.prototype.warnc = function (msg) {\n        var categories = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            categories[_i - 1] = arguments[_i];\n        }\n        this._logc.apply(this, [LoggerOptions_1.LogLevel.Warn, msg, function () { return null; }, false].concat(categories));\n    };\n    AbstractCategoryLogger.prototype.errorc = function (msg, error) {\n        var categories = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            categories[_i - 2] = arguments[_i];\n        }\n        this._logc.apply(this, [LoggerOptions_1.LogLevel.Error, msg, error, false].concat(categories));\n    };\n    AbstractCategoryLogger.prototype.fatalc = function (msg, error) {\n        var categories = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            categories[_i - 2] = arguments[_i];\n        }\n        this._logc.apply(this, [LoggerOptions_1.LogLevel.Fatal, msg, error, false].concat(categories));\n    };\n    AbstractCategoryLogger.prototype.resolvedc = function (msg, error) {\n        var categories = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            categories[_i - 2] = arguments[_i];\n        }\n        this._logc.apply(this, [LoggerOptions_1.LogLevel.Error, msg, error, true].concat(categories));\n    };\n    AbstractCategoryLogger.prototype.logc = function (level, msg, error) {\n        var categories = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            categories[_i - 3] = arguments[_i];\n        }\n        this._logc.apply(this, [level, msg, error, false].concat(categories));\n    };\n    AbstractCategoryLogger.prototype.getRootCategory = function () {\n        return this.rootCategory;\n    };\n    AbstractCategoryLogger.prototype.createDefaultLogMessage = function (msg) {\n        return MessageUtils_1.MessageFormatUtils.renderDefaultMessage(msg, true);\n    };\n    AbstractCategoryLogger.prototype._log = function (level, msg, error, resolved) {\n        if (error === void 0) { error = null; }\n        if (resolved === void 0) { resolved = false; }\n        var categories = [];\n        for (var _i = 4; _i < arguments.length; _i++) {\n            categories[_i - 4] = arguments[_i];\n        }\n        this._logInternal.apply(this, [level, function () { return msg; }, function () { return error; }, resolved].concat(categories));\n    };\n    AbstractCategoryLogger.prototype._logc = function (level, msg, error, resolved) {\n        if (resolved === void 0) { resolved = false; }\n        var categories = [];\n        for (var _i = 4; _i < arguments.length; _i++) {\n            categories[_i - 4] = arguments[_i];\n        }\n        this._logInternal.apply(this, [level, msg, error, resolved].concat(categories));\n    };\n    AbstractCategoryLogger.prototype._logInternal = function (level, msg, error, resolved) {\n        var _this = this;\n        var categories = [];\n        for (var _i = 4; _i < arguments.length; _i++) {\n            categories[_i - 4] = arguments[_i];\n        }\n        var logCategories;\n        // Log root category by default if none present\n        if (categories !== undefined && categories.length > 0) {\n            logCategories = categories;\n        }\n        else {\n            logCategories = [];\n            logCategories.push(this.rootCategory);\n        }\n        var _loop_1 = function (i) {\n            var category = logCategories[i];\n            if (category == null) {\n                throw new Error(\"Cannot have a null element within categories, at index=\" + i);\n            }\n            var settings = this_1.runtimeSettings.getCategorySettings(category);\n            if (settings == null) {\n                throw new Error(\"Category with path: \" + category.getCategoryPath() + \" is not registered with this logger, maybe \" +\n                    \"you registered it with a different root logger?\");\n            }\n            if (settings.logLevel <= level) {\n                var actualError = error != null ? error() : null;\n                if (actualError == null) {\n                    var logMessage = new CategoryLogMessageImpl(msg(), actualError, logCategories, new Date(), level, settings.logFormat, true);\n                    logMessage.resolvedErrorMessage = resolved;\n                    this_1.allMessages.addTail(logMessage);\n                    this_1.processMessages();\n                }\n                else {\n                    var logMessage_1 = new CategoryLogMessageImpl(msg(), actualError, logCategories, new Date(), level, settings.logFormat, false);\n                    logMessage_1.resolvedErrorMessage = resolved;\n                    this_1.allMessages.addTail(logMessage_1);\n                    MessageUtils_1.MessageFormatUtils.renderError(actualError).then(function (stack) {\n                        logMessage_1.setErrorAsStack(stack);\n                        logMessage_1.setReady(true);\n                        _this.processMessages();\n                    });\n                }\n                return \"break\";\n            }\n        };\n        var this_1 = this;\n        // Get the runtime levels for given categories. If their level is lower than given level, we log.\n        // In addition we pass along which category/categories we log this statement for.\n        for (var i = 0; i < logCategories.length; i++) {\n            var state_1 = _loop_1(i);\n            if (state_1 === \"break\")\n                break;\n        }\n    };\n    AbstractCategoryLogger.prototype.processMessages = function () {\n        // Basically we wait until errors are resolved (those messages\n        // may not be ready).\n        var msgs = this.allMessages;\n        if (msgs.getSize() > 0) {\n            do {\n                var msg = msgs.getHead();\n                if (msg != null) {\n                    if (!msg.isReady()) {\n                        break;\n                    }\n                    msgs.removeHead();\n                    this.doLog(msg);\n                }\n            } while (msgs.getSize() > 0);\n        }\n    };\n    return AbstractCategoryLogger;\n}());\nexports.AbstractCategoryLogger = AbstractCategoryLogger;\n//# sourceMappingURL=AbstractCategoryLogger.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar LoggerOptions_1 = require(\"../LoggerOptions\");\nvar AbstractCategoryLogger_1 = require(\"./AbstractCategoryLogger\");\n/**\n * Simple logger, that logs to the console. If the console is unavailable will throw an exception.\n */\nvar CategoryConsoleLoggerImpl = (function (_super) {\n    __extends(CategoryConsoleLoggerImpl, _super);\n    function CategoryConsoleLoggerImpl(rootCategory, runtimeSettings) {\n        return _super.call(this, rootCategory, runtimeSettings) || this;\n    }\n    CategoryConsoleLoggerImpl.prototype.doLog = function (msg) {\n        var fullMsg = this.createDefaultLogMessage(msg);\n        if (console !== undefined) {\n            var logged = false;\n            /* tslint:disable:no-console */\n            switch (msg.getLevel()) {\n                case LoggerOptions_1.LogLevel.Trace:\n                    // Don't try trace we don't want stacks\n                    break;\n                case LoggerOptions_1.LogLevel.Debug:\n                    if (console.debug) {\n                        console.debug(fullMsg);\n                        logged = true;\n                    }\n                    break;\n                case LoggerOptions_1.LogLevel.Info:\n                    if (console.info) {\n                        console.info(fullMsg);\n                        logged = true;\n                    }\n                    break;\n                case LoggerOptions_1.LogLevel.Warn:\n                    if (console.warn) {\n                        console.warn(fullMsg);\n                        logged = true;\n                    }\n                    break;\n                case LoggerOptions_1.LogLevel.Error:\n                case LoggerOptions_1.LogLevel.Fatal:\n                    if (console.error) {\n                        console.error(fullMsg);\n                        logged = true;\n                    }\n                    break;\n                default:\n                    throw new Error(\"Unsupported level: \" + msg.getLevel());\n            }\n            if (!logged) {\n                console.log(fullMsg);\n            }\n        }\n        else {\n            throw new Error(\"Console is not defined, cannot log msg: \" + fullMsg);\n        }\n    };\n    return CategoryConsoleLoggerImpl;\n}(AbstractCategoryLogger_1.AbstractCategoryLogger));\nexports.CategoryConsoleLoggerImpl = CategoryConsoleLoggerImpl;\n//# sourceMappingURL=CategoryConsoleLoggerImpl.js.map","\"use strict\";\n/**\n * Delegate logger, delegates logging to given logger (constructor).\n */\nvar CategoryDelegateLoggerImpl = (function () {\n    function CategoryDelegateLoggerImpl(delegate) {\n        this._delegate = delegate;\n    }\n    Object.defineProperty(CategoryDelegateLoggerImpl.prototype, \"delegate\", {\n        get: function () {\n            return this._delegate;\n        },\n        set: function (value) {\n            this._delegate = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CategoryDelegateLoggerImpl.prototype.trace = function (msg) {\n        var categories = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            categories[_i - 1] = arguments[_i];\n        }\n        (_a = this._delegate).trace.apply(_a, [msg].concat(categories));\n        var _a;\n    };\n    CategoryDelegateLoggerImpl.prototype.debug = function (msg) {\n        var categories = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            categories[_i - 1] = arguments[_i];\n        }\n        (_a = this._delegate).debug.apply(_a, [msg].concat(categories));\n        var _a;\n    };\n    CategoryDelegateLoggerImpl.prototype.info = function (msg) {\n        var categories = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            categories[_i - 1] = arguments[_i];\n        }\n        (_a = this._delegate).info.apply(_a, [msg].concat(categories));\n        var _a;\n    };\n    CategoryDelegateLoggerImpl.prototype.warn = function (msg) {\n        var categories = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            categories[_i - 1] = arguments[_i];\n        }\n        (_a = this._delegate).warn.apply(_a, [msg].concat(categories));\n        var _a;\n    };\n    CategoryDelegateLoggerImpl.prototype.error = function (msg, error) {\n        var categories = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            categories[_i - 2] = arguments[_i];\n        }\n        (_a = this._delegate).error.apply(_a, [msg, error].concat(categories));\n        var _a;\n    };\n    CategoryDelegateLoggerImpl.prototype.fatal = function (msg, error) {\n        var categories = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            categories[_i - 2] = arguments[_i];\n        }\n        (_a = this._delegate).fatal.apply(_a, [msg, error].concat(categories));\n        var _a;\n    };\n    CategoryDelegateLoggerImpl.prototype.resolved = function (msg, error) {\n        var categories = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            categories[_i - 2] = arguments[_i];\n        }\n        (_a = this._delegate).resolved.apply(_a, [msg, error].concat(categories));\n        var _a;\n    };\n    CategoryDelegateLoggerImpl.prototype.log = function (level, msg, error) {\n        var categories = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            categories[_i - 3] = arguments[_i];\n        }\n        (_a = this._delegate).log.apply(_a, [level, msg, error].concat(categories));\n        var _a;\n    };\n    CategoryDelegateLoggerImpl.prototype.tracec = function (msg) {\n        var categories = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            categories[_i - 1] = arguments[_i];\n        }\n        (_a = this._delegate).tracec.apply(_a, [msg].concat(categories));\n        var _a;\n    };\n    CategoryDelegateLoggerImpl.prototype.debugc = function (msg) {\n        var categories = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            categories[_i - 1] = arguments[_i];\n        }\n        (_a = this._delegate).debugc.apply(_a, [msg].concat(categories));\n        var _a;\n    };\n    CategoryDelegateLoggerImpl.prototype.infoc = function (msg) {\n        var categories = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            categories[_i - 1] = arguments[_i];\n        }\n        (_a = this._delegate).infoc.apply(_a, [msg].concat(categories));\n        var _a;\n    };\n    CategoryDelegateLoggerImpl.prototype.warnc = function (msg) {\n        var categories = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            categories[_i - 1] = arguments[_i];\n        }\n        (_a = this._delegate).warnc.apply(_a, [msg].concat(categories));\n        var _a;\n    };\n    CategoryDelegateLoggerImpl.prototype.errorc = function (msg, error) {\n        var categories = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            categories[_i - 2] = arguments[_i];\n        }\n        (_a = this._delegate).errorc.apply(_a, [msg, error].concat(categories));\n        var _a;\n    };\n    CategoryDelegateLoggerImpl.prototype.fatalc = function (msg, error) {\n        var categories = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            categories[_i - 2] = arguments[_i];\n        }\n        (_a = this._delegate).fatalc.apply(_a, [msg, error].concat(categories));\n        var _a;\n    };\n    CategoryDelegateLoggerImpl.prototype.resolvedc = function (msg, error) {\n        var categories = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            categories[_i - 2] = arguments[_i];\n        }\n        (_a = this._delegate).resolvedc.apply(_a, [msg, error].concat(categories));\n        var _a;\n    };\n    CategoryDelegateLoggerImpl.prototype.logc = function (level, msg, error) {\n        var categories = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            categories[_i - 3] = arguments[_i];\n        }\n        (_a = this._delegate).logc.apply(_a, [level, msg, error].concat(categories));\n        var _a;\n    };\n    return CategoryDelegateLoggerImpl;\n}());\nexports.CategoryDelegateLoggerImpl = CategoryDelegateLoggerImpl;\n//# sourceMappingURL=CategoryDelegateLoggerImpl.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar ExtensionHelper_1 = require(\"../../extension/ExtensionHelper\");\nvar AbstractCategoryLogger_1 = require(\"./AbstractCategoryLogger\");\n/**\n * This class should not be used directly, it is used for communication with the extension only.\n */\nvar CategoryExtensionLoggerImpl = (function (_super) {\n    __extends(CategoryExtensionLoggerImpl, _super);\n    function CategoryExtensionLoggerImpl(rootCategory, runtimeSettings) {\n        return _super.call(this, rootCategory, runtimeSettings) || this;\n    }\n    CategoryExtensionLoggerImpl.prototype.doLog = function (msg) {\n        if (typeof window !== \"undefined\") {\n            ExtensionHelper_1.ExtensionHelper.sendCategoryLogMessage(msg);\n        }\n        else {\n            /* tslint:disable:no-console */\n            console.log(\"window is not available, you must be running in a browser for this. Dropped message.\");\n        }\n    };\n    return CategoryExtensionLoggerImpl;\n}(AbstractCategoryLogger_1.AbstractCategoryLogger));\nexports.CategoryExtensionLoggerImpl = CategoryExtensionLoggerImpl;\n//# sourceMappingURL=CategoryExtensionLoggerImpl.js.map","\"use strict\";\nvar LoggerOptions_1 = require(\"../LoggerOptions\");\nvar CategoryService_1 = require(\"./CategoryService\");\n/**\n * Category for use with categorized logging.\n * At minimum you need one category, which will serve as the root category.\n * You can create child categories (like a tree). You can have multiple root\n * categories.\n */\nvar Category = (function () {\n    function Category(name, parent) {\n        if (parent === void 0) { parent = null; }\n        this._children = [];\n        this._logLevel = LoggerOptions_1.LogLevel.Error;\n        if (name.indexOf(\"#\") !== -1) {\n            throw new Error(\"Cannot use # in a name of a Category\");\n        }\n        this._id = Category.nextId();\n        this._name = name;\n        this._parent = parent;\n        if (this._parent != null) {\n            this._parent._children.push(this);\n        }\n        CategoryService_1.CategoryServiceImpl.getInstance().registerCategory(this);\n    }\n    Object.defineProperty(Category.prototype, \"name\", {\n        get: function () {\n            return this._name;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Category.prototype, \"parent\", {\n        get: function () {\n            return this._parent;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Category.prototype, \"children\", {\n        get: function () {\n            return this._children;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Category.prototype, \"logLevel\", {\n        get: function () {\n            return this._logLevel;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Category.prototype.getCategoryPath = function () {\n        var result = this.name;\n        var cat = this.parent;\n        while (cat != null) {\n            result = cat.name + \"#\" + result;\n            cat = cat.parent;\n        }\n        return result;\n    };\n    Object.defineProperty(Category.prototype, \"id\", {\n        /**\n         * Returns the id for this category (this\n         * is for internal purposes only).\n         * @returns {number} Id\n         */\n        get: function () {\n            return this._id;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Category.nextId = function () {\n        return Category.currentId++;\n    };\n    return Category;\n}());\nCategory.currentId = 1;\nexports.Category = Category;\n//# sourceMappingURL=CategoryLogger.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AbstractCategoryLogger_1 = require(\"./AbstractCategoryLogger\");\n/**\n * Logger which buffers all messages, use with care due to possible high memory footprint.\n * Can be convenient in some cases. Call toString() for full output, or cast to this class\n * and call getMessages() to do something with it yourself.\n */\nvar CategoryMessageBufferLoggerImpl = (function (_super) {\n    __extends(CategoryMessageBufferLoggerImpl, _super);\n    function CategoryMessageBufferLoggerImpl() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.messages = [];\n        return _this;\n    }\n    CategoryMessageBufferLoggerImpl.prototype.getMessages = function () {\n        return this.messages;\n    };\n    CategoryMessageBufferLoggerImpl.prototype.toString = function () {\n        return this.messages.map(function (msg) {\n            return msg;\n        }).join(\"\\n\");\n    };\n    CategoryMessageBufferLoggerImpl.prototype.doLog = function (msg) {\n        var fullMsg = this.createDefaultLogMessage(msg);\n        this.messages.push(fullMsg);\n    };\n    return CategoryMessageBufferLoggerImpl;\n}(AbstractCategoryLogger_1.AbstractCategoryLogger));\nexports.CategoryMessageBufferLoggerImpl = CategoryMessageBufferLoggerImpl;\n//# sourceMappingURL=CategoryMessageBufferImpl.js.map","\"use strict\";\nvar DataStructures_1 = require(\"../../utils/DataStructures\");\nvar LoggerOptions_1 = require(\"../LoggerOptions\");\nvar CategoryConsoleLoggerImpl_1 = require(\"./CategoryConsoleLoggerImpl\");\nvar CategoryDelegateLoggerImpl_1 = require(\"./CategoryDelegateLoggerImpl\");\nvar CategoryExtensionLoggerImpl_1 = require(\"./CategoryExtensionLoggerImpl\");\nvar CategoryMessageBufferImpl_1 = require(\"./CategoryMessageBufferImpl\");\nvar ExtensionHelper_1 = require(\"../../extension/ExtensionHelper\");\n/**\n * RuntimeSettings for a category, at runtime these are associated to a category.\n */\nvar CategoryRuntimeSettings = (function () {\n    function CategoryRuntimeSettings(category, logLevel, loggerType, logFormat, callBackLogger) {\n        if (logLevel === void 0) { logLevel = LoggerOptions_1.LogLevel.Error; }\n        if (loggerType === void 0) { loggerType = LoggerOptions_1.LoggerType.Console; }\n        if (logFormat === void 0) { logFormat = new LoggerOptions_1.CategoryLogFormat(); }\n        if (callBackLogger === void 0) { callBackLogger = null; }\n        this._category = category;\n        this._logLevel = logLevel;\n        this._loggerType = loggerType;\n        this._logFormat = logFormat;\n        this._callBackLogger = callBackLogger;\n    }\n    Object.defineProperty(CategoryRuntimeSettings.prototype, \"category\", {\n        get: function () {\n            return this._category;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CategoryRuntimeSettings.prototype, \"logLevel\", {\n        get: function () {\n            return this._logLevel;\n        },\n        set: function (value) {\n            this._logLevel = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CategoryRuntimeSettings.prototype, \"loggerType\", {\n        get: function () {\n            return this._loggerType;\n        },\n        set: function (value) {\n            this._loggerType = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CategoryRuntimeSettings.prototype, \"logFormat\", {\n        get: function () {\n            return this._logFormat;\n        },\n        set: function (value) {\n            this._logFormat = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CategoryRuntimeSettings.prototype, \"callBackLogger\", {\n        get: function () {\n            return this._callBackLogger;\n        },\n        set: function (value) {\n            this._callBackLogger = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return CategoryRuntimeSettings;\n}());\nexports.CategoryRuntimeSettings = CategoryRuntimeSettings;\n/**\n * Default configuration, can be used to initially set a different default configuration\n * on the CategoryServiceFactory. This will be applied to all categories already registered (or\n * registered in the future). Can also be applied to one Category (and childs).\n */\nvar CategoryDefaultConfiguration = (function () {\n    /**\n     * Create a new instance\n     * @param logLevel Log level for all loggers, default is LogLevel.Error\n     * @param loggerType Where to log, default is LoggerType.Console\n     * @param logFormat What logging format to use, use default instance, for default values see CategoryLogFormat.\n     * @param callBackLogger Optional callback, if LoggerType.Custom is used as loggerType. In that case must return a new Logger instance.\n     *            It is recommended to extend AbstractCategoryLogger to make your custom logger.\n     */\n    function CategoryDefaultConfiguration(logLevel, loggerType, logFormat, callBackLogger) {\n        if (logLevel === void 0) { logLevel = LoggerOptions_1.LogLevel.Error; }\n        if (loggerType === void 0) { loggerType = LoggerOptions_1.LoggerType.Console; }\n        if (logFormat === void 0) { logFormat = new LoggerOptions_1.CategoryLogFormat(); }\n        if (callBackLogger === void 0) { callBackLogger = null; }\n        this._logLevel = logLevel;\n        this._loggerType = loggerType;\n        this._logFormat = logFormat;\n        this._callBackLogger = callBackLogger;\n        if (this._loggerType === LoggerOptions_1.LoggerType.Custom && this.callBackLogger === null) {\n            throw new Error(\"If you specify loggerType to be Custom, you must provide the callBackLogger argument\");\n        }\n    }\n    Object.defineProperty(CategoryDefaultConfiguration.prototype, \"logLevel\", {\n        get: function () {\n            return this._logLevel;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CategoryDefaultConfiguration.prototype, \"loggerType\", {\n        get: function () {\n            return this._loggerType;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CategoryDefaultConfiguration.prototype, \"logFormat\", {\n        get: function () {\n            return this._logFormat;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CategoryDefaultConfiguration.prototype, \"callBackLogger\", {\n        get: function () {\n            return this._callBackLogger;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CategoryDefaultConfiguration.prototype.copy = function () {\n        return new CategoryDefaultConfiguration(this.logLevel, this.loggerType, this.logFormat.copy(), this.callBackLogger);\n    };\n    return CategoryDefaultConfiguration;\n}());\nexports.CategoryDefaultConfiguration = CategoryDefaultConfiguration;\n/**\n * The service (only available as singleton) for all category related stuff as\n * retrieving, registering a logger. You should normally NOT use this,\n * instead use CategoryLoggerFactory which is meant for end users.\n */\nvar CategoryServiceImpl = (function () {\n    function CategoryServiceImpl() {\n        this._defaultConfig = new CategoryDefaultConfiguration();\n        // All registered root categories\n        this._rootCategories = [];\n        // Key of map is path of category\n        this._categoryRuntimeSettings = new DataStructures_1.SimpleMap();\n        // Same, but these are never changed and are used to restore the previous state by the CategoryLoggerControl.\n        this._categoryOriginalRuntimeSettings = new DataStructures_1.SimpleMap();\n        // Key is name of root logger.\n        this._rootLoggers = new DataStructures_1.SimpleMap();\n        // Private constructor\n        ExtensionHelper_1.ExtensionHelper.register();\n    }\n    CategoryServiceImpl.getInstance = function () {\n        // Load on-demand, to assure webpack ordering of module usage doesn't screw things over\n        // for us when we accidentally change the order.\n        if (CategoryServiceImpl._INSTANCE === null) {\n            CategoryServiceImpl._INSTANCE = new CategoryServiceImpl();\n        }\n        return CategoryServiceImpl._INSTANCE;\n    };\n    CategoryServiceImpl.prototype.getLogger = function (root) {\n        if (!this.rootCategoryExists(root)) {\n            throw new Error(\"Given category \" + root.name + \" is not registered as a root category. You must use the root category to retrieve a logger.\");\n        }\n        var pair = this._rootLoggers.get(root.name);\n        if (pair != null) {\n            return pair.y;\n        }\n        var logger = new CategoryDelegateLoggerImpl_1.CategoryDelegateLoggerImpl(this.createRootLogger(root));\n        this._rootLoggers.put(root.name, new DataStructures_1.TuplePair(root, logger));\n        return logger;\n    };\n    /**\n     * Clears everything, including a default configuration you may have set.\n     * After this you need to re-register your categories etc.\n     */\n    CategoryServiceImpl.prototype.clear = function () {\n        this._rootCategories = [];\n        this._categoryRuntimeSettings.clear();\n        this._categoryOriginalRuntimeSettings.clear();\n        this._rootLoggers.clear();\n        this.setDefaultConfiguration(new CategoryDefaultConfiguration());\n    };\n    CategoryServiceImpl.prototype.getCategorySettings = function (category) {\n        return this._categoryRuntimeSettings.get(category.getCategoryPath());\n    };\n    CategoryServiceImpl.prototype.getOriginalCategorySettings = function (category) {\n        return this._categoryOriginalRuntimeSettings.get(category.getCategoryPath());\n    };\n    /**\n     * Set the default configuration. New root loggers created get this\n     * applied. If you want to reset all current loggers to have this\n     * applied as well, pass in reset=true (the default is false). All\n     * categories will be reset then as well.\n     * @param config New config\n     * @param reset Defaults to false. Set to true to reset all loggers and current runtimesettings.\n     */\n    CategoryServiceImpl.prototype.setDefaultConfiguration = function (config, reset) {\n        var _this = this;\n        if (reset === void 0) { reset = false; }\n        this._defaultConfig = config;\n        if (reset) {\n            // Reset all runtimesettings (this will reset it for roots & children all at once).\n            var newRuntimeSettings_1 = new DataStructures_1.SimpleMap();\n            var newOriginalRuntimeSettings_1 = new DataStructures_1.SimpleMap();\n            this._categoryRuntimeSettings.keys().forEach(function (key) {\n                var setting = _this._categoryRuntimeSettings.get(key);\n                if (setting !== null) {\n                    var defSettings = _this._defaultConfig.copy();\n                    var settings = new CategoryRuntimeSettings(setting.category, defSettings.logLevel, defSettings.loggerType, defSettings.logFormat, defSettings.callBackLogger);\n                    var defSettingsOriginal = _this._defaultConfig.copy();\n                    var settingsOriginal = new CategoryRuntimeSettings(setting.category, defSettingsOriginal.logLevel, defSettingsOriginal.loggerType, defSettingsOriginal.logFormat, defSettingsOriginal.callBackLogger);\n                    newRuntimeSettings_1.put(key, settings);\n                    newOriginalRuntimeSettings_1.put(key, settingsOriginal);\n                }\n                else {\n                    throw new Error(\"No setting associated with key=\" + key);\n                }\n            });\n            this._categoryRuntimeSettings.clear();\n            this._categoryOriginalRuntimeSettings.clear();\n            this._categoryRuntimeSettings = newRuntimeSettings_1;\n            this._categoryOriginalRuntimeSettings = newOriginalRuntimeSettings_1;\n            // Now initialize a new logger and put it on the delegate. Loggers we give out\n            // are guaranteed to be wrapped inside the delegate logger.\n            this._rootLoggers.values().forEach(function (pair) {\n                // Set the new logger type\n                pair.y.delegate = _this.createRootLogger(pair.x);\n            });\n        }\n    };\n    /**\n     * Set new configuration settings for a category (and possibly its child categories)\n     * @param config Config\n     * @param category Category\n     * @param applyChildren True to apply to child categories, defaults to false.\n     * @param resetRootLogger Defaults to false. If set to true and if category is a root category it will reset the root logger.\n     */\n    CategoryServiceImpl.prototype.setConfigurationCategory = function (config, category, applyChildren, resetRootLogger) {\n        var _this = this;\n        if (applyChildren === void 0) { applyChildren = false; }\n        if (resetRootLogger === void 0) { resetRootLogger = false; }\n        var categorySettings = this.getCategorySettings(category);\n        if (categorySettings === null) {\n            throw new Error(\"Given category is not registered: \" + category.name);\n        }\n        categorySettings.logLevel = config.logLevel;\n        categorySettings.loggerType = config.loggerType;\n        categorySettings.logFormat = config.logFormat;\n        categorySettings.callBackLogger = config.callBackLogger;\n        // Apply the settings to children recursive if requested\n        if (applyChildren) {\n            category.children.forEach(function (child) {\n                _this.setConfigurationCategory(config, child, applyChildren, resetRootLogger);\n            });\n        }\n        if (resetRootLogger && this.rootCategoryExists(category)) {\n            var tupleLogger = this._rootLoggers.get(category.name);\n            if (tupleLogger !== null) {\n                tupleLogger.y.delegate = this.createRootLogger(tupleLogger.x);\n            }\n        }\n    };\n    CategoryServiceImpl.prototype.registerCategory = function (category) {\n        if (category == null || category === undefined) {\n            throw new Error(\"Category CANNOT be null\");\n        }\n        var parent = category.parent;\n        if (parent == null) {\n            // Register the root category\n            for (var _i = 0, _a = this._rootCategories; _i < _a.length; _i++) {\n                var rootCategory = _a[_i];\n                if (rootCategory.name === category.name) {\n                    throw new Error(\"Cannot add this rootCategory with name: \" + category.name + \", another root category is already registered with that name.\");\n                }\n            }\n            this._rootCategories.push(category);\n        }\n        this.initializeRuntimeSettingsForCategory(category);\n    };\n    /**\n     * Used to enable integration with chrome extension. Do not use manually, the\n     * extension and the logger framework deal with this.\n     */\n    CategoryServiceImpl.prototype.enableExtensionIntegration = function () {\n        var _this = this;\n        this._rootLoggers.values().forEach(function (pair) {\n            // Set the new logger type if needed.\n            var delegateLogger = pair.y;\n            if (!(delegateLogger instanceof CategoryExtensionLoggerImpl_1.CategoryExtensionLoggerImpl)) {\n                /* tslint:disable:no-console */\n                console.log(\"Reconfiguring root logger for root category: \" + pair.x.name);\n                /* tslint:enable:no-console */\n                pair.y.delegate = new CategoryExtensionLoggerImpl_1.CategoryExtensionLoggerImpl(pair.x, _this);\n            }\n        });\n    };\n    /**\n     * Return all root categories currently registered.\n     */\n    CategoryServiceImpl.prototype.getRootCategories = function () {\n        return this._rootCategories.slice(0);\n    };\n    /**\n     * Return Category by id\n     * @param id The id of the category to find\n     * @returns {Category} or null if not found\n     */\n    CategoryServiceImpl.prototype.getCategoryById = function (id) {\n        var result = this._categoryRuntimeSettings.values().filter(function (cat) { return cat.category.id === id; })\n            .map(function (cat) { return cat.category; });\n        if (result.length === 1) {\n            return result[0];\n        }\n        return null;\n    };\n    CategoryServiceImpl.prototype.initializeRuntimeSettingsForCategory = function (category) {\n        var settings = this._categoryRuntimeSettings.get(category.getCategoryPath());\n        if (settings !== null) {\n            throw new Error(\"Category with path: \" + category.getCategoryPath() + \" is already registered?\");\n        }\n        // Passing the callback is not really needed for child categories, but don't really care.\n        var defSettings = this._defaultConfig.copy();\n        settings = new CategoryRuntimeSettings(category, defSettings.logLevel, defSettings.loggerType, defSettings.logFormat, defSettings.callBackLogger);\n        var defSettingsOriginal = this._defaultConfig.copy();\n        var settingsOriginal = new CategoryRuntimeSettings(category, defSettingsOriginal.logLevel, defSettingsOriginal.loggerType, defSettingsOriginal.logFormat, defSettingsOriginal.callBackLogger);\n        this._categoryRuntimeSettings.put(category.getCategoryPath(), settings);\n        this._categoryOriginalRuntimeSettings.put(category.getCategoryPath(), settingsOriginal);\n    };\n    CategoryServiceImpl.prototype.rootCategoryExists = function (rootCategory) {\n        if (rootCategory == null || rootCategory === undefined) {\n            throw new Error(\"Root category CANNOT be null\");\n        }\n        var parent = rootCategory.parent;\n        if (parent != null) {\n            throw new Error(\"Parent must be null for a root category\");\n        }\n        return this._rootCategories.indexOf(rootCategory) !== -1;\n    };\n    CategoryServiceImpl.prototype.createRootLogger = function (category) {\n        // Default is always a console logger\n        switch (this._defaultConfig.loggerType) {\n            case LoggerOptions_1.LoggerType.Console:\n                return new CategoryConsoleLoggerImpl_1.CategoryConsoleLoggerImpl(category, this);\n            case LoggerOptions_1.LoggerType.MessageBuffer:\n                return new CategoryMessageBufferImpl_1.CategoryMessageBufferLoggerImpl(category, this);\n            case LoggerOptions_1.LoggerType.Custom:\n                if (this._defaultConfig.callBackLogger == null) {\n                    throw new Error(\"Cannot create custom logger, custom callback is null\");\n                }\n                else {\n                    return this._defaultConfig.callBackLogger(category, this);\n                }\n            default:\n                throw new Error(\"Cannot create a Logger for LoggerType: \" + this._defaultConfig.loggerType);\n        }\n    };\n    return CategoryServiceImpl;\n}());\n// Singleton category service, used by CategoryServiceFactory as well as Categories.\n// Loaded on demand. Do NOT change as webpack may pack things in wrong order otherwise.\nCategoryServiceImpl._INSTANCE = null;\nexports.CategoryServiceImpl = CategoryServiceImpl;\n/**\n * Categorized service for logging, where logging is bound to categories which\n * can log horizontally through specific application logic (services, group(s) of components etc).\n * For the standard way of logging like most frameworks do these days, use LFService instead.\n * If you want fine grained control to divide sections of your application in\n * logical units to enable/disable logging for, this is the service you want to use instead.\n * Also for this type a browser plugin will be available.\n */\nvar CategoryServiceFactory = (function () {\n    function CategoryServiceFactory() {\n        // Private constructor.\n    }\n    /**\n     * Return a CategoryLogger for given ROOT category (thus has no parent).\n     * You can only retrieve loggers for their root, when logging\n     * you specify to log for what (child)categories.\n     * @param root Category root (has no parent)\n     * @returns {CategoryLogger}\n     */\n    CategoryServiceFactory.getLogger = function (root) {\n        return CategoryServiceImpl.getInstance().getLogger(root);\n    };\n    /**\n     * Clears everything, any registered (root)categories and loggers\n     * are discarded. Resets to default configuration.\n     */\n    CategoryServiceFactory.clear = function () {\n        return CategoryServiceImpl.getInstance().clear();\n    };\n    /**\n     * Set the default configuration. New root loggers created get this\n     * applied. If you want to reset all current loggers to have this\n     * applied as well, pass in reset=true (the default is false). All\n     * categories runtimesettings will be reset then as well.\n     * @param config The new default configuration\n     * @param reset If true, will reset *all* runtimesettings for all loggers/categories to these.\n     */\n    CategoryServiceFactory.setDefaultConfiguration = function (config, reset) {\n        if (reset === void 0) { reset = false; }\n        CategoryServiceImpl.getInstance().setDefaultConfiguration(config, reset);\n    };\n    /**\n     * Set new configuration settings for a category (and possibly its child categories)\n     * @param config Config\n     * @param category Category\n     * @param applyChildren True to apply to child categories, defaults to false.\n     * @param resetRootLogger Defaults to false. If set to true and if category is a root category it will reset the root logger.\n     */\n    CategoryServiceFactory.setConfigurationCategory = function (config, category, applyChildren, resetRootLogger) {\n        if (applyChildren === void 0) { applyChildren = false; }\n        if (resetRootLogger === void 0) { resetRootLogger = false; }\n        CategoryServiceImpl.getInstance().setConfigurationCategory(config, category, applyChildren, resetRootLogger);\n    };\n    /**\n     * Return RuntimeSettings to retrieve information about\n     * RuntimeSettings for categories.\n     * @returns {RuntimeSettings}\n     */\n    CategoryServiceFactory.getRuntimeSettings = function () {\n        return CategoryServiceImpl.getInstance();\n    };\n    return CategoryServiceFactory;\n}());\nexports.CategoryServiceFactory = CategoryServiceFactory;\n//# sourceMappingURL=CategoryService.js.map","\"use strict\";\nvar LoggerOptions_1 = require(\"../LoggerOptions\");\nvar DataStructures_1 = require(\"../../utils/DataStructures\");\nvar MessageUtils_1 = require(\"../../utils/MessageUtils\");\nvar LogMessageInternalImpl = (function () {\n    function LogMessageInternalImpl(loggerName, message, errorAsStack, error, logGroupRule, date, level, ready) {\n        this._errorAsStack = null;\n        this._error = null;\n        this._loggerName = loggerName;\n        this._message = message;\n        this._errorAsStack = errorAsStack;\n        this._error = error;\n        this._logGroupRule = logGroupRule;\n        this._date = date;\n        this._level = level;\n        this._ready = ready;\n    }\n    Object.defineProperty(LogMessageInternalImpl.prototype, \"loggerName\", {\n        get: function () {\n            return this._loggerName;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LogMessageInternalImpl.prototype, \"message\", {\n        get: function () {\n            return this._message;\n        },\n        set: function (value) {\n            this._message = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LogMessageInternalImpl.prototype, \"errorAsStack\", {\n        get: function () {\n            return this._errorAsStack;\n        },\n        set: function (value) {\n            this._errorAsStack = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LogMessageInternalImpl.prototype, \"error\", {\n        get: function () {\n            return this._error;\n        },\n        set: function (value) {\n            this._error = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LogMessageInternalImpl.prototype, \"logGroupRule\", {\n        get: function () {\n            return this._logGroupRule;\n        },\n        set: function (value) {\n            this._logGroupRule = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LogMessageInternalImpl.prototype, \"date\", {\n        get: function () {\n            return this._date;\n        },\n        set: function (value) {\n            this._date = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LogMessageInternalImpl.prototype, \"level\", {\n        get: function () {\n            return this._level;\n        },\n        set: function (value) {\n            this._level = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LogMessageInternalImpl.prototype, \"ready\", {\n        get: function () {\n            return this._ready;\n        },\n        set: function (value) {\n            this._ready = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return LogMessageInternalImpl;\n}());\n/**\n * Abstract base logger, extend to easily implement a custom logger that\n * logs wherever you want. You only need to implement doLog(msg: LogMessage) and\n * log that somewhere (it will contain format and everything else).\n */\nvar AbstractLogger = (function () {\n    function AbstractLogger(name, logGroupRuntimeSettings) {\n        this._allMessages = new DataStructures_1.LinkedList();\n        this._open = true;\n        this._name = name;\n        this._logGroupRuntimeSettings = logGroupRuntimeSettings;\n    }\n    Object.defineProperty(AbstractLogger.prototype, \"name\", {\n        get: function () {\n            return this._name;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    AbstractLogger.prototype.trace = function (msg, error) {\n        if (error === void 0) { error = null; }\n        this._log(LoggerOptions_1.LogLevel.Trace, msg, error);\n    };\n    AbstractLogger.prototype.debug = function (msg, error) {\n        if (error === void 0) { error = null; }\n        this._log(LoggerOptions_1.LogLevel.Debug, msg, error);\n    };\n    AbstractLogger.prototype.info = function (msg, error) {\n        if (error === void 0) { error = null; }\n        this._log(LoggerOptions_1.LogLevel.Info, msg, error);\n    };\n    AbstractLogger.prototype.warn = function (msg, error) {\n        if (error === void 0) { error = null; }\n        this._log(LoggerOptions_1.LogLevel.Warn, msg, error);\n    };\n    AbstractLogger.prototype.error = function (msg, error) {\n        if (error === void 0) { error = null; }\n        this._log(LoggerOptions_1.LogLevel.Error, msg, error);\n    };\n    AbstractLogger.prototype.fatal = function (msg, error) {\n        if (error === void 0) { error = null; }\n        this._log(LoggerOptions_1.LogLevel.Fatal, msg, error);\n    };\n    AbstractLogger.prototype.tracec = function (msg, error) {\n        this._logc(LoggerOptions_1.LogLevel.Trace, msg, error);\n    };\n    AbstractLogger.prototype.debugc = function (msg, error) {\n        this._logc(LoggerOptions_1.LogLevel.Debug, msg, error);\n    };\n    AbstractLogger.prototype.infoc = function (msg, error) {\n        this._logc(LoggerOptions_1.LogLevel.Info, msg, error);\n    };\n    AbstractLogger.prototype.warnc = function (msg, error) {\n        this._logc(LoggerOptions_1.LogLevel.Warn, msg, error);\n    };\n    AbstractLogger.prototype.errorc = function (msg, error) {\n        this._logc(LoggerOptions_1.LogLevel.Error, msg, error);\n    };\n    AbstractLogger.prototype.fatalc = function (msg, error) {\n        this._logc(LoggerOptions_1.LogLevel.Fatal, msg, error);\n    };\n    AbstractLogger.prototype.isTraceEnabled = function () {\n        return this._logGroupRuntimeSettings.level === LoggerOptions_1.LogLevel.Trace;\n    };\n    AbstractLogger.prototype.isDebugEnabled = function () {\n        return this._logGroupRuntimeSettings.level <= LoggerOptions_1.LogLevel.Debug;\n    };\n    AbstractLogger.prototype.isInfoEnabled = function () {\n        return this._logGroupRuntimeSettings.level <= LoggerOptions_1.LogLevel.Info;\n    };\n    AbstractLogger.prototype.isWarnEnabled = function () {\n        return this._logGroupRuntimeSettings.level <= LoggerOptions_1.LogLevel.Warn;\n    };\n    AbstractLogger.prototype.isErrorEnabled = function () {\n        return this._logGroupRuntimeSettings.level <= LoggerOptions_1.LogLevel.Error;\n    };\n    AbstractLogger.prototype.isFatalEnabled = function () {\n        return this._logGroupRuntimeSettings.level <= LoggerOptions_1.LogLevel.Fatal;\n    };\n    AbstractLogger.prototype.getLogLevel = function () {\n        return this._logGroupRuntimeSettings.level;\n    };\n    AbstractLogger.prototype.isOpen = function () {\n        return this._open;\n    };\n    AbstractLogger.prototype.close = function () {\n        this._open = false;\n        this._allMessages.clear();\n    };\n    AbstractLogger.prototype.createDefaultLogMessage = function (msg) {\n        return MessageUtils_1.MessageFormatUtils.renderDefaultLog4jMessage(msg, true);\n    };\n    AbstractLogger.prototype._log = function (level, msg, error) {\n        if (error === void 0) { error = null; }\n        if (this._open && this._logGroupRuntimeSettings.level <= level) {\n            this._allMessages.addTail(this.createMessage(level, msg, new Date(), error));\n            this.processMessages();\n        }\n    };\n    AbstractLogger.prototype._logc = function (level, msg, error) {\n        if (this._open && this._logGroupRuntimeSettings.level <= level) {\n            this._allMessages.addTail(this.createMessage(level, msg(), new Date(), error !== undefined && error !== null ? error() : null));\n            this.processMessages();\n        }\n    };\n    AbstractLogger.prototype.createMessage = function (level, msg, date, error) {\n        var _this = this;\n        if (error === void 0) { error = null; }\n        if (error !== null) {\n            var message_1 = new LogMessageInternalImpl(this._name, msg, null, error, this._logGroupRuntimeSettings.logGroupRule, date, level, false);\n            MessageUtils_1.MessageFormatUtils.renderError(error).then(function (stack) {\n                message_1.errorAsStack = stack;\n                message_1.ready = true;\n                _this.processMessages();\n            });\n            return message_1;\n        }\n        return new LogMessageInternalImpl(this._name, msg, null, error, this._logGroupRuntimeSettings.logGroupRule, date, level, true);\n    };\n    AbstractLogger.prototype.processMessages = function () {\n        // Basically we wait until errors are resolved (those messages\n        // may not be ready).\n        var msgs = this._allMessages;\n        if (msgs.getSize() > 0) {\n            do {\n                var msg = msgs.getHead();\n                if (msg != null) {\n                    if (!msg.ready) {\n                        break;\n                    }\n                    msgs.removeHead();\n                    // This can never be null normally, but strict null checking ...\n                    if (msg.message !== null) {\n                        this.doLog(msg);\n                    }\n                }\n            } while (msgs.getSize() > 0);\n        }\n    };\n    return AbstractLogger;\n}());\nexports.AbstractLogger = AbstractLogger;\n//# sourceMappingURL=AbstractLogger.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AbstractLogger_1 = require(\"./AbstractLogger\");\nvar LoggerOptions_1 = require(\"../LoggerOptions\");\n/**\n * Simple logger, that logs to the console. If the console is unavailable will throw exception.\n */\nvar ConsoleLoggerImpl = (function (_super) {\n    __extends(ConsoleLoggerImpl, _super);\n    function ConsoleLoggerImpl(name, logGroupRuntimeSettings) {\n        return _super.call(this, name, logGroupRuntimeSettings) || this;\n    }\n    ConsoleLoggerImpl.prototype.doLog = function (message) {\n        if (console !== undefined) {\n            var logged = false;\n            var logLevel = message.level;\n            var msg = this.createDefaultLogMessage(message);\n            /* tslint:disable:no-console */\n            switch (logLevel) {\n                case LoggerOptions_1.LogLevel.Trace:\n                    // Do not try trace we don't want a stack\n                    break;\n                case LoggerOptions_1.LogLevel.Debug:\n                    if (console.debug) {\n                        console.debug(msg);\n                        logged = true;\n                    }\n                    break;\n                case LoggerOptions_1.LogLevel.Info:\n                    if (console.info) {\n                        console.info(msg);\n                        logged = true;\n                    }\n                    break;\n                case LoggerOptions_1.LogLevel.Warn:\n                    if (console.warn) {\n                        console.warn(msg);\n                        logged = true;\n                    }\n                    break;\n                case LoggerOptions_1.LogLevel.Error:\n                case LoggerOptions_1.LogLevel.Fatal:\n                    if (console.error) {\n                        console.error(msg);\n                        logged = true;\n                    }\n                    break;\n                default:\n                    throw new Error(\"Log level not supported: \" + logLevel);\n            }\n            if (!logged) {\n                console.log(msg);\n            }\n        }\n        else {\n            throw new Error(\"Console is not defined, cannot log msg: \" + message.message);\n        }\n    };\n    return ConsoleLoggerImpl;\n}(AbstractLogger_1.AbstractLogger));\nexports.ConsoleLoggerImpl = ConsoleLoggerImpl;\n//# sourceMappingURL=ConsoleLoggerImpl.js.map","\"use strict\";\nvar DataStructures_1 = require(\"../../utils/DataStructures\");\nvar LoggerOptions_1 = require(\"../LoggerOptions\");\nvar LoggerFactoryService_1 = require(\"./LoggerFactoryService\");\nvar ConsoleLoggerImpl_1 = require(\"./ConsoleLoggerImpl\");\nvar MessageBufferLoggerImpl_1 = require(\"./MessageBufferLoggerImpl\");\nvar AbstractLogger_1 = require(\"./AbstractLogger\");\nvar LoggerFactoryImpl = (function () {\n    function LoggerFactoryImpl(name, options) {\n        this._loggers = new DataStructures_1.SimpleMap();\n        this._logGroupRuntimeSettingsIndexed = [];\n        this._loggerToLogGroupSettings = new DataStructures_1.SimpleMap();\n        this._name = name;\n        this.configure(options);\n    }\n    LoggerFactoryImpl.prototype.configure = function (options) {\n        this._options = options;\n        // Close any current open loggers.\n        this.closeLoggers();\n        this._loggerToLogGroupSettings.clear();\n        this._logGroupRuntimeSettingsIndexed = [];\n        var logGroupRules = this._options.logGroupRules;\n        /* tslint:disable:prefer-for-of */\n        for (var i = 0; i < logGroupRules.length; i++) {\n            this._logGroupRuntimeSettingsIndexed.push(new LoggerFactoryService_1.LogGroupRuntimeSettings(logGroupRules[i]));\n        }\n        /* tslint:enable:prefer-for-of */\n    };\n    LoggerFactoryImpl.prototype.getLogger = function (named) {\n        if (!this._options.enabled) {\n            throw new Error(\"LoggerFactory is not enabled, please check your options passed in\");\n        }\n        var logger = this._loggers.get(named);\n        if (logger !== null) {\n            return logger;\n        }\n        // Initialize logger with appropriate level\n        logger = this.loadLogger(named);\n        this._loggers.put(named, logger);\n        return logger;\n    };\n    LoggerFactoryImpl.prototype.isEnabled = function () {\n        return this._options.enabled;\n    };\n    LoggerFactoryImpl.prototype.closeLoggers = function () {\n        this._loggers.forEach(function (logger) {\n            // We can only close if AbstractLogger is used (our loggers, but user loggers may not extend it, even though unlikely).\n            if (logger != null && logger instanceof AbstractLogger_1.AbstractLogger) {\n                logger.close();\n            }\n        });\n        this._loggers.clear();\n    };\n    LoggerFactoryImpl.prototype.getName = function () {\n        return this._name;\n    };\n    LoggerFactoryImpl.prototype.getLogGroupRuntimeSettingsByIndex = function (idx) {\n        if (idx >= 0 && idx < this._logGroupRuntimeSettingsIndexed.length) {\n            return this._logGroupRuntimeSettingsIndexed[idx];\n        }\n        return null;\n    };\n    LoggerFactoryImpl.prototype.getLogGroupRuntimeSettingsByLoggerName = function (nameLogger) {\n        return this._loggerToLogGroupSettings.get(nameLogger);\n    };\n    LoggerFactoryImpl.prototype.getLogGroupRuntimeSettings = function () {\n        return this._logGroupRuntimeSettingsIndexed.slice(0);\n    };\n    LoggerFactoryImpl.prototype.loadLogger = function (named) {\n        var logGroupRules = this._options.logGroupRules;\n        for (var i = 0; i < logGroupRules.length; i++) {\n            var logGroupRule = logGroupRules[i];\n            if (logGroupRule.regExp.test(named)) {\n                var logGroupRuntimeSettings = this._logGroupRuntimeSettingsIndexed[i];\n                var logger = void 0;\n                switch (logGroupRule.loggerType) {\n                    case LoggerOptions_1.LoggerType.Console:\n                        logger = new ConsoleLoggerImpl_1.ConsoleLoggerImpl(named, logGroupRuntimeSettings);\n                        break;\n                    case LoggerOptions_1.LoggerType.MessageBuffer:\n                        logger = new MessageBufferLoggerImpl_1.MessageBufferLoggerImpl(named, logGroupRuntimeSettings);\n                        break;\n                    case LoggerOptions_1.LoggerType.Custom:\n                        if (logGroupRule.callBackLogger != null) {\n                            logger = logGroupRule.callBackLogger(named, logGroupRuntimeSettings);\n                        }\n                        else {\n                            throw new Error(\"Cannot create a custom logger, custom callback is null\");\n                        }\n                        break;\n                    default:\n                        throw new Error(\"Cannot create a Logger for LoggerType: \" + logGroupRule.loggerType);\n                }\n                // For a new logger map it by its name\n                this._loggerToLogGroupSettings.put(named, logGroupRuntimeSettings);\n                return logger;\n            }\n        }\n        throw new Error(\"Failed to find a match to create a Logger for: \" + named);\n    };\n    return LoggerFactoryImpl;\n}());\nexports.LoggerFactoryImpl = LoggerFactoryImpl;\n//# sourceMappingURL=LoggerFactoryImpl.js.map","\"use strict\";\nvar DataStructures_1 = require(\"../../utils/DataStructures\");\nvar LoggerOptions_1 = require(\"../LoggerOptions\");\nvar LoggerFactoryImpl_1 = require(\"./LoggerFactoryImpl\");\nvar ExtensionHelper_1 = require(\"../../extension/ExtensionHelper\");\n/**\n * Defines a LogGroupRule, this allows you to either have everything configured the same way\n * or for example loggers that start with name model. It allows you to group loggers together\n * to have a certain loglevel and other settings. You can configure this when creating the\n * LoggerFactory (which accepts multiple LogGroupRules).\n */\nvar LogGroupRule = (function () {\n    /**\n     * Create a LogGroupRule. Basically you define what logger name(s) match for this group, what level should be used what logger type (where to log)\n     * and what format to write in. If the loggerType is custom, then the callBackLogger must be supplied as callback function to return a custom logger.\n     * @param regExp Regular expression, what matches for your logger names for this group\n     * @param level LogLevel\n     * @param logFormat LogFormat\n     * @param loggerType Type of logger, if Custom, make sure to implement callBackLogger and pass in, this will be called so you can return your own logger.\n     * @param callBackLogger Callback function to return a new clean custom logger (yours!)\n     */\n    function LogGroupRule(regExp, level, logFormat, loggerType, callBackLogger) {\n        if (logFormat === void 0) { logFormat = new LoggerOptions_1.LogFormat(); }\n        if (loggerType === void 0) { loggerType = LoggerOptions_1.LoggerType.Console; }\n        if (callBackLogger === void 0) { callBackLogger = null; }\n        this._regExp = regExp;\n        this._level = level;\n        this._logFormat = logFormat;\n        this._loggerType = loggerType;\n        this._callBackLogger = callBackLogger;\n    }\n    Object.defineProperty(LogGroupRule.prototype, \"regExp\", {\n        get: function () {\n            return this._regExp;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LogGroupRule.prototype, \"level\", {\n        get: function () {\n            return this._level;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LogGroupRule.prototype, \"loggerType\", {\n        get: function () {\n            return this._loggerType;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LogGroupRule.prototype, \"logFormat\", {\n        get: function () {\n            return this._logFormat;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LogGroupRule.prototype, \"callBackLogger\", {\n        get: function () {\n            return this._callBackLogger;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return LogGroupRule;\n}());\nexports.LogGroupRule = LogGroupRule;\n/**\n * Options object you can use to configure the LoggerFactory you create at LFService.\n */\nvar LoggerFactoryOptions = (function () {\n    function LoggerFactoryOptions() {\n        this._logGroupRules = [];\n        this._enabled = true;\n    }\n    /**\n     * Add LogGroupRule, see {LogGroupRule) for details\n     * @param rule Rule to add\n     * @returns {LoggerFactoryOptions} returns itself\n     */\n    LoggerFactoryOptions.prototype.addLogGroupRule = function (rule) {\n        this._logGroupRules.push(rule);\n        return this;\n    };\n    /**\n     * Enable or disable logging completely for the LoggerFactory.\n     * @param enabled True for enabled (default)\n     * @returns {LoggerFactoryOptions} returns itself\n     */\n    LoggerFactoryOptions.prototype.setEnabled = function (enabled) {\n        this._enabled = enabled;\n        return this;\n    };\n    Object.defineProperty(LoggerFactoryOptions.prototype, \"logGroupRules\", {\n        get: function () {\n            return this._logGroupRules;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LoggerFactoryOptions.prototype, \"enabled\", {\n        get: function () {\n            return this._enabled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return LoggerFactoryOptions;\n}());\nexports.LoggerFactoryOptions = LoggerFactoryOptions;\n/**\n * Represents the runtime settings for a LogGroup (LogGroupRule).\n */\nvar LogGroupRuntimeSettings = (function () {\n    function LogGroupRuntimeSettings(logGroupRule) {\n        this._logGroupRule = logGroupRule;\n        this._level = logGroupRule.level;\n        this._loggerType = logGroupRule.loggerType;\n        this._logFormat = new LoggerOptions_1.LogFormat(new LoggerOptions_1.DateFormat(logGroupRule.logFormat.dateFormat.formatEnum, logGroupRule.logFormat.dateFormat.dateSeparator), logGroupRule.logFormat.showTimeStamp, logGroupRule.logFormat.showLoggerName);\n        this._callBackLogger = logGroupRule.callBackLogger;\n    }\n    Object.defineProperty(LogGroupRuntimeSettings.prototype, \"logGroupRule\", {\n        /**\n         * Returns original LogGroupRule (so not runtime settings!)\n         * @return {LogGroupRule}\n         */\n        get: function () {\n            return this._logGroupRule;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LogGroupRuntimeSettings.prototype, \"level\", {\n        get: function () {\n            return this._level;\n        },\n        set: function (value) {\n            this._level = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LogGroupRuntimeSettings.prototype, \"loggerType\", {\n        get: function () {\n            return this._loggerType;\n        },\n        set: function (value) {\n            this._loggerType = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LogGroupRuntimeSettings.prototype, \"logFormat\", {\n        get: function () {\n            return this._logFormat;\n        },\n        set: function (value) {\n            this._logFormat = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LogGroupRuntimeSettings.prototype, \"callBackLogger\", {\n        get: function () {\n            return this._callBackLogger;\n        },\n        set: function (value) {\n            this._callBackLogger = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return LogGroupRuntimeSettings;\n}());\nexports.LogGroupRuntimeSettings = LogGroupRuntimeSettings;\nvar LFServiceImpl = (function () {\n    function LFServiceImpl() {\n        this._nameCounter = 1;\n        this._mapFactories = new DataStructures_1.SimpleMap();\n        // Private constructor.\n        ExtensionHelper_1.ExtensionHelper.register();\n    }\n    LFServiceImpl.getInstance = function () {\n        // Loaded on demand. Do NOT change as webpack may pack things in wrong order otherwise.\n        if (LFServiceImpl._INSTANCE === null) {\n            LFServiceImpl._INSTANCE = new LFServiceImpl();\n        }\n        return LFServiceImpl._INSTANCE;\n    };\n    /**\n     * Create a new LoggerFactory with given options (if any). If no options\n     * are specified, the LoggerFactory, will accept any named logger and will\n     * log on info level by default for, to the console.\n     * @param options Options, optional.\n     * @returns {LoggerFactory}\n     */\n    LFServiceImpl.prototype.createLoggerFactory = function (options) {\n        if (options === void 0) { options = null; }\n        var name = \"LoggerFactory\" + this._nameCounter++;\n        return this.createNamedLoggerFactory(name, options);\n    };\n    /**\n     * Create a new LoggerFactory using given name (used for console api/extension).\n     * @param name Name Pick something short but distinguishable.\n     * @param options Options, optional\n     * @return {LoggerFactory}\n     */\n    LFServiceImpl.prototype.createNamedLoggerFactory = function (name, options) {\n        if (options === void 0) { options = null; }\n        if (this._mapFactories.exists(name)) {\n            throw new Error(\"LoggerFactory with name \" + name + \" already exists.\");\n        }\n        var factory;\n        if (options !== null) {\n            factory = new LoggerFactoryImpl_1.LoggerFactoryImpl(name, options);\n        }\n        else {\n            factory = new LoggerFactoryImpl_1.LoggerFactoryImpl(name, LFServiceImpl.createDefaultOptions());\n        }\n        this._mapFactories.put(name, factory);\n        return factory;\n    };\n    /**\n     * Closes all Loggers for LoggerFactories that were created.\n     * After this call, all previously fetched Loggers (from their\n     * factories) are unusable. The factories remain as they were.\n     */\n    LFServiceImpl.prototype.closeLoggers = function () {\n        this._mapFactories.values().forEach(function (factory) {\n            factory.closeLoggers();\n        });\n        this._mapFactories.clear();\n        this._nameCounter = 1;\n    };\n    LFServiceImpl.prototype.getRuntimeSettingsForLoggerFactories = function () {\n        var result = [];\n        this._mapFactories.forEach(function (factory) {\n            // Won't be null, but hey tslint ...\n            if (factory != null) {\n                result.push(factory);\n            }\n        });\n        return result;\n    };\n    LFServiceImpl.prototype.getLogGroupSettings = function (nameLoggerFactory, idLogGroupRule) {\n        var factory = this._mapFactories.get(nameLoggerFactory);\n        if (factory === null) {\n            return null;\n        }\n        return factory.getLogGroupRuntimeSettingsByIndex(idLogGroupRule);\n    };\n    LFServiceImpl.prototype.getLoggerFactoryRuntimeSettingsByName = function (nameLoggerFactory) {\n        return this._mapFactories.get(nameLoggerFactory);\n    };\n    LFServiceImpl.createDefaultOptions = function () {\n        return new LoggerFactoryOptions().addLogGroupRule(new LogGroupRule(new RegExp(\".+\"), LoggerOptions_1.LogLevel.Info));\n    };\n    return LFServiceImpl;\n}());\n// Loaded on demand. Do NOT change as webpack may pack things in wrong order otherwise.\nLFServiceImpl._INSTANCE = null;\n/**\n * Create and configure your LoggerFactory from here.\n */\nvar LFService = (function () {\n    function LFService() {\n    }\n    /**\n     * Create a new LoggerFactory with given options (if any). If no options\n     * are specified, the LoggerFactory, will accept any named logger and will\n     * log on info level by default for, to the console.\n     * @param options Options, optional.\n     * @returns {LoggerFactory}\n     */\n    LFService.createLoggerFactory = function (options) {\n        if (options === void 0) { options = null; }\n        return LFService.INSTANCE_SERVICE.createLoggerFactory(options);\n    };\n    /**\n     * Create a new LoggerFactory using given name (used for console api/extension).\n     * @param name Name Pick something short but distinguishable.\n     * @param options Options, optional\n     * @return {LoggerFactory}\n     */\n    LFService.createNamedLoggerFactory = function (name, options) {\n        if (options === void 0) { options = null; }\n        return LFService.INSTANCE_SERVICE.createNamedLoggerFactory(name, options);\n    };\n    /**\n     * Closes all Loggers for LoggerFactories that were created.\n     * After this call, all previously fetched Loggers (from their\n     * factories) are unusable. The factories remain as they were.\n     */\n    LFService.closeLoggers = function () {\n        return LFService.INSTANCE_SERVICE.closeLoggers();\n    };\n    /**\n     * Return LFServiceRuntimeSettings to retrieve information loggerfactories\n     * and their runtime settings.\n     * @returns {LFServiceRuntimeSettings}\n     */\n    LFService.getRuntimeSettings = function () {\n        return LFService.INSTANCE_SERVICE;\n    };\n    return LFService;\n}());\nLFService.INSTANCE_SERVICE = LFServiceImpl.getInstance();\nexports.LFService = LFService;\n//# sourceMappingURL=LoggerFactoryService.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AbstractLogger_1 = require(\"./AbstractLogger\");\n/**\n * Logger which buffers all messages, use with care due to possible high memory footprint.\n * Can be convenient in some cases. Call toString() for full output, or cast to this class\n * and call getMessages() to do something with it yourself.\n */\nvar MessageBufferLoggerImpl = (function (_super) {\n    __extends(MessageBufferLoggerImpl, _super);\n    function MessageBufferLoggerImpl(name, logGroupRuntimeSettings) {\n        var _this = _super.call(this, name, logGroupRuntimeSettings) || this;\n        _this.messages = [];\n        return _this;\n    }\n    MessageBufferLoggerImpl.prototype.close = function () {\n        this.messages = [];\n        _super.prototype.close.call(this);\n    };\n    MessageBufferLoggerImpl.prototype.getMessages = function () {\n        return this.messages;\n    };\n    MessageBufferLoggerImpl.prototype.toString = function () {\n        return this.messages.map(function (msg) {\n            return msg;\n        }).join(\"\\n\");\n    };\n    MessageBufferLoggerImpl.prototype.doLog = function (message) {\n        this.messages.push(this.createDefaultLogMessage(message));\n    };\n    return MessageBufferLoggerImpl;\n}(AbstractLogger_1.AbstractLogger));\nexports.MessageBufferLoggerImpl = MessageBufferLoggerImpl;\n//# sourceMappingURL=MessageBufferLoggerImpl.js.map","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nvar LogGroupControl_1 = require(\"./control/LogGroupControl\");\nvar CategoryServiceControl_1 = require(\"./control/CategoryServiceControl\");\nvar ExtensionHelper_1 = require(\"./extension/ExtensionHelper\");\nexports.ExtensionHelper = ExtensionHelper_1.ExtensionHelper;\n// Category related\nvar AbstractCategoryLogger_1 = require(\"./log/category/AbstractCategoryLogger\");\nexports.AbstractCategoryLogger = AbstractCategoryLogger_1.AbstractCategoryLogger;\nvar CategoryConsoleLoggerImpl_1 = require(\"./log/category/CategoryConsoleLoggerImpl\");\nexports.CategoryConsoleLoggerImpl = CategoryConsoleLoggerImpl_1.CategoryConsoleLoggerImpl;\nvar CategoryDelegateLoggerImpl_1 = require(\"./log/category/CategoryDelegateLoggerImpl\");\nexports.CategoryDelegateLoggerImpl = CategoryDelegateLoggerImpl_1.CategoryDelegateLoggerImpl;\nvar CategoryLogger_1 = require(\"./log/category/CategoryLogger\");\nexports.Category = CategoryLogger_1.Category;\nvar CategoryMessageBufferImpl_1 = require(\"./log/category/CategoryMessageBufferImpl\");\nexports.CategoryMessageBufferLoggerImpl = CategoryMessageBufferImpl_1.CategoryMessageBufferLoggerImpl;\nvar CategoryService_1 = require(\"./log/category/CategoryService\");\nexports.CategoryDefaultConfiguration = CategoryService_1.CategoryDefaultConfiguration;\nexports.CategoryRuntimeSettings = CategoryService_1.CategoryRuntimeSettings;\nexports.CategoryServiceFactory = CategoryService_1.CategoryServiceFactory;\nvar LoggerFactoryService_1 = require(\"./log/standard/LoggerFactoryService\");\nexports.LoggerFactoryOptions = LoggerFactoryService_1.LoggerFactoryOptions;\nexports.LFService = LoggerFactoryService_1.LFService;\nexports.LogGroupRule = LoggerFactoryService_1.LogGroupRule;\nvar AbstractLogger_1 = require(\"./log/standard/AbstractLogger\");\nexports.AbstractLogger = AbstractLogger_1.AbstractLogger;\nvar ConsoleLoggerImpl_1 = require(\"./log/standard/ConsoleLoggerImpl\");\nexports.ConsoleLoggerImpl = ConsoleLoggerImpl_1.ConsoleLoggerImpl;\nvar MessageBufferLoggerImpl_1 = require(\"./log/standard/MessageBufferLoggerImpl\");\nexports.MessageBufferLoggerImpl = MessageBufferLoggerImpl_1.MessageBufferLoggerImpl;\nvar LoggerOptions_1 = require(\"./log/LoggerOptions\");\nexports.CategoryLogFormat = LoggerOptions_1.CategoryLogFormat;\nexports.DateFormat = LoggerOptions_1.DateFormat;\nexports.DateFormatEnum = LoggerOptions_1.DateFormatEnum;\nexports.LogFormat = LoggerOptions_1.LogFormat;\nexports.LoggerType = LoggerOptions_1.LoggerType;\nexports.LogLevel = LoggerOptions_1.LogLevel;\n// Utilities\nvar DataStructures_1 = require(\"./utils/DataStructures\");\nexports.SimpleMap = DataStructures_1.SimpleMap;\nexports.LinkedList = DataStructures_1.LinkedList;\n__export(require(\"./utils/JSONHelper\"));\nvar MessageUtils_1 = require(\"./utils/MessageUtils\");\nexports.MessageFormatUtils = MessageUtils_1.MessageFormatUtils;\n/*\n Functions to export on TSL libarary var.\n*/\n// Export help function\nfunction help() {\n    /* tslint:disable:no-console */\n    console.log(\"help()\\n   ** Shows this help\\n   \\n getLogControl(): LoggerControl\\n   ** Returns LoggerControl Object, use to dynamically change loglevels for log4j logging.\\n   ** Call .help() on LoggerControl object for available options.\\n   \\n getCategoryControl(): CategoryServiceControl\\n   ** Returns CategoryServiceControl Object, use to dynamically change loglevels for category logging.\\n   ** Call .help() on CategoryServiceControl object for available options.   \\n\");\n    /* tslint:enable:no-console */\n}\nexports.help = help;\n// Export LogControl function (log4j)\nfunction getLogControl() {\n    return new LogGroupControl_1.LoggerControlImpl();\n}\nexports.getLogControl = getLogControl;\n// Export CategoryControl function\nfunction getCategoryControl() {\n    return new CategoryServiceControl_1.CategoryServiceControlImpl();\n}\nexports.getCategoryControl = getCategoryControl;\n//# sourceMappingURL=typescript-logging.js.map","\"use strict\";\nvar LinkedNode = (function () {\n    function LinkedNode(value) {\n        this._previous = null;\n        this._next = null;\n        this._value = value;\n    }\n    Object.defineProperty(LinkedNode.prototype, \"previous\", {\n        get: function () {\n            return this._previous;\n        },\n        set: function (value) {\n            this._previous = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LinkedNode.prototype, \"next\", {\n        get: function () {\n            return this._next;\n        },\n        set: function (value) {\n            this._next = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LinkedNode.prototype, \"value\", {\n        get: function () {\n            return this._value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return LinkedNode;\n}());\n/**\n * Double linkedlist implementation.\n */\nvar LinkedList = (function () {\n    function LinkedList() {\n        this.head = null;\n        this.size = 0;\n    }\n    LinkedList.prototype.addHead = function (value) {\n        if (!this.createHeadIfNeeded(value)) {\n            if (this.head != null) {\n                var nextNode = this.head.next;\n                var newHeadNode = new LinkedNode(value);\n                if (nextNode != null) {\n                    nextNode.previous = newHeadNode;\n                    newHeadNode.next = nextNode;\n                }\n                this.head = newHeadNode;\n            }\n            else {\n                throw new Error(\"This should never happen, list implementation broken\");\n            }\n        }\n        this.size++;\n    };\n    LinkedList.prototype.addTail = function (value) {\n        if (!this.createHeadIfNeeded(value)) {\n            var oldTailNode = this.getTailNode();\n            if (oldTailNode != null) {\n                var newTailNode = new LinkedNode(value);\n                oldTailNode.next = newTailNode;\n                newTailNode.previous = oldTailNode;\n            }\n            else {\n                throw new Error(\"List implementation broken\");\n            }\n        }\n        this.size++;\n    };\n    LinkedList.prototype.clear = function () {\n        this.head = null;\n        this.size = 0;\n    };\n    LinkedList.prototype.getHead = function () {\n        if (this.head != null) {\n            return this.head.value;\n        }\n        return null;\n    };\n    LinkedList.prototype.removeHead = function () {\n        if (this.head != null) {\n            var oldHead = this.head;\n            var value = oldHead.value;\n            this.head = oldHead.next;\n            this.size--;\n            return value;\n        }\n        return null;\n    };\n    LinkedList.prototype.getTail = function () {\n        var node = this.getTailNode();\n        if (node != null) {\n            return node.value;\n        }\n        return null;\n    };\n    LinkedList.prototype.removeTail = function () {\n        var node = this.getTailNode();\n        if (node != null) {\n            if (node === this.head) {\n                this.head = null;\n            }\n            else {\n                var previousNode = node.previous;\n                if (previousNode != null) {\n                    previousNode.next = null;\n                }\n                else {\n                    throw new Error(\"List implementation is broken\");\n                }\n            }\n            this.size--;\n            return node.value;\n        }\n        return null;\n    };\n    LinkedList.prototype.getSize = function () {\n        return this.size;\n    };\n    LinkedList.prototype.filter = function (f) {\n        var recurse = function (fn, node, values) {\n            if (fn(node.value)) {\n                values.push(node.value);\n            }\n            var nextNode = node.next;\n            if (nextNode != null) {\n                recurse(fn, nextNode, values);\n            }\n        };\n        var result = [];\n        var node = this.head;\n        if (node != null) {\n            recurse(f, node, result);\n        }\n        return result;\n    };\n    LinkedList.prototype.createHeadIfNeeded = function (value) {\n        if (this.head == null) {\n            this.head = new LinkedNode(value);\n            return true;\n        }\n        return false;\n    };\n    LinkedList.prototype.getTailNode = function () {\n        if (this.head == null) {\n            return null;\n        }\n        var node = this.head;\n        while (node.next != null) {\n            node = node.next;\n        }\n        return node;\n    };\n    return LinkedList;\n}());\nexports.LinkedList = LinkedList;\n/**\n * Map implementation keyed by string (always). Note that the get/remove return either value or null.\n * This map does not support undefined in any fasion (on purpose).\n */\nvar SimpleMap = (function () {\n    function SimpleMap() {\n        this.array = {};\n    }\n    SimpleMap.prototype.put = function (key, value) {\n        if (value === undefined) {\n            throw new Error(\"Undefined value is not allowed, null is.\");\n        }\n        this.array[key] = value;\n    };\n    SimpleMap.prototype.get = function (key) {\n        var result = this.array[key];\n        if (result !== undefined) {\n            return result;\n        }\n        return null;\n    };\n    SimpleMap.prototype.exists = function (key) {\n        var value = this.array[key];\n        return value !== undefined;\n    };\n    SimpleMap.prototype.remove = function (key) {\n        var value = this.array[key];\n        if (value !== undefined) {\n            delete this.array[key];\n        }\n        return value;\n    };\n    SimpleMap.prototype.keys = function () {\n        var keys = [];\n        for (var key in this.array) {\n            // To prevent random stuff to appear\n            if (this.array.hasOwnProperty(key)) {\n                keys.push(key);\n            }\n        }\n        return keys;\n    };\n    SimpleMap.prototype.values = function () {\n        var values = [];\n        for (var key in this.array) {\n            // To prevent random stuff to appear\n            if (this.array.hasOwnProperty(key)) {\n                values.push(this.get(key));\n            }\n        }\n        return values;\n    };\n    SimpleMap.prototype.size = function () {\n        return this.keys().length;\n    };\n    SimpleMap.prototype.isEmpty = function () {\n        return this.size() === 0;\n    };\n    SimpleMap.prototype.clear = function () {\n        this.array = {};\n    };\n    SimpleMap.prototype.forEach = function (cbFunction) {\n        for (var key in this.array) {\n            // To prevent random stuff to appear\n            if (this.array.hasOwnProperty(key)) {\n                var value = this.array[key];\n                cbFunction(value, key, this);\n            }\n        }\n    };\n    return SimpleMap;\n}());\nexports.SimpleMap = SimpleMap;\n/**\n * Tuple to hold two values.\n */\nvar TuplePair = (function () {\n    function TuplePair(x, y) {\n        this._x = x;\n        this._y = y;\n    }\n    Object.defineProperty(TuplePair.prototype, \"x\", {\n        get: function () {\n            return this._x;\n        },\n        set: function (value) {\n            this._x = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TuplePair.prototype, \"y\", {\n        get: function () {\n            return this._y;\n        },\n        set: function (value) {\n            this._y = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return TuplePair;\n}());\nexports.TuplePair = TuplePair;\n/**\n * Utility class to build up a string.\n */\nvar StringBuilder = (function () {\n    function StringBuilder() {\n        this.data = [];\n    }\n    StringBuilder.prototype.append = function (line) {\n        if (line === undefined || line == null) {\n            throw new Error(\"String must be set, cannot append null or undefined\");\n        }\n        this.data.push(line);\n        return this;\n    };\n    StringBuilder.prototype.appendLine = function (line) {\n        this.data.push(line + \"\\n\");\n        return this;\n    };\n    StringBuilder.prototype.isEmpty = function () {\n        return this.data.length === 0;\n    };\n    StringBuilder.prototype.clear = function () {\n        this.data = [];\n    };\n    StringBuilder.prototype.toString = function (separator) {\n        if (separator === void 0) { separator = \"\"; }\n        return this.data.join(separator);\n    };\n    return StringBuilder;\n}());\nexports.StringBuilder = StringBuilder;\n//# sourceMappingURL=DataStructures.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar LoggerOptions_1 = require(\"../log/LoggerOptions\");\nvar DataStructures_1 = require(\"./DataStructures\");\nvar JSONTypeImpl = (function () {\n    function JSONTypeImpl(value) {\n        this._value = value;\n    }\n    JSONTypeImpl.prototype.getValue = function () {\n        return this._value;\n    };\n    JSONTypeImpl.prototype.toString = function () {\n        var value = this.getValue();\n        if (value != null) {\n            return value.toString();\n        }\n        return \"null\";\n    };\n    return JSONTypeImpl;\n}());\nvar JSONBooleanType = (function (_super) {\n    __extends(JSONBooleanType, _super);\n    function JSONBooleanType(value) {\n        return _super.call(this, value) || this;\n    }\n    return JSONBooleanType;\n}(JSONTypeImpl));\nvar JSONNumberType = (function (_super) {\n    __extends(JSONNumberType, _super);\n    function JSONNumberType(value) {\n        return _super.call(this, value) || this;\n    }\n    return JSONNumberType;\n}(JSONTypeImpl));\nvar JSONStringType = (function (_super) {\n    __extends(JSONStringType, _super);\n    function JSONStringType(value) {\n        return _super.call(this, value) || this;\n    }\n    JSONStringType.prototype.toString = function () {\n        var value = this.getValue();\n        if (value != null) {\n            return JSON.stringify(value.toString());\n        }\n        return \"null\";\n    };\n    return JSONStringType;\n}(JSONTypeImpl));\nvar JSONObjectType = (function (_super) {\n    __extends(JSONObjectType, _super);\n    function JSONObjectType(value) {\n        return _super.call(this, value) || this;\n    }\n    return JSONObjectType;\n}(JSONTypeImpl));\nvar JSONArrayType = (function (_super) {\n    __extends(JSONArrayType, _super);\n    function JSONArrayType(value) {\n        return _super.call(this, value) || this;\n    }\n    JSONArrayType.prototype.toString = function () {\n        var value = this.getValue();\n        if (value != null) {\n            return value.toString();\n        }\n        return \"null\";\n    };\n    return JSONArrayType;\n}(JSONTypeImpl));\nvar JSONNullType = (function (_super) {\n    __extends(JSONNullType, _super);\n    function JSONNullType() {\n        return _super.call(this, null) || this;\n    }\n    JSONNullType.prototype.toString = function () {\n        return \"null\";\n    };\n    return JSONNullType;\n}(JSONTypeImpl));\nvar JSONTypeConverter = (function () {\n    function JSONTypeConverter() {\n    }\n    JSONTypeConverter.toJSONType = function (value) {\n        if (value === null) {\n            return new JSONNullType();\n        }\n        if (typeof value === \"string\") {\n            return new JSONStringType(value);\n        }\n        if (typeof value === \"number\") {\n            return new JSONNumberType(value);\n        }\n        if (typeof value === \"boolean\") {\n            return new JSONBooleanType(value);\n        }\n        if (value instanceof JSONObject) {\n            return new JSONObjectType(value);\n        }\n        throw new Error(\"Type not supported for value: \" + value);\n    };\n    return JSONTypeConverter;\n}());\nvar JSONObject = (function () {\n    function JSONObject() {\n        this.values = new DataStructures_1.SimpleMap();\n    }\n    JSONObject.prototype.addBoolean = function (name, value) {\n        this.checkName(name);\n        JSONObject.checkValue(value);\n        this.values.put(name, new JSONBooleanType(value));\n        return this;\n    };\n    JSONObject.prototype.addNumber = function (name, value) {\n        this.checkName(name);\n        JSONObject.checkValue(value);\n        this.values.put(name, new JSONNumberType(value));\n        return this;\n    };\n    JSONObject.prototype.addString = function (name, value) {\n        this.checkName(name);\n        JSONObject.checkValue(value);\n        this.values.put(name, new JSONStringType(value));\n        return this;\n    };\n    JSONObject.prototype.addNull = function (name) {\n        this.checkName(name);\n        this.values.put(name, new JSONNullType());\n        return this;\n    };\n    JSONObject.prototype.addArray = function (name, array) {\n        this.checkName(name);\n        JSONObject.checkValue(array);\n        if (array == null) {\n            throw new Error(\"Cannot add array as null\");\n        }\n        this.values.put(name, new JSONArrayType(array));\n        return this;\n    };\n    JSONObject.prototype.addObject = function (name, object) {\n        this.checkName(name);\n        JSONObject.checkValue(object);\n        if (object == null) {\n            throw new Error(\"Cannot add object as null\");\n        }\n        this.values.put(name, new JSONObjectType(object));\n        return this;\n    };\n    JSONObject.prototype.toString = function (pretty) {\n        var _this = this;\n        if (pretty === void 0) { pretty = false; }\n        var comma = false;\n        var buffer = new DataStructures_1.StringBuilder();\n        buffer.append(\"{\");\n        this.values.keys().forEach(function (key) {\n            var value = _this.values.get(key);\n            if (value != null) {\n                if (comma) {\n                    buffer.append(\",\");\n                }\n                buffer.append('\"').append(key).append('\":').append(value.toString());\n                comma = true;\n            }\n        });\n        buffer.append(\"}\");\n        return buffer.toString();\n    };\n    JSONObject.prototype.checkName = function (name) {\n        if (name == null || name === undefined) {\n            throw new Error(\"Name is null or undefined\");\n        }\n        if (this.values.exists(name)) {\n            throw new Error(\"Name \" + name + \" is already present for this object\");\n        }\n    };\n    JSONObject.checkValue = function (value) {\n        if (value === undefined) {\n            throw new Error(\"Value is undefined\");\n        }\n    };\n    return JSONObject;\n}());\nexports.JSONObject = JSONObject;\nvar JSONArray = (function () {\n    function JSONArray() {\n        this.objects = [];\n    }\n    JSONArray.prototype.add = function (object) {\n        if (object === undefined) {\n            throw new Error(\"Object is not allowed to be undefined\");\n        }\n        this.objects.push(JSONTypeConverter.toJSONType(object));\n        return this;\n    };\n    JSONArray.prototype.toString = function (pretty) {\n        if (pretty === void 0) { pretty = false; }\n        var buffer = new DataStructures_1.StringBuilder();\n        buffer.append(\"[\");\n        this.objects.forEach(function (value, index) {\n            if (index > 0) {\n                buffer.append(\",\");\n            }\n            buffer.append(value.toString());\n        });\n        buffer.append(\"]\");\n        return buffer.toString();\n    };\n    return JSONArray;\n}());\nexports.JSONArray = JSONArray;\n/**\n * Utility class that helps us convert things to and from json (not for normal usage).\n */\nvar JSONHelper = (function () {\n    function JSONHelper() {\n    }\n    JSONHelper.categoryToJSON = function (cat, recursive) {\n        /*\n         {\n         \"categories\":\n         [\n         { id=1,\n         name: \"x\",\n         parent: null,\n         logLevel: \"Error\"\n         },\n         { id=2,\n         name: \"y\",\n         parent: 1,\n         logLevel: \"Error\"\n         }\n         ]\n         }\n         */\n        var arr = new JSONArray();\n        JSONHelper._categoryToJSON(cat, arr, recursive);\n        var object = new JSONObject();\n        object.addArray(\"categories\", arr);\n        return object;\n    };\n    JSONHelper._categoryToJSON = function (cat, arr, recursive) {\n        var object = new JSONObject();\n        object.addNumber(\"id\", cat.id);\n        object.addString(\"name\", cat.name);\n        object.addString(\"logLevel\", LoggerOptions_1.LogLevel[cat.logLevel].toString());\n        if (cat.parent != null) {\n            object.addNumber(\"parent\", cat.parent.id);\n        }\n        else {\n            object.addNull(\"parent\");\n        }\n        arr.add(object);\n        if (recursive) {\n            cat.children.forEach(function (child) {\n                JSONHelper._categoryToJSON(child, arr, recursive);\n            });\n        }\n    };\n    return JSONHelper;\n}());\nexports.JSONHelper = JSONHelper;\n//# sourceMappingURL=JSONHelper.js.map","\"use strict\";\nvar ST = require(\"stacktrace-js\");\nvar LoggerOptions_1 = require(\"../log/LoggerOptions\");\n/**\n * Some utilities to format messages.\n */\nvar MessageFormatUtils = (function () {\n    function MessageFormatUtils() {\n    }\n    /**\n     * Render given date in given DateFormat and return as String.\n     * @param date Date\n     * @param dateFormat Format\n     * @returns {string} Formatted date\n     */\n    MessageFormatUtils.renderDate = function (date, dateFormat) {\n        var lpad = function (value, chars, padWith) {\n            var howMany = chars - value.length;\n            if (howMany > 0) {\n                var res = \"\";\n                for (var i = 0; i < howMany; i++) {\n                    res += padWith;\n                }\n                res += value;\n                return res;\n            }\n            return value;\n        };\n        var fullYear = function (d) {\n            return lpad(d.getFullYear().toString(), 4, \"0\");\n        };\n        var month = function (d) {\n            return lpad((d.getMonth() + 1).toString(), 2, \"0\");\n        };\n        var day = function (d) {\n            return lpad(d.getDate().toString(), 2, \"0\");\n        };\n        var hours = function (d) {\n            return lpad(d.getHours().toString(), 2, \"0\");\n        };\n        var minutes = function (d) {\n            return lpad(d.getMinutes().toString(), 2, \"0\");\n        };\n        var seconds = function (d) {\n            return lpad(d.getSeconds().toString(), 2, \"0\");\n        };\n        var millis = function (d) {\n            return lpad(d.getMilliseconds().toString(), 3, \"0\");\n        };\n        var dateSeparator = dateFormat.dateSeparator;\n        var ds = \"\";\n        switch (dateFormat.formatEnum) {\n            case LoggerOptions_1.DateFormatEnum.Default:\n                // yyyy-mm-dd hh:mm:ss,m\n                ds = fullYear(date) + dateSeparator + month(date) + dateSeparator + day(date) + \" \" +\n                    hours(date) + \":\" + minutes(date) + \":\" + seconds(date) + \",\" + millis(date);\n                break;\n            case LoggerOptions_1.DateFormatEnum.YearMonthDayTime:\n                ds = fullYear(date) + dateSeparator + month(date) + dateSeparator + day(date) + \" \" +\n                    hours(date) + \":\" + minutes(date) + \":\" + seconds(date);\n                break;\n            case LoggerOptions_1.DateFormatEnum.YearDayMonthWithFullTime:\n                ds = fullYear(date) + dateSeparator + day(date) + dateSeparator + month(date) + \" \" +\n                    hours(date) + \":\" + minutes(date) + \":\" + seconds(date) + \",\" + millis(date);\n                break;\n            case LoggerOptions_1.DateFormatEnum.YearDayMonthTime:\n                ds = fullYear(date) + dateSeparator + day(date) + dateSeparator + month(date) + \" \" +\n                    hours(date) + \":\" + minutes(date) + \":\" + seconds(date);\n                break;\n            default:\n                throw new Error(\"Unsupported date format enum: \" + dateFormat.formatEnum);\n        }\n        return ds;\n    };\n    /**\n     * Renders given category log message in default format.\n     * @param msg Message to format\n     * @param addStack If true adds the stack to the output, otherwise skips it\n     * @returns {string} Formatted message\n     */\n    MessageFormatUtils.renderDefaultMessage = function (msg, addStack) {\n        var result = \"\";\n        var logFormat = msg.getLogFormat();\n        if (logFormat.showTimeStamp) {\n            result += MessageFormatUtils.renderDate(msg.getDate(), logFormat.dateFormat) + \" \";\n        }\n        result += LoggerOptions_1.LogLevel[msg.getLevel()].toUpperCase();\n        if (msg.isResolvedErrorMessage()) {\n            result += \" (resolved)\";\n        }\n        result += \" \";\n        if (logFormat.showCategoryName) {\n            result += \"[\";\n            msg.getCategories().forEach(function (value, idx) {\n                if (idx > 0) {\n                    result += \", \";\n                }\n                result += value.name;\n            });\n            result += \"]\";\n        }\n        result += \" \" + msg.getMessage();\n        if (addStack && msg.getErrorAsStack() !== null) {\n            result += \"\\n\" + msg.getErrorAsStack();\n        }\n        return result;\n    };\n    /**\n     * Renders given log4j log message in default format.\n     * @param msg Message to format\n     * @param addStack If true adds the stack to the output, otherwise skips it\n     * @returns {string} Formatted message\n     */\n    MessageFormatUtils.renderDefaultLog4jMessage = function (msg, addStack) {\n        var format = msg.logGroupRule.logFormat;\n        var result = \"\";\n        if (format.showTimeStamp) {\n            result += MessageFormatUtils.renderDate(msg.date, format.dateFormat) + \" \";\n        }\n        result += LoggerOptions_1.LogLevel[msg.level].toUpperCase() + \" \";\n        if (format.showLoggerName) {\n            result += \"[\" + msg.loggerName + \"]\";\n        }\n        result += \" \" + msg.message;\n        if (addStack && msg.errorAsStack !== null) {\n            result += \"\\n\" + msg.errorAsStack;\n        }\n        return result;\n    };\n    /**\n     * Render error as stack\n     * @param error Return error as Promise\n     * @returns {Promise<string>|Promise} Promise for stack\n     */\n    MessageFormatUtils.renderError = function (error) {\n        var result = error.name + \": \" + error.message + \"\\n@\";\n        return new Promise(function (resolve) {\n            // This one has a promise too\n            ST.fromError(error, { offline: true }).then(function (frames) {\n                var stackStr = (frames.map(function (frame) {\n                    return frame.toString();\n                })).join(\"\\n  \");\n                result += \"\\n\" + stackStr;\n                // This resolves our returned promise\n                resolve(result);\n            });\n        });\n    };\n    return MessageFormatUtils;\n}());\nexports.MessageFormatUtils = MessageFormatUtils;\n//# sourceMappingURL=MessageUtils.js.map","(function(root, factory) {\n    'use strict';\n    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.\n\n    /* istanbul ignore next */\n    if (typeof define === 'function' && define.amd) {\n        define('error-stack-parser', ['stackframe'], factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory(require('stackframe'));\n    } else {\n        root.ErrorStackParser = factory(root.StackFrame);\n    }\n}(this, function ErrorStackParser(StackFrame) {\n    'use strict';\n\n    var FIREFOX_SAFARI_STACK_REGEXP = /(^|@)\\S+\\:\\d+/;\n    var CHROME_IE_STACK_REGEXP = /^\\s*at .*(\\S+\\:\\d+|\\(native\\))/m;\n    var SAFARI_NATIVE_CODE_REGEXP = /^(eval@)?(\\[native code\\])?$/;\n\n    function _map(array, fn, thisArg) {\n        if (typeof Array.prototype.map === 'function') {\n            return array.map(fn, thisArg);\n        } else {\n            var output = new Array(array.length);\n            for (var i = 0; i < array.length; i++) {\n                output[i] = fn.call(thisArg, array[i]);\n            }\n            return output;\n        }\n    }\n\n    function _filter(array, fn, thisArg) {\n        if (typeof Array.prototype.filter === 'function') {\n            return array.filter(fn, thisArg);\n        } else {\n            var output = [];\n            for (var i = 0; i < array.length; i++) {\n                if (fn.call(thisArg, array[i])) {\n                    output.push(array[i]);\n                }\n            }\n            return output;\n        }\n    }\n\n    function _indexOf(array, target) {\n        if (typeof Array.prototype.indexOf === 'function') {\n            return array.indexOf(target);\n        } else {\n            for (var i = 0; i < array.length; i++) {\n                if (array[i] === target) {\n                    return i;\n                }\n            }\n            return -1;\n        }\n    }\n\n    return {\n        /**\n         * Given an Error object, extract the most information from it.\n         *\n         * @param {Error} error object\n         * @return {Array} of StackFrames\n         */\n        parse: function ErrorStackParser$$parse(error) {\n            if (typeof error.stacktrace !== 'undefined' || typeof error['opera#sourceloc'] !== 'undefined') {\n                return this.parseOpera(error);\n            } else if (error.stack && error.stack.match(CHROME_IE_STACK_REGEXP)) {\n                return this.parseV8OrIE(error);\n            } else if (error.stack) {\n                return this.parseFFOrSafari(error);\n            } else {\n                throw new Error('Cannot parse given Error object');\n            }\n        },\n\n        // Separate line and column numbers from a string of the form: (URI:Line:Column)\n        extractLocation: function ErrorStackParser$$extractLocation(urlLike) {\n            // Fail-fast but return locations like \"(native)\"\n            if (urlLike.indexOf(':') === -1) {\n                return [urlLike];\n            }\n\n            var regExp = /(.+?)(?:\\:(\\d+))?(?:\\:(\\d+))?$/;\n            var parts = regExp.exec(urlLike.replace(/[\\(\\)]/g, ''));\n            return [parts[1], parts[2] || undefined, parts[3] || undefined];\n        },\n\n        parseV8OrIE: function ErrorStackParser$$parseV8OrIE(error) {\n            var filtered = _filter(error.stack.split('\\n'), function(line) {\n                return !!line.match(CHROME_IE_STACK_REGEXP);\n            }, this);\n\n            return _map(filtered, function(line) {\n                if (line.indexOf('(eval ') > -1) {\n                    // Throw away eval information until we implement stacktrace.js/stackframe#8\n                    line = line.replace(/eval code/g, 'eval').replace(/(\\(eval at [^\\()]*)|(\\)\\,.*$)/g, '');\n                }\n                var tokens = line.replace(/^\\s+/, '').replace(/\\(eval code/g, '(').split(/\\s+/).slice(1);\n                var locationParts = this.extractLocation(tokens.pop());\n                var functionName = tokens.join(' ') || undefined;\n                var fileName = _indexOf(['eval', '<anonymous>'], locationParts[0]) > -1 ? undefined : locationParts[0];\n\n                return new StackFrame(functionName, undefined, fileName, locationParts[1], locationParts[2], line);\n            }, this);\n        },\n\n        parseFFOrSafari: function ErrorStackParser$$parseFFOrSafari(error) {\n            var filtered = _filter(error.stack.split('\\n'), function(line) {\n                return !line.match(SAFARI_NATIVE_CODE_REGEXP);\n            }, this);\n\n            return _map(filtered, function(line) {\n                // Throw away eval information until we implement stacktrace.js/stackframe#8\n                if (line.indexOf(' > eval') > -1) {\n                    line = line.replace(/ line (\\d+)(?: > eval line \\d+)* > eval\\:\\d+\\:\\d+/g, ':$1');\n                }\n\n                if (line.indexOf('@') === -1 && line.indexOf(':') === -1) {\n                    // Safari eval frames only have function names and nothing else\n                    return new StackFrame(line);\n                } else {\n                    var tokens = line.split('@');\n                    var locationParts = this.extractLocation(tokens.pop());\n                    var functionName = tokens.join('@') || undefined;\n                    return new StackFrame(functionName,\n                        undefined,\n                        locationParts[0],\n                        locationParts[1],\n                        locationParts[2],\n                        line);\n                }\n            }, this);\n        },\n\n        parseOpera: function ErrorStackParser$$parseOpera(e) {\n            if (!e.stacktrace || (e.message.indexOf('\\n') > -1 &&\n                e.message.split('\\n').length > e.stacktrace.split('\\n').length)) {\n                return this.parseOpera9(e);\n            } else if (!e.stack) {\n                return this.parseOpera10(e);\n            } else {\n                return this.parseOpera11(e);\n            }\n        },\n\n        parseOpera9: function ErrorStackParser$$parseOpera9(e) {\n            var lineRE = /Line (\\d+).*script (?:in )?(\\S+)/i;\n            var lines = e.message.split('\\n');\n            var result = [];\n\n            for (var i = 2, len = lines.length; i < len; i += 2) {\n                var match = lineRE.exec(lines[i]);\n                if (match) {\n                    result.push(new StackFrame(undefined, undefined, match[2], match[1], undefined, lines[i]));\n                }\n            }\n\n            return result;\n        },\n\n        parseOpera10: function ErrorStackParser$$parseOpera10(e) {\n            var lineRE = /Line (\\d+).*script (?:in )?(\\S+)(?:: In function (\\S+))?$/i;\n            var lines = e.stacktrace.split('\\n');\n            var result = [];\n\n            for (var i = 0, len = lines.length; i < len; i += 2) {\n                var match = lineRE.exec(lines[i]);\n                if (match) {\n                    result.push(\n                        new StackFrame(\n                            match[3] || undefined,\n                            undefined,\n                            match[2],\n                            match[1],\n                            undefined,\n                            lines[i]\n                        )\n                    );\n                }\n            }\n\n            return result;\n        },\n\n        // Opera 10.65+ Error.stack very similar to FF/Safari\n        parseOpera11: function ErrorStackParser$$parseOpera11(error) {\n            var filtered = _filter(error.stack.split('\\n'), function(line) {\n                return !!line.match(FIREFOX_SAFARI_STACK_REGEXP) && !line.match(/^Error created at/);\n            }, this);\n\n            return _map(filtered, function(line) {\n                var tokens = line.split('@');\n                var locationParts = this.extractLocation(tokens.pop());\n                var functionCall = (tokens.shift() || '');\n                var functionName = functionCall\n                        .replace(/<anonymous function(: (\\w+))?>/, '$2')\n                        .replace(/\\([^\\)]*\\)/g, '') || undefined;\n                var argsRaw;\n                if (functionCall.match(/\\(([^\\)]*)\\)/)) {\n                    argsRaw = functionCall.replace(/^[^\\(]+\\(([^\\)]*)\\)$/, '$1');\n                }\n                var args = (argsRaw === undefined || argsRaw === '[arguments not available]') ?\n                    undefined : argsRaw.split(',');\n                return new StackFrame(\n                    functionName,\n                    args,\n                    locationParts[0],\n                    locationParts[1],\n                    locationParts[2],\n                    line);\n            }, this);\n        }\n    };\n}));\n\n","(function (root, factory) {\n    'use strict';\n    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.\n\n    /* istanbul ignore next */\n    if (typeof define === 'function' && define.amd) {\n        define('stackframe', [], factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory();\n    } else {\n        root.StackFrame = factory();\n    }\n}(this, function () {\n    'use strict';\n    function _isNumber(n) {\n        return !isNaN(parseFloat(n)) && isFinite(n);\n    }\n\n    function StackFrame(functionName, args, fileName, lineNumber, columnNumber, source) {\n        if (functionName !== undefined) {\n            this.setFunctionName(functionName);\n        }\n        if (args !== undefined) {\n            this.setArgs(args);\n        }\n        if (fileName !== undefined) {\n            this.setFileName(fileName);\n        }\n        if (lineNumber !== undefined) {\n            this.setLineNumber(lineNumber);\n        }\n        if (columnNumber !== undefined) {\n            this.setColumnNumber(columnNumber);\n        }\n        if (source !== undefined) {\n            this.setSource(source);\n        }\n    }\n\n    StackFrame.prototype = {\n        getFunctionName: function () {\n            return this.functionName;\n        },\n        setFunctionName: function (v) {\n            this.functionName = String(v);\n        },\n\n        getArgs: function () {\n            return this.args;\n        },\n        setArgs: function (v) {\n            if (Object.prototype.toString.call(v) !== '[object Array]') {\n                throw new TypeError('Args must be an Array');\n            }\n            this.args = v;\n        },\n\n        // NOTE: Property name may be misleading as it includes the path,\n        // but it somewhat mirrors V8's JavaScriptStackTraceApi\n        // https://code.google.com/p/v8/wiki/JavaScriptStackTraceApi and Gecko's\n        // http://mxr.mozilla.org/mozilla-central/source/xpcom/base/nsIException.idl#14\n        getFileName: function () {\n            return this.fileName;\n        },\n        setFileName: function (v) {\n            this.fileName = String(v);\n        },\n\n        getLineNumber: function () {\n            return this.lineNumber;\n        },\n        setLineNumber: function (v) {\n            if (!_isNumber(v)) {\n                throw new TypeError('Line Number must be a Number');\n            }\n            this.lineNumber = Number(v);\n        },\n\n        getColumnNumber: function () {\n            return this.columnNumber;\n        },\n        setColumnNumber: function (v) {\n            if (!_isNumber(v)) {\n                throw new TypeError('Column Number must be a Number');\n            }\n            this.columnNumber = Number(v);\n        },\n\n        getSource: function () {\n            return this.source;\n        },\n        setSource: function (v) {\n            this.source = String(v);\n        },\n\n        toString: function() {\n            var functionName = this.getFunctionName() || '{anonymous}';\n            var args = '(' + (this.getArgs() || []).join(',') + ')';\n            var fileName = this.getFileName() ? ('@' + this.getFileName()) : '';\n            var lineNumber = _isNumber(this.getLineNumber()) ? (':' + this.getLineNumber()) : '';\n            var columnNumber = _isNumber(this.getColumnNumber()) ? (':' + this.getColumnNumber()) : '';\n            return functionName + args + fileName + lineNumber + columnNumber;\n        }\n    };\n\n    return StackFrame;\n}));\n","(function (root, factory) {\n    'use strict';\n    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.\n\n    /* istanbul ignore next */\n    if (typeof define === 'function' && define.amd) {\n        define('stackframe', [], factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory();\n    } else {\n        root.StackFrame = factory();\n    }\n}(this, function () {\n    'use strict';\n    function _isNumber(n) {\n        return !isNaN(parseFloat(n)) && isFinite(n);\n    }\n\n    function _capitalize(str) {\n        return str[0].toUpperCase() + str.substring(1);\n    }\n\n    function _getter(p) {\n        return function () {\n            return this[p];\n        };\n    }\n\n    var booleanProps = ['isConstructor', 'isEval', 'isNative', 'isToplevel'];\n    var numericProps = ['columnNumber', 'lineNumber'];\n    var stringProps = ['fileName', 'functionName', 'source'];\n    var arrayProps = ['args'];\n\n    function StackFrame(obj) {\n        if (obj instanceof Object) {\n            var props = booleanProps.concat(numericProps.concat(stringProps.concat(arrayProps)));\n            for (var i = 0; i < props.length; i++) {\n                if (obj.hasOwnProperty(props[i]) && obj[props[i]] !== undefined) {\n                    this['set' + _capitalize(props[i])](obj[props[i]]);\n                }\n            }\n        }\n    }\n\n    StackFrame.prototype = {\n        getArgs: function () {\n            return this.args;\n        },\n        setArgs: function (v) {\n            if (Object.prototype.toString.call(v) !== '[object Array]') {\n                throw new TypeError('Args must be an Array');\n            }\n            this.args = v;\n        },\n\n        getEvalOrigin: function () {\n            return this.evalOrigin;\n        },\n        setEvalOrigin: function (v) {\n            if (v instanceof StackFrame) {\n                this.evalOrigin = v;\n            } else if (v instanceof Object) {\n                this.evalOrigin = new StackFrame(v);\n            } else {\n                throw new TypeError('Eval Origin must be an Object or StackFrame');\n            }\n        },\n\n        toString: function () {\n            var functionName = this.getFunctionName() || '{anonymous}';\n            var args = '(' + (this.getArgs() || []).join(',') + ')';\n            var fileName = this.getFileName() ? ('@' + this.getFileName()) : '';\n            var lineNumber = _isNumber(this.getLineNumber()) ? (':' + this.getLineNumber()) : '';\n            var columnNumber = _isNumber(this.getColumnNumber()) ? (':' + this.getColumnNumber()) : '';\n            return functionName + args + fileName + lineNumber + columnNumber;\n        }\n    };\n\n    for (var i = 0; i < booleanProps.length; i++) {\n        StackFrame.prototype['get' + _capitalize(booleanProps[i])] = _getter(booleanProps[i]);\n        StackFrame.prototype['set' + _capitalize(booleanProps[i])] = (function (p) {\n            return function (v) {\n                this[p] = Boolean(v);\n            };\n        })(booleanProps[i]);\n    }\n\n    for (var j = 0; j < numericProps.length; j++) {\n        StackFrame.prototype['get' + _capitalize(numericProps[j])] = _getter(numericProps[j]);\n        StackFrame.prototype['set' + _capitalize(numericProps[j])] = (function (p) {\n            return function (v) {\n                if (!_isNumber(v)) {\n                    throw new TypeError(p + ' must be a Number');\n                }\n                this[p] = Number(v);\n            };\n        })(numericProps[j]);\n    }\n\n    for (var k = 0; k < stringProps.length; k++) {\n        StackFrame.prototype['get' + _capitalize(stringProps[k])] = _getter(stringProps[k]);\n        StackFrame.prototype['set' + _capitalize(stringProps[k])] = (function (p) {\n            return function (v) {\n                this[p] = String(v);\n            };\n        })(stringProps[k]);\n    }\n\n    return StackFrame;\n}));\n","(function (root, factory) {\n    'use strict';\n    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.\n\n    /* istanbul ignore next */\n    if (typeof define === 'function' && define.amd) {\n        define('stack-generator', ['stackframe'], factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory(require('stackframe'));\n    } else {\n        root.StackGenerator = factory(root.StackFrame);\n    }\n}(this, function (StackFrame) {\n    return {\n        backtrace: function StackGenerator$$backtrace(opts) {\n            var stack = [];\n            var maxStackSize = 10;\n\n            if (typeof opts === 'object' && typeof opts.maxStackSize === 'number') {\n                maxStackSize = opts.maxStackSize;\n            }\n\n            var curr = arguments.callee;\n            while (curr && stack.length < maxStackSize) {\n                // Allow V8 optimizations\n                var args = new Array(curr['arguments'].length);\n                for(var i = 0; i < args.length; ++i) {\n                    args[i] = curr['arguments'][i];\n                }\n                if (/function(?:\\s+([\\w$]+))+\\s*\\(/.test(curr.toString())) {\n                    stack.push(new StackFrame({functionName: RegExp.$1 || undefined, args: args}));\n                } else {\n                    stack.push(new StackFrame({args: args}));\n                }\n\n                try {\n                    curr = curr.caller;\n                } catch (e) {\n                    break;\n                }\n            }\n            return stack;\n        }\n    };\n}));\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar util = require('./util');\nvar has = Object.prototype.hasOwnProperty;\n\n/**\n * A data structure which is a combination of an array and a set. Adding a new\n * member is O(1), testing for membership is O(1), and finding the index of an\n * element is O(1). Removing elements from the set is not supported. Only\n * strings are supported for membership.\n */\nfunction ArraySet() {\n  this._array = [];\n  this._set = Object.create(null);\n}\n\n/**\n * Static method for creating ArraySet instances from an existing array.\n */\nArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {\n  var set = new ArraySet();\n  for (var i = 0, len = aArray.length; i < len; i++) {\n    set.add(aArray[i], aAllowDuplicates);\n  }\n  return set;\n};\n\n/**\n * Return how many unique items are in this ArraySet. If duplicates have been\n * added, than those do not count towards the size.\n *\n * @returns Number\n */\nArraySet.prototype.size = function ArraySet_size() {\n  return Object.getOwnPropertyNames(this._set).length;\n};\n\n/**\n * Add the given string to this set.\n *\n * @param String aStr\n */\nArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {\n  var sStr = util.toSetString(aStr);\n  var isDuplicate = has.call(this._set, sStr);\n  var idx = this._array.length;\n  if (!isDuplicate || aAllowDuplicates) {\n    this._array.push(aStr);\n  }\n  if (!isDuplicate) {\n    this._set[sStr] = idx;\n  }\n};\n\n/**\n * Is the given string a member of this set?\n *\n * @param String aStr\n */\nArraySet.prototype.has = function ArraySet_has(aStr) {\n  var sStr = util.toSetString(aStr);\n  return has.call(this._set, sStr);\n};\n\n/**\n * What is the index of the given string in the array?\n *\n * @param String aStr\n */\nArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {\n  var sStr = util.toSetString(aStr);\n  if (has.call(this._set, sStr)) {\n    return this._set[sStr];\n  }\n  throw new Error('\"' + aStr + '\" is not in the set.');\n};\n\n/**\n * What is the element at the given index?\n *\n * @param Number aIdx\n */\nArraySet.prototype.at = function ArraySet_at(aIdx) {\n  if (aIdx >= 0 && aIdx < this._array.length) {\n    return this._array[aIdx];\n  }\n  throw new Error('No element indexed by ' + aIdx);\n};\n\n/**\n * Returns the array representation of this set (which has the proper indices\n * indicated by indexOf). Note that this is a copy of the internal array used\n * for storing the members so that no one can mess with internal state.\n */\nArraySet.prototype.toArray = function ArraySet_toArray() {\n  return this._array.slice();\n};\n\nexports.ArraySet = ArraySet;\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n *\n * Based on the Base 64 VLQ implementation in Closure Compiler:\n * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java\n *\n * Copyright 2011 The Closure Compiler Authors. All rights reserved.\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *  * Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above\n *    copyright notice, this list of conditions and the following\n *    disclaimer in the documentation and/or other materials provided\n *    with the distribution.\n *  * Neither the name of Google Inc. nor the names of its\n *    contributors may be used to endorse or promote products derived\n *    from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nvar base64 = require('./base64');\n\n// A single base 64 digit can contain 6 bits of data. For the base 64 variable\n// length quantities we use in the source map spec, the first bit is the sign,\n// the next four bits are the actual value, and the 6th bit is the\n// continuation bit. The continuation bit tells us whether there are more\n// digits in this value following this digit.\n//\n//   Continuation\n//   |    Sign\n//   |    |\n//   V    V\n//   101011\n\nvar VLQ_BASE_SHIFT = 5;\n\n// binary: 100000\nvar VLQ_BASE = 1 << VLQ_BASE_SHIFT;\n\n// binary: 011111\nvar VLQ_BASE_MASK = VLQ_BASE - 1;\n\n// binary: 100000\nvar VLQ_CONTINUATION_BIT = VLQ_BASE;\n\n/**\n * Converts from a two-complement value to a value where the sign bit is\n * placed in the least significant bit.  For example, as decimals:\n *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)\n *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)\n */\nfunction toVLQSigned(aValue) {\n  return aValue < 0\n    ? ((-aValue) << 1) + 1\n    : (aValue << 1) + 0;\n}\n\n/**\n * Converts to a two-complement value from a value where the sign bit is\n * placed in the least significant bit.  For example, as decimals:\n *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1\n *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2\n */\nfunction fromVLQSigned(aValue) {\n  var isNegative = (aValue & 1) === 1;\n  var shifted = aValue >> 1;\n  return isNegative\n    ? -shifted\n    : shifted;\n}\n\n/**\n * Returns the base 64 VLQ encoded value.\n */\nexports.encode = function base64VLQ_encode(aValue) {\n  var encoded = \"\";\n  var digit;\n\n  var vlq = toVLQSigned(aValue);\n\n  do {\n    digit = vlq & VLQ_BASE_MASK;\n    vlq >>>= VLQ_BASE_SHIFT;\n    if (vlq > 0) {\n      // There are still more digits in this value, so we must make sure the\n      // continuation bit is marked.\n      digit |= VLQ_CONTINUATION_BIT;\n    }\n    encoded += base64.encode(digit);\n  } while (vlq > 0);\n\n  return encoded;\n};\n\n/**\n * Decodes the next base 64 VLQ value from the given string and returns the\n * value and the rest of the string via the out parameter.\n */\nexports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {\n  var strLen = aStr.length;\n  var result = 0;\n  var shift = 0;\n  var continuation, digit;\n\n  do {\n    if (aIndex >= strLen) {\n      throw new Error(\"Expected more digits in base 64 VLQ value.\");\n    }\n\n    digit = base64.decode(aStr.charCodeAt(aIndex++));\n    if (digit === -1) {\n      throw new Error(\"Invalid base64 digit: \" + aStr.charAt(aIndex - 1));\n    }\n\n    continuation = !!(digit & VLQ_CONTINUATION_BIT);\n    digit &= VLQ_BASE_MASK;\n    result = result + (digit << shift);\n    shift += VLQ_BASE_SHIFT;\n  } while (continuation);\n\n  aOutParam.value = fromVLQSigned(result);\n  aOutParam.rest = aIndex;\n};\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n\n/**\n * Encode an integer in the range of 0 to 63 to a single base 64 digit.\n */\nexports.encode = function (number) {\n  if (0 <= number && number < intToCharMap.length) {\n    return intToCharMap[number];\n  }\n  throw new TypeError(\"Must be between 0 and 63: \" + number);\n};\n\n/**\n * Decode a single base 64 character code digit to an integer. Returns -1 on\n * failure.\n */\nexports.decode = function (charCode) {\n  var bigA = 65;     // 'A'\n  var bigZ = 90;     // 'Z'\n\n  var littleA = 97;  // 'a'\n  var littleZ = 122; // 'z'\n\n  var zero = 48;     // '0'\n  var nine = 57;     // '9'\n\n  var plus = 43;     // '+'\n  var slash = 47;    // '/'\n\n  var littleOffset = 26;\n  var numberOffset = 52;\n\n  // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ\n  if (bigA <= charCode && charCode <= bigZ) {\n    return (charCode - bigA);\n  }\n\n  // 26 - 51: abcdefghijklmnopqrstuvwxyz\n  if (littleA <= charCode && charCode <= littleZ) {\n    return (charCode - littleA + littleOffset);\n  }\n\n  // 52 - 61: 0123456789\n  if (zero <= charCode && charCode <= nine) {\n    return (charCode - zero + numberOffset);\n  }\n\n  // 62: +\n  if (charCode == plus) {\n    return 62;\n  }\n\n  // 63: /\n  if (charCode == slash) {\n    return 63;\n  }\n\n  // Invalid base64 digit.\n  return -1;\n};\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nexports.GREATEST_LOWER_BOUND = 1;\nexports.LEAST_UPPER_BOUND = 2;\n\n/**\n * Recursive implementation of binary search.\n *\n * @param aLow Indices here and lower do not contain the needle.\n * @param aHigh Indices here and higher do not contain the needle.\n * @param aNeedle The element being searched for.\n * @param aHaystack The non-empty array being searched.\n * @param aCompare Function which takes two elements and returns -1, 0, or 1.\n * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or\n *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n */\nfunction recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {\n  // This function terminates when one of the following is true:\n  //\n  //   1. We find the exact element we are looking for.\n  //\n  //   2. We did not find the exact element, but we can return the index of\n  //      the next-closest element.\n  //\n  //   3. We did not find the exact element, and there is no next-closest\n  //      element than the one we are searching for, so we return -1.\n  var mid = Math.floor((aHigh - aLow) / 2) + aLow;\n  var cmp = aCompare(aNeedle, aHaystack[mid], true);\n  if (cmp === 0) {\n    // Found the element we are looking for.\n    return mid;\n  }\n  else if (cmp > 0) {\n    // Our needle is greater than aHaystack[mid].\n    if (aHigh - mid > 1) {\n      // The element is in the upper half.\n      return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);\n    }\n\n    // The exact needle element was not found in this haystack. Determine if\n    // we are in termination case (3) or (2) and return the appropriate thing.\n    if (aBias == exports.LEAST_UPPER_BOUND) {\n      return aHigh < aHaystack.length ? aHigh : -1;\n    } else {\n      return mid;\n    }\n  }\n  else {\n    // Our needle is less than aHaystack[mid].\n    if (mid - aLow > 1) {\n      // The element is in the lower half.\n      return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);\n    }\n\n    // we are in termination case (3) or (2) and return the appropriate thing.\n    if (aBias == exports.LEAST_UPPER_BOUND) {\n      return mid;\n    } else {\n      return aLow < 0 ? -1 : aLow;\n    }\n  }\n}\n\n/**\n * This is an implementation of binary search which will always try and return\n * the index of the closest element if there is no exact hit. This is because\n * mappings between original and generated line/col pairs are single points,\n * and there is an implicit region between each of them, so a miss just means\n * that you aren't on the very start of a region.\n *\n * @param aNeedle The element you are looking for.\n * @param aHaystack The array that is being searched.\n * @param aCompare A function which takes the needle and an element in the\n *     array and returns -1, 0, or 1 depending on whether the needle is less\n *     than, equal to, or greater than the element, respectively.\n * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or\n *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.\n */\nexports.search = function search(aNeedle, aHaystack, aCompare, aBias) {\n  if (aHaystack.length === 0) {\n    return -1;\n  }\n\n  var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,\n                              aCompare, aBias || exports.GREATEST_LOWER_BOUND);\n  if (index < 0) {\n    return -1;\n  }\n\n  // We have found either the exact element, or the next-closest element than\n  // the one we are searching for. However, there may be more than one such\n  // element. Make sure we always return the smallest of these.\n  while (index - 1 >= 0) {\n    if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {\n      break;\n    }\n    --index;\n  }\n\n  return index;\n};\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\n// It turns out that some (most?) JavaScript engines don't self-host\n// `Array.prototype.sort`. This makes sense because C++ will likely remain\n// faster than JS when doing raw CPU-intensive sorting. However, when using a\n// custom comparator function, calling back and forth between the VM's C++ and\n// JIT'd JS is rather slow *and* loses JIT type information, resulting in\n// worse generated code for the comparator function than would be optimal. In\n// fact, when sorting with a comparator, these costs outweigh the benefits of\n// sorting in C++. By using our own JS-implemented Quick Sort (below), we get\n// a ~3500ms mean speed-up in `bench/bench.html`.\n\n/**\n * Swap the elements indexed by `x` and `y` in the array `ary`.\n *\n * @param {Array} ary\n *        The array.\n * @param {Number} x\n *        The index of the first item.\n * @param {Number} y\n *        The index of the second item.\n */\nfunction swap(ary, x, y) {\n  var temp = ary[x];\n  ary[x] = ary[y];\n  ary[y] = temp;\n}\n\n/**\n * Returns a random integer within the range `low .. high` inclusive.\n *\n * @param {Number} low\n *        The lower bound on the range.\n * @param {Number} high\n *        The upper bound on the range.\n */\nfunction randomIntInRange(low, high) {\n  return Math.round(low + (Math.random() * (high - low)));\n}\n\n/**\n * The Quick Sort algorithm.\n *\n * @param {Array} ary\n *        An array to sort.\n * @param {function} comparator\n *        Function to use to compare two items.\n * @param {Number} p\n *        Start index of the array\n * @param {Number} r\n *        End index of the array\n */\nfunction doQuickSort(ary, comparator, p, r) {\n  // If our lower bound is less than our upper bound, we (1) partition the\n  // array into two pieces and (2) recurse on each half. If it is not, this is\n  // the empty array and our base case.\n\n  if (p < r) {\n    // (1) Partitioning.\n    //\n    // The partitioning chooses a pivot between `p` and `r` and moves all\n    // elements that are less than or equal to the pivot to the before it, and\n    // all the elements that are greater than it after it. The effect is that\n    // once partition is done, the pivot is in the exact place it will be when\n    // the array is put in sorted order, and it will not need to be moved\n    // again. This runs in O(n) time.\n\n    // Always choose a random pivot so that an input array which is reverse\n    // sorted does not cause O(n^2) running time.\n    var pivotIndex = randomIntInRange(p, r);\n    var i = p - 1;\n\n    swap(ary, pivotIndex, r);\n    var pivot = ary[r];\n\n    // Immediately after `j` is incremented in this loop, the following hold\n    // true:\n    //\n    //   * Every element in `ary[p .. i]` is less than or equal to the pivot.\n    //\n    //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.\n    for (var j = p; j < r; j++) {\n      if (comparator(ary[j], pivot) <= 0) {\n        i += 1;\n        swap(ary, i, j);\n      }\n    }\n\n    swap(ary, i + 1, j);\n    var q = i + 1;\n\n    // (2) Recurse on each half.\n\n    doQuickSort(ary, comparator, p, q - 1);\n    doQuickSort(ary, comparator, q + 1, r);\n  }\n}\n\n/**\n * Sort the given array in-place with the given comparator function.\n *\n * @param {Array} ary\n *        An array to sort.\n * @param {function} comparator\n *        Function to use to compare two items.\n */\nexports.quickSort = function (ary, comparator) {\n  doQuickSort(ary, comparator, 0, ary.length - 1);\n};\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar util = require('./util');\nvar binarySearch = require('./binary-search');\nvar ArraySet = require('./array-set').ArraySet;\nvar base64VLQ = require('./base64-vlq');\nvar quickSort = require('./quick-sort').quickSort;\n\nfunction SourceMapConsumer(aSourceMap) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = JSON.parse(aSourceMap.replace(/^\\)\\]\\}'/, ''));\n  }\n\n  return sourceMap.sections != null\n    ? new IndexedSourceMapConsumer(sourceMap)\n    : new BasicSourceMapConsumer(sourceMap);\n}\n\nSourceMapConsumer.fromSourceMap = function(aSourceMap) {\n  return BasicSourceMapConsumer.fromSourceMap(aSourceMap);\n}\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nSourceMapConsumer.prototype._version = 3;\n\n// `__generatedMappings` and `__originalMappings` are arrays that hold the\n// parsed mapping coordinates from the source map's \"mappings\" attribute. They\n// are lazily instantiated, accessed via the `_generatedMappings` and\n// `_originalMappings` getters respectively, and we only parse the mappings\n// and create these arrays once queried for a source location. We jump through\n// these hoops because there can be many thousands of mappings, and parsing\n// them is expensive, so we only want to do it if we must.\n//\n// Each object in the arrays is of the form:\n//\n//     {\n//       generatedLine: The line number in the generated code,\n//       generatedColumn: The column number in the generated code,\n//       source: The path to the original source file that generated this\n//               chunk of code,\n//       originalLine: The line number in the original source that\n//                     corresponds to this chunk of generated code,\n//       originalColumn: The column number in the original source that\n//                       corresponds to this chunk of generated code,\n//       name: The name of the original symbol which generated this chunk of\n//             code.\n//     }\n//\n// All properties except for `generatedLine` and `generatedColumn` can be\n// `null`.\n//\n// `_generatedMappings` is ordered by the generated positions.\n//\n// `_originalMappings` is ordered by the original positions.\n\nSourceMapConsumer.prototype.__generatedMappings = null;\nObject.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {\n  get: function () {\n    if (!this.__generatedMappings) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n\n    return this.__generatedMappings;\n  }\n});\n\nSourceMapConsumer.prototype.__originalMappings = null;\nObject.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {\n  get: function () {\n    if (!this.__originalMappings) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n\n    return this.__originalMappings;\n  }\n});\n\nSourceMapConsumer.prototype._charIsMappingSeparator =\n  function SourceMapConsumer_charIsMappingSeparator(aStr, index) {\n    var c = aStr.charAt(index);\n    return c === \";\" || c === \",\";\n  };\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nSourceMapConsumer.prototype._parseMappings =\n  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    throw new Error(\"Subclasses must implement _parseMappings\");\n  };\n\nSourceMapConsumer.GENERATED_ORDER = 1;\nSourceMapConsumer.ORIGINAL_ORDER = 2;\n\nSourceMapConsumer.GREATEST_LOWER_BOUND = 1;\nSourceMapConsumer.LEAST_UPPER_BOUND = 2;\n\n/**\n * Iterate over each mapping between an original source/line/column and a\n * generated line/column in this source map.\n *\n * @param Function aCallback\n *        The function that is called with each mapping.\n * @param Object aContext\n *        Optional. If specified, this object will be the value of `this` every\n *        time that `aCallback` is called.\n * @param aOrder\n *        Either `SourceMapConsumer.GENERATED_ORDER` or\n *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to\n *        iterate over the mappings sorted by the generated file's line/column\n *        order or the original's source/line/column order, respectively. Defaults to\n *        `SourceMapConsumer.GENERATED_ORDER`.\n */\nSourceMapConsumer.prototype.eachMapping =\n  function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {\n    var context = aContext || null;\n    var order = aOrder || SourceMapConsumer.GENERATED_ORDER;\n\n    var mappings;\n    switch (order) {\n    case SourceMapConsumer.GENERATED_ORDER:\n      mappings = this._generatedMappings;\n      break;\n    case SourceMapConsumer.ORIGINAL_ORDER:\n      mappings = this._originalMappings;\n      break;\n    default:\n      throw new Error(\"Unknown order of iteration.\");\n    }\n\n    var sourceRoot = this.sourceRoot;\n    mappings.map(function (mapping) {\n      var source = mapping.source === null ? null : this._sources.at(mapping.source);\n      if (source != null && sourceRoot != null) {\n        source = util.join(sourceRoot, source);\n      }\n      return {\n        source: source,\n        generatedLine: mapping.generatedLine,\n        generatedColumn: mapping.generatedColumn,\n        originalLine: mapping.originalLine,\n        originalColumn: mapping.originalColumn,\n        name: mapping.name === null ? null : this._names.at(mapping.name)\n      };\n    }, this).forEach(aCallback, context);\n  };\n\n/**\n * Returns all generated line and column information for the original source,\n * line, and column provided. If no column is provided, returns all mappings\n * corresponding to a either the line we are searching for or the next\n * closest line that has any mappings. Otherwise, returns all mappings\n * corresponding to the given line and either the column we are searching for\n * or the next closest column that has any offsets.\n *\n * The only argument is an object with the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.\n *   - column: Optional. the column number in the original source.\n *\n * and an array of objects is returned, each with the following properties:\n *\n *   - line: The line number in the generated source, or null.\n *   - column: The column number in the generated source, or null.\n */\nSourceMapConsumer.prototype.allGeneratedPositionsFor =\n  function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {\n    var line = util.getArg(aArgs, 'line');\n\n    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping\n    // returns the index of the closest mapping less than the needle. By\n    // setting needle.originalColumn to 0, we thus find the last mapping for\n    // the given line, provided such a mapping exists.\n    var needle = {\n      source: util.getArg(aArgs, 'source'),\n      originalLine: line,\n      originalColumn: util.getArg(aArgs, 'column', 0)\n    };\n\n    if (this.sourceRoot != null) {\n      needle.source = util.relative(this.sourceRoot, needle.source);\n    }\n    if (!this._sources.has(needle.source)) {\n      return [];\n    }\n    needle.source = this._sources.indexOf(needle.source);\n\n    var mappings = [];\n\n    var index = this._findMapping(needle,\n                                  this._originalMappings,\n                                  \"originalLine\",\n                                  \"originalColumn\",\n                                  util.compareByOriginalPositions,\n                                  binarySearch.LEAST_UPPER_BOUND);\n    if (index >= 0) {\n      var mapping = this._originalMappings[index];\n\n      if (aArgs.column === undefined) {\n        var originalLine = mapping.originalLine;\n\n        // Iterate until either we run out of mappings, or we run into\n        // a mapping for a different line than the one we found. Since\n        // mappings are sorted, this is guaranteed to find all mappings for\n        // the line we found.\n        while (mapping && mapping.originalLine === originalLine) {\n          mappings.push({\n            line: util.getArg(mapping, 'generatedLine', null),\n            column: util.getArg(mapping, 'generatedColumn', null),\n            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n          });\n\n          mapping = this._originalMappings[++index];\n        }\n      } else {\n        var originalColumn = mapping.originalColumn;\n\n        // Iterate until either we run out of mappings, or we run into\n        // a mapping for a different line than the one we were searching for.\n        // Since mappings are sorted, this is guaranteed to find all mappings for\n        // the line we are searching for.\n        while (mapping &&\n               mapping.originalLine === line &&\n               mapping.originalColumn == originalColumn) {\n          mappings.push({\n            line: util.getArg(mapping, 'generatedLine', null),\n            column: util.getArg(mapping, 'generatedColumn', null),\n            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n          });\n\n          mapping = this._originalMappings[++index];\n        }\n      }\n    }\n\n    return mappings;\n  };\n\nexports.SourceMapConsumer = SourceMapConsumer;\n\n/**\n * A BasicSourceMapConsumer instance represents a parsed source map which we can\n * query for information about the original file positions by giving it a file\n * position in the generated source.\n *\n * The only parameter is the raw source map (either as a JSON string, or\n * already parsed to an object). According to the spec, source maps have the\n * following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - sources: An array of URLs to the original source files.\n *   - names: An array of identifiers which can be referrenced by individual mappings.\n *   - sourceRoot: Optional. The URL root from which all sources are relative.\n *   - sourcesContent: Optional. An array of contents of the original source files.\n *   - mappings: A string of base64 VLQs which contain the actual mappings.\n *   - file: Optional. The generated file this source map is associated with.\n *\n * Here is an example source map, taken from the source map spec[0]:\n *\n *     {\n *       version : 3,\n *       file: \"out.js\",\n *       sourceRoot : \"\",\n *       sources: [\"foo.js\", \"bar.js\"],\n *       names: [\"src\", \"maps\", \"are\", \"fun\"],\n *       mappings: \"AA,AB;;ABCDE;\"\n *     }\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#\n */\nfunction BasicSourceMapConsumer(aSourceMap) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = JSON.parse(aSourceMap.replace(/^\\)\\]\\}'/, ''));\n  }\n\n  var version = util.getArg(sourceMap, 'version');\n  var sources = util.getArg(sourceMap, 'sources');\n  // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which\n  // requires the array) to play nice here.\n  var names = util.getArg(sourceMap, 'names', []);\n  var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);\n  var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);\n  var mappings = util.getArg(sourceMap, 'mappings');\n  var file = util.getArg(sourceMap, 'file', null);\n\n  // Once again, Sass deviates from the spec and supplies the version as a\n  // string rather than a number, so we use loose equality checking here.\n  if (version != this._version) {\n    throw new Error('Unsupported version: ' + version);\n  }\n\n  sources = sources\n    .map(String)\n    // Some source maps produce relative source paths like \"./foo.js\" instead of\n    // \"foo.js\".  Normalize these first so that future comparisons will succeed.\n    // See bugzil.la/1090768.\n    .map(util.normalize)\n    // Always ensure that absolute sources are internally stored relative to\n    // the source root, if the source root is absolute. Not doing this would\n    // be particularly problematic when the source root is a prefix of the\n    // source (valid, but why??). See github issue #199 and bugzil.la/1188982.\n    .map(function (source) {\n      return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source)\n        ? util.relative(sourceRoot, source)\n        : source;\n    });\n\n  // Pass `true` below to allow duplicate names and sources. While source maps\n  // are intended to be compressed and deduplicated, the TypeScript compiler\n  // sometimes generates source maps with duplicates in them. See Github issue\n  // #72 and bugzil.la/889492.\n  this._names = ArraySet.fromArray(names.map(String), true);\n  this._sources = ArraySet.fromArray(sources, true);\n\n  this.sourceRoot = sourceRoot;\n  this.sourcesContent = sourcesContent;\n  this._mappings = mappings;\n  this.file = file;\n}\n\nBasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\nBasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;\n\n/**\n * Create a BasicSourceMapConsumer from a SourceMapGenerator.\n *\n * @param SourceMapGenerator aSourceMap\n *        The source map that will be consumed.\n * @returns BasicSourceMapConsumer\n */\nBasicSourceMapConsumer.fromSourceMap =\n  function SourceMapConsumer_fromSourceMap(aSourceMap) {\n    var smc = Object.create(BasicSourceMapConsumer.prototype);\n\n    var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);\n    var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);\n    smc.sourceRoot = aSourceMap._sourceRoot;\n    smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),\n                                                            smc.sourceRoot);\n    smc.file = aSourceMap._file;\n\n    // Because we are modifying the entries (by converting string sources and\n    // names to indices into the sources and names ArraySets), we have to make\n    // a copy of the entry or else bad things happen. Shared mutable state\n    // strikes again! See github issue #191.\n\n    var generatedMappings = aSourceMap._mappings.toArray().slice();\n    var destGeneratedMappings = smc.__generatedMappings = [];\n    var destOriginalMappings = smc.__originalMappings = [];\n\n    for (var i = 0, length = generatedMappings.length; i < length; i++) {\n      var srcMapping = generatedMappings[i];\n      var destMapping = new Mapping;\n      destMapping.generatedLine = srcMapping.generatedLine;\n      destMapping.generatedColumn = srcMapping.generatedColumn;\n\n      if (srcMapping.source) {\n        destMapping.source = sources.indexOf(srcMapping.source);\n        destMapping.originalLine = srcMapping.originalLine;\n        destMapping.originalColumn = srcMapping.originalColumn;\n\n        if (srcMapping.name) {\n          destMapping.name = names.indexOf(srcMapping.name);\n        }\n\n        destOriginalMappings.push(destMapping);\n      }\n\n      destGeneratedMappings.push(destMapping);\n    }\n\n    quickSort(smc.__originalMappings, util.compareByOriginalPositions);\n\n    return smc;\n  };\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nBasicSourceMapConsumer.prototype._version = 3;\n\n/**\n * The list of original sources.\n */\nObject.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {\n  get: function () {\n    return this._sources.toArray().map(function (s) {\n      return this.sourceRoot != null ? util.join(this.sourceRoot, s) : s;\n    }, this);\n  }\n});\n\n/**\n * Provide the JIT with a nice shape / hidden class.\n */\nfunction Mapping() {\n  this.generatedLine = 0;\n  this.generatedColumn = 0;\n  this.source = null;\n  this.originalLine = null;\n  this.originalColumn = null;\n  this.name = null;\n}\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nBasicSourceMapConsumer.prototype._parseMappings =\n  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    var generatedLine = 1;\n    var previousGeneratedColumn = 0;\n    var previousOriginalLine = 0;\n    var previousOriginalColumn = 0;\n    var previousSource = 0;\n    var previousName = 0;\n    var length = aStr.length;\n    var index = 0;\n    var cachedSegments = {};\n    var temp = {};\n    var originalMappings = [];\n    var generatedMappings = [];\n    var mapping, str, segment, end, value;\n\n    while (index < length) {\n      if (aStr.charAt(index) === ';') {\n        generatedLine++;\n        index++;\n        previousGeneratedColumn = 0;\n      }\n      else if (aStr.charAt(index) === ',') {\n        index++;\n      }\n      else {\n        mapping = new Mapping();\n        mapping.generatedLine = generatedLine;\n\n        // Because each offset is encoded relative to the previous one,\n        // many segments often have the same encoding. We can exploit this\n        // fact by caching the parsed variable length fields of each segment,\n        // allowing us to avoid a second parse if we encounter the same\n        // segment again.\n        for (end = index; end < length; end++) {\n          if (this._charIsMappingSeparator(aStr, end)) {\n            break;\n          }\n        }\n        str = aStr.slice(index, end);\n\n        segment = cachedSegments[str];\n        if (segment) {\n          index += str.length;\n        } else {\n          segment = [];\n          while (index < end) {\n            base64VLQ.decode(aStr, index, temp);\n            value = temp.value;\n            index = temp.rest;\n            segment.push(value);\n          }\n\n          if (segment.length === 2) {\n            throw new Error('Found a source, but no line and column');\n          }\n\n          if (segment.length === 3) {\n            throw new Error('Found a source and line, but no column');\n          }\n\n          cachedSegments[str] = segment;\n        }\n\n        // Generated column.\n        mapping.generatedColumn = previousGeneratedColumn + segment[0];\n        previousGeneratedColumn = mapping.generatedColumn;\n\n        if (segment.length > 1) {\n          // Original source.\n          mapping.source = previousSource + segment[1];\n          previousSource += segment[1];\n\n          // Original line.\n          mapping.originalLine = previousOriginalLine + segment[2];\n          previousOriginalLine = mapping.originalLine;\n          // Lines are stored 0-based\n          mapping.originalLine += 1;\n\n          // Original column.\n          mapping.originalColumn = previousOriginalColumn + segment[3];\n          previousOriginalColumn = mapping.originalColumn;\n\n          if (segment.length > 4) {\n            // Original name.\n            mapping.name = previousName + segment[4];\n            previousName += segment[4];\n          }\n        }\n\n        generatedMappings.push(mapping);\n        if (typeof mapping.originalLine === 'number') {\n          originalMappings.push(mapping);\n        }\n      }\n    }\n\n    quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);\n    this.__generatedMappings = generatedMappings;\n\n    quickSort(originalMappings, util.compareByOriginalPositions);\n    this.__originalMappings = originalMappings;\n  };\n\n/**\n * Find the mapping that best matches the hypothetical \"needle\" mapping that\n * we are searching for in the given \"haystack\" of mappings.\n */\nBasicSourceMapConsumer.prototype._findMapping =\n  function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,\n                                         aColumnName, aComparator, aBias) {\n    // To return the position we are searching for, we must first find the\n    // mapping for the given position and then return the opposite position it\n    // points to. Because the mappings are sorted, we can use binary search to\n    // find the best mapping.\n\n    if (aNeedle[aLineName] <= 0) {\n      throw new TypeError('Line must be greater than or equal to 1, got '\n                          + aNeedle[aLineName]);\n    }\n    if (aNeedle[aColumnName] < 0) {\n      throw new TypeError('Column must be greater than or equal to 0, got '\n                          + aNeedle[aColumnName]);\n    }\n\n    return binarySearch.search(aNeedle, aMappings, aComparator, aBias);\n  };\n\n/**\n * Compute the last column for each generated mapping. The last column is\n * inclusive.\n */\nBasicSourceMapConsumer.prototype.computeColumnSpans =\n  function SourceMapConsumer_computeColumnSpans() {\n    for (var index = 0; index < this._generatedMappings.length; ++index) {\n      var mapping = this._generatedMappings[index];\n\n      // Mappings do not contain a field for the last generated columnt. We\n      // can come up with an optimistic estimate, however, by assuming that\n      // mappings are contiguous (i.e. given two consecutive mappings, the\n      // first mapping ends where the second one starts).\n      if (index + 1 < this._generatedMappings.length) {\n        var nextMapping = this._generatedMappings[index + 1];\n\n        if (mapping.generatedLine === nextMapping.generatedLine) {\n          mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;\n          continue;\n        }\n      }\n\n      // The last mapping for each line spans the entire line.\n      mapping.lastGeneratedColumn = Infinity;\n    }\n  };\n\n/**\n * Returns the original source, line, and column information for the generated\n * source's line and column positions provided. The only argument is an object\n * with the following properties:\n *\n *   - line: The line number in the generated source.\n *   - column: The column number in the generated source.\n *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n *\n * and an object is returned with the following properties:\n *\n *   - source: The original source file, or null.\n *   - line: The line number in the original source, or null.\n *   - column: The column number in the original source, or null.\n *   - name: The original identifier, or null.\n */\nBasicSourceMapConsumer.prototype.originalPositionFor =\n  function SourceMapConsumer_originalPositionFor(aArgs) {\n    var needle = {\n      generatedLine: util.getArg(aArgs, 'line'),\n      generatedColumn: util.getArg(aArgs, 'column')\n    };\n\n    var index = this._findMapping(\n      needle,\n      this._generatedMappings,\n      \"generatedLine\",\n      \"generatedColumn\",\n      util.compareByGeneratedPositionsDeflated,\n      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)\n    );\n\n    if (index >= 0) {\n      var mapping = this._generatedMappings[index];\n\n      if (mapping.generatedLine === needle.generatedLine) {\n        var source = util.getArg(mapping, 'source', null);\n        if (source !== null) {\n          source = this._sources.at(source);\n          if (this.sourceRoot != null) {\n            source = util.join(this.sourceRoot, source);\n          }\n        }\n        var name = util.getArg(mapping, 'name', null);\n        if (name !== null) {\n          name = this._names.at(name);\n        }\n        return {\n          source: source,\n          line: util.getArg(mapping, 'originalLine', null),\n          column: util.getArg(mapping, 'originalColumn', null),\n          name: name\n        };\n      }\n    }\n\n    return {\n      source: null,\n      line: null,\n      column: null,\n      name: null\n    };\n  };\n\n/**\n * Return true if we have the source content for every source in the source\n * map, false otherwise.\n */\nBasicSourceMapConsumer.prototype.hasContentsOfAllSources =\n  function BasicSourceMapConsumer_hasContentsOfAllSources() {\n    if (!this.sourcesContent) {\n      return false;\n    }\n    return this.sourcesContent.length >= this._sources.size() &&\n      !this.sourcesContent.some(function (sc) { return sc == null; });\n  };\n\n/**\n * Returns the original source content. The only argument is the url of the\n * original source file. Returns null if no original source content is\n * available.\n */\nBasicSourceMapConsumer.prototype.sourceContentFor =\n  function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n    if (!this.sourcesContent) {\n      return null;\n    }\n\n    if (this.sourceRoot != null) {\n      aSource = util.relative(this.sourceRoot, aSource);\n    }\n\n    if (this._sources.has(aSource)) {\n      return this.sourcesContent[this._sources.indexOf(aSource)];\n    }\n\n    var url;\n    if (this.sourceRoot != null\n        && (url = util.urlParse(this.sourceRoot))) {\n      // XXX: file:// URIs and absolute paths lead to unexpected behavior for\n      // many users. We can help them out when they expect file:// URIs to\n      // behave like it would if they were running a local HTTP server. See\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.\n      var fileUriAbsPath = aSource.replace(/^file:\\/\\//, \"\");\n      if (url.scheme == \"file\"\n          && this._sources.has(fileUriAbsPath)) {\n        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]\n      }\n\n      if ((!url.path || url.path == \"/\")\n          && this._sources.has(\"/\" + aSource)) {\n        return this.sourcesContent[this._sources.indexOf(\"/\" + aSource)];\n      }\n    }\n\n    // This function is used recursively from\n    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we\n    // don't want to throw if we can't find the source - we just want to\n    // return null, so we provide a flag to exit gracefully.\n    if (nullOnMissing) {\n      return null;\n    }\n    else {\n      throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n    }\n  };\n\n/**\n * Returns the generated line and column information for the original source,\n * line, and column positions provided. The only argument is an object with\n * the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.\n *   - column: The column number in the original source.\n *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n *\n * and an object is returned with the following properties:\n *\n *   - line: The line number in the generated source, or null.\n *   - column: The column number in the generated source, or null.\n */\nBasicSourceMapConsumer.prototype.generatedPositionFor =\n  function SourceMapConsumer_generatedPositionFor(aArgs) {\n    var source = util.getArg(aArgs, 'source');\n    if (this.sourceRoot != null) {\n      source = util.relative(this.sourceRoot, source);\n    }\n    if (!this._sources.has(source)) {\n      return {\n        line: null,\n        column: null,\n        lastColumn: null\n      };\n    }\n    source = this._sources.indexOf(source);\n\n    var needle = {\n      source: source,\n      originalLine: util.getArg(aArgs, 'line'),\n      originalColumn: util.getArg(aArgs, 'column')\n    };\n\n    var index = this._findMapping(\n      needle,\n      this._originalMappings,\n      \"originalLine\",\n      \"originalColumn\",\n      util.compareByOriginalPositions,\n      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)\n    );\n\n    if (index >= 0) {\n      var mapping = this._originalMappings[index];\n\n      if (mapping.source === needle.source) {\n        return {\n          line: util.getArg(mapping, 'generatedLine', null),\n          column: util.getArg(mapping, 'generatedColumn', null),\n          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n        };\n      }\n    }\n\n    return {\n      line: null,\n      column: null,\n      lastColumn: null\n    };\n  };\n\nexports.BasicSourceMapConsumer = BasicSourceMapConsumer;\n\n/**\n * An IndexedSourceMapConsumer instance represents a parsed source map which\n * we can query for information. It differs from BasicSourceMapConsumer in\n * that it takes \"indexed\" source maps (i.e. ones with a \"sections\" field) as\n * input.\n *\n * The only parameter is a raw source map (either as a JSON string, or already\n * parsed to an object). According to the spec for indexed source maps, they\n * have the following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - file: Optional. The generated file this source map is associated with.\n *   - sections: A list of section definitions.\n *\n * Each value under the \"sections\" field has two fields:\n *   - offset: The offset into the original specified at which this section\n *       begins to apply, defined as an object with a \"line\" and \"column\"\n *       field.\n *   - map: A source map definition. This source map could also be indexed,\n *       but doesn't have to be.\n *\n * Instead of the \"map\" field, it's also possible to have a \"url\" field\n * specifying a URL to retrieve a source map from, but that's currently\n * unsupported.\n *\n * Here's an example source map, taken from the source map spec[0], but\n * modified to omit a section which uses the \"url\" field.\n *\n *  {\n *    version : 3,\n *    file: \"app.js\",\n *    sections: [{\n *      offset: {line:100, column:10},\n *      map: {\n *        version : 3,\n *        file: \"section.js\",\n *        sources: [\"foo.js\", \"bar.js\"],\n *        names: [\"src\", \"maps\", \"are\", \"fun\"],\n *        mappings: \"AAAA,E;;ABCDE;\"\n *      }\n *    }],\n *  }\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt\n */\nfunction IndexedSourceMapConsumer(aSourceMap) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = JSON.parse(aSourceMap.replace(/^\\)\\]\\}'/, ''));\n  }\n\n  var version = util.getArg(sourceMap, 'version');\n  var sections = util.getArg(sourceMap, 'sections');\n\n  if (version != this._version) {\n    throw new Error('Unsupported version: ' + version);\n  }\n\n  this._sources = new ArraySet();\n  this._names = new ArraySet();\n\n  var lastOffset = {\n    line: -1,\n    column: 0\n  };\n  this._sections = sections.map(function (s) {\n    if (s.url) {\n      // The url field will require support for asynchronicity.\n      // See https://github.com/mozilla/source-map/issues/16\n      throw new Error('Support for url field in sections not implemented.');\n    }\n    var offset = util.getArg(s, 'offset');\n    var offsetLine = util.getArg(offset, 'line');\n    var offsetColumn = util.getArg(offset, 'column');\n\n    if (offsetLine < lastOffset.line ||\n        (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {\n      throw new Error('Section offsets must be ordered and non-overlapping.');\n    }\n    lastOffset = offset;\n\n    return {\n      generatedOffset: {\n        // The offset fields are 0-based, but we use 1-based indices when\n        // encoding/decoding from VLQ.\n        generatedLine: offsetLine + 1,\n        generatedColumn: offsetColumn + 1\n      },\n      consumer: new SourceMapConsumer(util.getArg(s, 'map'))\n    }\n  });\n}\n\nIndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\nIndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nIndexedSourceMapConsumer.prototype._version = 3;\n\n/**\n * The list of original sources.\n */\nObject.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {\n  get: function () {\n    var sources = [];\n    for (var i = 0; i < this._sections.length; i++) {\n      for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {\n        sources.push(this._sections[i].consumer.sources[j]);\n      }\n    }\n    return sources;\n  }\n});\n\n/**\n * Returns the original source, line, and column information for the generated\n * source's line and column positions provided. The only argument is an object\n * with the following properties:\n *\n *   - line: The line number in the generated source.\n *   - column: The column number in the generated source.\n *\n * and an object is returned with the following properties:\n *\n *   - source: The original source file, or null.\n *   - line: The line number in the original source, or null.\n *   - column: The column number in the original source, or null.\n *   - name: The original identifier, or null.\n */\nIndexedSourceMapConsumer.prototype.originalPositionFor =\n  function IndexedSourceMapConsumer_originalPositionFor(aArgs) {\n    var needle = {\n      generatedLine: util.getArg(aArgs, 'line'),\n      generatedColumn: util.getArg(aArgs, 'column')\n    };\n\n    // Find the section containing the generated position we're trying to map\n    // to an original position.\n    var sectionIndex = binarySearch.search(needle, this._sections,\n      function(needle, section) {\n        var cmp = needle.generatedLine - section.generatedOffset.generatedLine;\n        if (cmp) {\n          return cmp;\n        }\n\n        return (needle.generatedColumn -\n                section.generatedOffset.generatedColumn);\n      });\n    var section = this._sections[sectionIndex];\n\n    if (!section) {\n      return {\n        source: null,\n        line: null,\n        column: null,\n        name: null\n      };\n    }\n\n    return section.consumer.originalPositionFor({\n      line: needle.generatedLine -\n        (section.generatedOffset.generatedLine - 1),\n      column: needle.generatedColumn -\n        (section.generatedOffset.generatedLine === needle.generatedLine\n         ? section.generatedOffset.generatedColumn - 1\n         : 0),\n      bias: aArgs.bias\n    });\n  };\n\n/**\n * Return true if we have the source content for every source in the source\n * map, false otherwise.\n */\nIndexedSourceMapConsumer.prototype.hasContentsOfAllSources =\n  function IndexedSourceMapConsumer_hasContentsOfAllSources() {\n    return this._sections.every(function (s) {\n      return s.consumer.hasContentsOfAllSources();\n    });\n  };\n\n/**\n * Returns the original source content. The only argument is the url of the\n * original source file. Returns null if no original source content is\n * available.\n */\nIndexedSourceMapConsumer.prototype.sourceContentFor =\n  function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n\n      var content = section.consumer.sourceContentFor(aSource, true);\n      if (content) {\n        return content;\n      }\n    }\n    if (nullOnMissing) {\n      return null;\n    }\n    else {\n      throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n    }\n  };\n\n/**\n * Returns the generated line and column information for the original source,\n * line, and column positions provided. The only argument is an object with\n * the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.\n *   - column: The column number in the original source.\n *\n * and an object is returned with the following properties:\n *\n *   - line: The line number in the generated source, or null.\n *   - column: The column number in the generated source, or null.\n */\nIndexedSourceMapConsumer.prototype.generatedPositionFor =\n  function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n\n      // Only consider this section if the requested source is in the list of\n      // sources of the consumer.\n      if (section.consumer.sources.indexOf(util.getArg(aArgs, 'source')) === -1) {\n        continue;\n      }\n      var generatedPosition = section.consumer.generatedPositionFor(aArgs);\n      if (generatedPosition) {\n        var ret = {\n          line: generatedPosition.line +\n            (section.generatedOffset.generatedLine - 1),\n          column: generatedPosition.column +\n            (section.generatedOffset.generatedLine === generatedPosition.line\n             ? section.generatedOffset.generatedColumn - 1\n             : 0)\n        };\n        return ret;\n      }\n    }\n\n    return {\n      line: null,\n      column: null\n    };\n  };\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nIndexedSourceMapConsumer.prototype._parseMappings =\n  function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    this.__generatedMappings = [];\n    this.__originalMappings = [];\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n      var sectionMappings = section.consumer._generatedMappings;\n      for (var j = 0; j < sectionMappings.length; j++) {\n        var mapping = sectionMappings[j];\n\n        var source = section.consumer._sources.at(mapping.source);\n        if (section.consumer.sourceRoot !== null) {\n          source = util.join(section.consumer.sourceRoot, source);\n        }\n        this._sources.add(source);\n        source = this._sources.indexOf(source);\n\n        var name = section.consumer._names.at(mapping.name);\n        this._names.add(name);\n        name = this._names.indexOf(name);\n\n        // The mappings coming from the consumer for the section have\n        // generated positions relative to the start of the section, so we\n        // need to offset them to be relative to the start of the concatenated\n        // generated file.\n        var adjustedMapping = {\n          source: source,\n          generatedLine: mapping.generatedLine +\n            (section.generatedOffset.generatedLine - 1),\n          generatedColumn: mapping.generatedColumn +\n            (section.generatedOffset.generatedLine === mapping.generatedLine\n            ? section.generatedOffset.generatedColumn - 1\n            : 0),\n          originalLine: mapping.originalLine,\n          originalColumn: mapping.originalColumn,\n          name: name\n        };\n\n        this.__generatedMappings.push(adjustedMapping);\n        if (typeof adjustedMapping.originalLine === 'number') {\n          this.__originalMappings.push(adjustedMapping);\n        }\n      }\n    }\n\n    quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);\n    quickSort(this.__originalMappings, util.compareByOriginalPositions);\n  };\n\nexports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\n/**\n * This is a helper function for getting values from parameter/options\n * objects.\n *\n * @param args The object we are extracting values from\n * @param name The name of the property we are getting.\n * @param defaultValue An optional value to return if the property is missing\n * from the object. If this is not specified and the property is missing, an\n * error will be thrown.\n */\nfunction getArg(aArgs, aName, aDefaultValue) {\n  if (aName in aArgs) {\n    return aArgs[aName];\n  } else if (arguments.length === 3) {\n    return aDefaultValue;\n  } else {\n    throw new Error('\"' + aName + '\" is a required argument.');\n  }\n}\nexports.getArg = getArg;\n\nvar urlRegexp = /^(?:([\\w+\\-.]+):)?\\/\\/(?:(\\w+:\\w+)@)?([\\w.]*)(?::(\\d+))?(\\S*)$/;\nvar dataUrlRegexp = /^data:.+\\,.+$/;\n\nfunction urlParse(aUrl) {\n  var match = aUrl.match(urlRegexp);\n  if (!match) {\n    return null;\n  }\n  return {\n    scheme: match[1],\n    auth: match[2],\n    host: match[3],\n    port: match[4],\n    path: match[5]\n  };\n}\nexports.urlParse = urlParse;\n\nfunction urlGenerate(aParsedUrl) {\n  var url = '';\n  if (aParsedUrl.scheme) {\n    url += aParsedUrl.scheme + ':';\n  }\n  url += '//';\n  if (aParsedUrl.auth) {\n    url += aParsedUrl.auth + '@';\n  }\n  if (aParsedUrl.host) {\n    url += aParsedUrl.host;\n  }\n  if (aParsedUrl.port) {\n    url += \":\" + aParsedUrl.port\n  }\n  if (aParsedUrl.path) {\n    url += aParsedUrl.path;\n  }\n  return url;\n}\nexports.urlGenerate = urlGenerate;\n\n/**\n * Normalizes a path, or the path portion of a URL:\n *\n * - Replaces consecutive slashes with one slash.\n * - Removes unnecessary '.' parts.\n * - Removes unnecessary '<dir>/..' parts.\n *\n * Based on code in the Node.js 'path' core module.\n *\n * @param aPath The path or url to normalize.\n */\nfunction normalize(aPath) {\n  var path = aPath;\n  var url = urlParse(aPath);\n  if (url) {\n    if (!url.path) {\n      return aPath;\n    }\n    path = url.path;\n  }\n  var isAbsolute = exports.isAbsolute(path);\n\n  var parts = path.split(/\\/+/);\n  for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {\n    part = parts[i];\n    if (part === '.') {\n      parts.splice(i, 1);\n    } else if (part === '..') {\n      up++;\n    } else if (up > 0) {\n      if (part === '') {\n        // The first part is blank if the path is absolute. Trying to go\n        // above the root is a no-op. Therefore we can remove all '..' parts\n        // directly after the root.\n        parts.splice(i + 1, up);\n        up = 0;\n      } else {\n        parts.splice(i, 2);\n        up--;\n      }\n    }\n  }\n  path = parts.join('/');\n\n  if (path === '') {\n    path = isAbsolute ? '/' : '.';\n  }\n\n  if (url) {\n    url.path = path;\n    return urlGenerate(url);\n  }\n  return path;\n}\nexports.normalize = normalize;\n\n/**\n * Joins two paths/URLs.\n *\n * @param aRoot The root path or URL.\n * @param aPath The path or URL to be joined with the root.\n *\n * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a\n *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended\n *   first.\n * - Otherwise aPath is a path. If aRoot is a URL, then its path portion\n *   is updated with the result and aRoot is returned. Otherwise the result\n *   is returned.\n *   - If aPath is absolute, the result is aPath.\n *   - Otherwise the two paths are joined with a slash.\n * - Joining for example 'http://' and 'www.example.com' is also supported.\n */\nfunction join(aRoot, aPath) {\n  if (aRoot === \"\") {\n    aRoot = \".\";\n  }\n  if (aPath === \"\") {\n    aPath = \".\";\n  }\n  var aPathUrl = urlParse(aPath);\n  var aRootUrl = urlParse(aRoot);\n  if (aRootUrl) {\n    aRoot = aRootUrl.path || '/';\n  }\n\n  // `join(foo, '//www.example.org')`\n  if (aPathUrl && !aPathUrl.scheme) {\n    if (aRootUrl) {\n      aPathUrl.scheme = aRootUrl.scheme;\n    }\n    return urlGenerate(aPathUrl);\n  }\n\n  if (aPathUrl || aPath.match(dataUrlRegexp)) {\n    return aPath;\n  }\n\n  // `join('http://', 'www.example.com')`\n  if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {\n    aRootUrl.host = aPath;\n    return urlGenerate(aRootUrl);\n  }\n\n  var joined = aPath.charAt(0) === '/'\n    ? aPath\n    : normalize(aRoot.replace(/\\/+$/, '') + '/' + aPath);\n\n  if (aRootUrl) {\n    aRootUrl.path = joined;\n    return urlGenerate(aRootUrl);\n  }\n  return joined;\n}\nexports.join = join;\n\nexports.isAbsolute = function (aPath) {\n  return aPath.charAt(0) === '/' || !!aPath.match(urlRegexp);\n};\n\n/**\n * Make a path relative to a URL or another path.\n *\n * @param aRoot The root path or URL.\n * @param aPath The path or URL to be made relative to aRoot.\n */\nfunction relative(aRoot, aPath) {\n  if (aRoot === \"\") {\n    aRoot = \".\";\n  }\n\n  aRoot = aRoot.replace(/\\/$/, '');\n\n  // It is possible for the path to be above the root. In this case, simply\n  // checking whether the root is a prefix of the path won't work. Instead, we\n  // need to remove components from the root one by one, until either we find\n  // a prefix that fits, or we run out of components to remove.\n  var level = 0;\n  while (aPath.indexOf(aRoot + '/') !== 0) {\n    var index = aRoot.lastIndexOf(\"/\");\n    if (index < 0) {\n      return aPath;\n    }\n\n    // If the only part of the root that is left is the scheme (i.e. http://,\n    // file:///, etc.), one or more slashes (/), or simply nothing at all, we\n    // have exhausted all components, so the path is not relative to the root.\n    aRoot = aRoot.slice(0, index);\n    if (aRoot.match(/^([^\\/]+:\\/)?\\/*$/)) {\n      return aPath;\n    }\n\n    ++level;\n  }\n\n  // Make sure we add a \"../\" for each component we removed from the root.\n  return Array(level + 1).join(\"../\") + aPath.substr(aRoot.length + 1);\n}\nexports.relative = relative;\n\nvar supportsNullProto = (function () {\n  var obj = Object.create(null);\n  return !('__proto__' in obj);\n}());\n\nfunction identity (s) {\n  return s;\n}\n\n/**\n * Because behavior goes wacky when you set `__proto__` on objects, we\n * have to prefix all the strings in our set with an arbitrary character.\n *\n * See https://github.com/mozilla/source-map/pull/31 and\n * https://github.com/mozilla/source-map/issues/30\n *\n * @param String aStr\n */\nfunction toSetString(aStr) {\n  if (isProtoString(aStr)) {\n    return '$' + aStr;\n  }\n\n  return aStr;\n}\nexports.toSetString = supportsNullProto ? identity : toSetString;\n\nfunction fromSetString(aStr) {\n  if (isProtoString(aStr)) {\n    return aStr.slice(1);\n  }\n\n  return aStr;\n}\nexports.fromSetString = supportsNullProto ? identity : fromSetString;\n\nfunction isProtoString(s) {\n  if (!s) {\n    return false;\n  }\n\n  var length = s.length;\n\n  if (length < 9 /* \"__proto__\".length */) {\n    return false;\n  }\n\n  if (s.charCodeAt(length - 1) !== 95  /* '_' */ ||\n      s.charCodeAt(length - 2) !== 95  /* '_' */ ||\n      s.charCodeAt(length - 3) !== 111 /* 'o' */ ||\n      s.charCodeAt(length - 4) !== 116 /* 't' */ ||\n      s.charCodeAt(length - 5) !== 111 /* 'o' */ ||\n      s.charCodeAt(length - 6) !== 114 /* 'r' */ ||\n      s.charCodeAt(length - 7) !== 112 /* 'p' */ ||\n      s.charCodeAt(length - 8) !== 95  /* '_' */ ||\n      s.charCodeAt(length - 9) !== 95  /* '_' */) {\n    return false;\n  }\n\n  for (var i = length - 10; i >= 0; i--) {\n    if (s.charCodeAt(i) !== 36 /* '$' */) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Comparator between two mappings where the original positions are compared.\n *\n * Optionally pass in `true` as `onlyCompareGenerated` to consider two\n * mappings with the same original source/line/column, but different generated\n * line and column the same. Useful when searching for a mapping with a\n * stubbed out mapping.\n */\nfunction compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {\n  var cmp = mappingA.source - mappingB.source;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0 || onlyCompareOriginal) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedLine - mappingB.generatedLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return mappingA.name - mappingB.name;\n}\nexports.compareByOriginalPositions = compareByOriginalPositions;\n\n/**\n * Comparator between two mappings with deflated source and name indices where\n * the generated positions are compared.\n *\n * Optionally pass in `true` as `onlyCompareGenerated` to consider two\n * mappings with the same generated line and column, but different\n * source/name/original line and column the same. Useful when searching for a\n * mapping with a stubbed out mapping.\n */\nfunction compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {\n  var cmp = mappingA.generatedLine - mappingB.generatedLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0 || onlyCompareGenerated) {\n    return cmp;\n  }\n\n  cmp = mappingA.source - mappingB.source;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return mappingA.name - mappingB.name;\n}\nexports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;\n\nfunction strcmp(aStr1, aStr2) {\n  if (aStr1 === aStr2) {\n    return 0;\n  }\n\n  if (aStr1 > aStr2) {\n    return 1;\n  }\n\n  return -1;\n}\n\n/**\n * Comparator between two mappings with inflated source and name strings where\n * the generated positions are compared.\n */\nfunction compareByGeneratedPositionsInflated(mappingA, mappingB) {\n  var cmp = mappingA.generatedLine - mappingB.generatedLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = strcmp(mappingA.source, mappingB.source);\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return strcmp(mappingA.name, mappingB.name);\n}\nexports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;\n","(function(root, factory) {\n    'use strict';\n    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.\n\n    /* istanbul ignore next */\n    if (typeof define === 'function' && define.amd) {\n        define('stacktrace-gps', ['source-map', 'stackframe'], factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory(require('source-map/lib/source-map-consumer'), require('stackframe'));\n    } else {\n        root.StackTraceGPS = factory(root.SourceMap || root.sourceMap, root.StackFrame);\n    }\n}(this, function(SourceMap, StackFrame) {\n    'use strict';\n\n    /**\n     * Make a X-Domain request to url and callback.\n     *\n     * @param {String} url\n     * @returns {Promise} with response text if fulfilled\n     */\n    function _xdr(url) {\n        return new Promise(function(resolve, reject) {\n            var req = new XMLHttpRequest();\n            req.open('get', url);\n            req.onerror = reject;\n            req.onreadystatechange = function onreadystatechange() {\n                if (req.readyState === 4) {\n                    if (req.status >= 200 && req.status < 300) {\n                        resolve(req.responseText);\n                    } else {\n                        reject(new Error('HTTP status: ' + req.status + ' retrieving ' + url));\n                    }\n                }\n            };\n            req.send();\n        });\n\n    }\n\n    /**\n     * Convert a Base64-encoded string into its original representation.\n     * Used for inline sourcemaps.\n     *\n     * @param {String} b64str Base-64 encoded string\n     * @returns {String} original representation of the base64-encoded string.\n     */\n    function _atob(b64str) {\n        if (typeof window !== 'undefined' && window.atob) {\n            return window.atob(b64str);\n        } else {\n            throw new Error('You must supply a polyfill for window.atob in this environment');\n        }\n    }\n\n    function _parseJson(string) {\n        if (typeof JSON !== 'undefined' && JSON.parse) {\n            return JSON.parse(string);\n        } else {\n            throw new Error('You must supply a polyfill for JSON.parse in this environment');\n        }\n    }\n\n    function _findFunctionName(source, lineNumber/*, columnNumber*/) {\n        // function {name}({args}) m[1]=name m[2]=args\n        var reFunctionDeclaration = /function\\s+([^(]*?)\\s*\\(([^)]*)\\)/;\n        // {name} = function ({args}) TODO args capture\n        var reFunctionExpression = /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*function\\b/;\n        // {name} = eval()\n        var reFunctionEvaluation = /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*(?:eval|new Function)\\b/;\n        var lines = source.split('\\n');\n\n        // Walk backwards in the source lines until we find the line which matches one of the patterns above\n        var code = '';\n        var maxLines = Math.min(lineNumber, 20);\n        var m;\n        for (var i = 0; i < maxLines; ++i) {\n            // lineNo is 1-based, source[] is 0-based\n            var line = lines[lineNumber - i - 1];\n            var commentPos = line.indexOf('//');\n            if (commentPos >= 0) {\n                line = line.substr(0, commentPos);\n            }\n\n            if (line) {\n                code = line + code;\n                m = reFunctionExpression.exec(code);\n                if (m && m[1]) {\n                    return m[1];\n                }\n                m = reFunctionDeclaration.exec(code);\n                if (m && m[1]) {\n                    return m[1];\n                }\n                m = reFunctionEvaluation.exec(code);\n                if (m && m[1]) {\n                    return m[1];\n                }\n            }\n        }\n        return undefined;\n    }\n\n    function _ensureSupportedEnvironment() {\n        if (typeof Object.defineProperty !== 'function' || typeof Object.create !== 'function') {\n            throw new Error('Unable to consume source maps in older browsers');\n        }\n    }\n\n    function _ensureStackFrameIsLegit(stackframe) {\n        if (typeof stackframe !== 'object') {\n            throw new TypeError('Given StackFrame is not an object');\n        } else if (typeof stackframe.fileName !== 'string') {\n            throw new TypeError('Given file name is not a String');\n        } else if (typeof stackframe.lineNumber !== 'number' ||\n            stackframe.lineNumber % 1 !== 0 ||\n            stackframe.lineNumber < 1) {\n            throw new TypeError('Given line number must be a positive integer');\n        } else if (typeof stackframe.columnNumber !== 'number' ||\n            stackframe.columnNumber % 1 !== 0 ||\n            stackframe.columnNumber < 0) {\n            throw new TypeError('Given column number must be a non-negative integer');\n        }\n        return true;\n    }\n\n    function _findSourceMappingURL(source) {\n        var m = /\\/\\/[#@] ?sourceMappingURL=([^\\s'\"]+)\\s*$/.exec(source);\n        if (m && m[1]) {\n            return m[1];\n        } else {\n            throw new Error('sourceMappingURL not found');\n        }\n    }\n\n    function _extractLocationInfoFromSourceMap(stackframe, rawSourceMap, sourceCache) {\n        return new Promise(function(resolve, reject) {\n            var mapConsumer = new SourceMap.SourceMapConsumer(rawSourceMap);\n\n            var loc = mapConsumer.originalPositionFor({\n                line: stackframe.lineNumber,\n                column: stackframe.columnNumber\n            });\n\n            if (loc.source) {\n                var mappedSource = mapConsumer.sourceContentFor(loc.source);\n                if (mappedSource) {\n                    sourceCache[loc.source] = mappedSource;\n                }\n                resolve(\n                    new StackFrame(\n                        loc.name || stackframe.functionName,\n                        stackframe.args,\n                        loc.source,\n                        loc.line,\n                        loc.column));\n            } else {\n                reject(new Error('Could not get original source for given stackframe and source map'));\n            }\n        });\n    }\n\n    /**\n     * @constructor\n     * @param {Object} opts\n     *      opts.sourceCache = {url: \"Source String\"} => preload source cache\n     *      opts.offline = True to prevent network requests.\n     *              Best effort without sources or source maps.\n     *      opts.ajax = Promise returning function to make X-Domain requests\n     */\n    return function StackTraceGPS(opts) {\n        if (!(this instanceof StackTraceGPS)) {\n            return new StackTraceGPS(opts);\n        }\n        opts = opts || {};\n\n        this.sourceCache = opts.sourceCache || {};\n\n        this.ajax = opts.ajax || _xdr;\n\n        this._atob = opts.atob || _atob;\n\n        this._get = function _get(location) {\n            return new Promise(function(resolve, reject) {\n                var isDataUrl = location.substr(0, 5) === 'data:';\n                if (this.sourceCache[location]) {\n                    resolve(this.sourceCache[location]);\n                } else if (opts.offline && !isDataUrl) {\n                    reject(new Error('Cannot make network requests in offline mode'));\n                } else {\n                    if (isDataUrl) {\n                        // data URLs can have parameters.\n                        // see http://tools.ietf.org/html/rfc2397\n                        var supportedEncodingRegexp =\n                            /^data:application\\/json;([\\w=:\"-]+;)*base64,/;\n                        var match = location.match(supportedEncodingRegexp);\n                        if (match) {\n                            var sourceMapStart = match[0].length;\n                            var encodedSource = location.substr(sourceMapStart);\n                            var source = this._atob(encodedSource);\n                            this.sourceCache[location] = source;\n                            resolve(source);\n                        } else {\n                            reject(new Error('The encoding of the inline sourcemap is not supported'));\n                        }\n                    } else {\n                        var xhrPromise = this.ajax(location, {method: 'get'});\n                        // Cache the Promise to prevent duplicate in-flight requests\n                        this.sourceCache[location] = xhrPromise;\n                        xhrPromise.then(resolve, reject);\n                    }\n                }\n            }.bind(this));\n        };\n\n        /**\n         * Given a StackFrame, enhance function name and use source maps for a\n         * better StackFrame.\n         *\n         * @param {StackFrame} stackframe object\n         * @returns {Promise} that resolves with with source-mapped StackFrame\n         */\n        this.pinpoint = function StackTraceGPS$$pinpoint(stackframe) {\n            return new Promise(function(resolve, reject) {\n                this.getMappedLocation(stackframe).then(function(mappedStackFrame) {\n                    function resolveMappedStackFrame() {\n                        resolve(mappedStackFrame);\n                    }\n\n                    this.findFunctionName(mappedStackFrame)\n                        .then(resolve, resolveMappedStackFrame)\n                        ['catch'](resolveMappedStackFrame);\n                }.bind(this), reject);\n            }.bind(this));\n        };\n\n        /**\n         * Given a StackFrame, guess function name from location information.\n         *\n         * @param {StackFrame} stackframe\n         * @returns {Promise} that resolves with enhanced StackFrame.\n         */\n        this.findFunctionName = function StackTraceGPS$$findFunctionName(stackframe) {\n            return new Promise(function(resolve, reject) {\n                _ensureStackFrameIsLegit(stackframe);\n                this._get(stackframe.fileName).then(function getSourceCallback(source) {\n                    var lineNumber = stackframe.lineNumber;\n                    var columnNumber = stackframe.columnNumber;\n                    var guessedFunctionName = _findFunctionName(source, lineNumber, columnNumber);\n                    // Only replace functionName if we found something\n                    if (guessedFunctionName) {\n                        resolve(new StackFrame(guessedFunctionName,\n                            stackframe.args,\n                            stackframe.fileName,\n                            lineNumber,\n                            columnNumber));\n                    } else {\n                        resolve(stackframe);\n                    }\n                }, reject)['catch'](reject);\n            }.bind(this));\n        };\n\n        /**\n         * Given a StackFrame, seek source-mapped location and return new enhanced StackFrame.\n         *\n         * @param {StackFrame} stackframe\n         * @returns {Promise} that resolves with enhanced StackFrame.\n         */\n        this.getMappedLocation = function StackTraceGPS$$getMappedLocation(stackframe) {\n            return new Promise(function(resolve, reject) {\n                _ensureSupportedEnvironment();\n                _ensureStackFrameIsLegit(stackframe);\n\n                var sourceCache = this.sourceCache;\n                var fileName = stackframe.fileName;\n                this._get(fileName).then(function(source) {\n                    var sourceMappingURL = _findSourceMappingURL(source);\n                    var isDataUrl = sourceMappingURL.substr(0, 5) === 'data:';\n                    var base = fileName.substring(0, fileName.lastIndexOf('/') + 1);\n\n                    if (sourceMappingURL[0] !== '/' && !isDataUrl && !(/^https?:\\/\\/|^\\/\\//i).test(sourceMappingURL)) {\n                        sourceMappingURL = base + sourceMappingURL;\n                    }\n\n                    this._get(sourceMappingURL).then(function(sourceMap) {\n                        if (typeof sourceMap === 'string') {\n                            sourceMap = _parseJson(sourceMap.replace(/^\\)\\]\\}'/, ''));\n                        }\n                        if (typeof sourceMap.sourceRoot === 'undefined') {\n                            sourceMap.sourceRoot = base;\n                        }\n\n                        _extractLocationInfoFromSourceMap(stackframe, sourceMap, sourceCache)\n                            .then(resolve)['catch'](function() {\n                            resolve(stackframe);\n                        });\n                    }, reject)['catch'](reject);\n                }.bind(this), reject)['catch'](reject);\n            }.bind(this));\n        };\n    };\n}));\n","(function(root, factory) {\n    'use strict';\n    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.\n\n    /* istanbul ignore next */\n    if (typeof define === 'function' && define.amd) {\n        define('stacktrace', ['error-stack-parser', 'stack-generator', 'stacktrace-gps'], factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory(require('error-stack-parser'), require('stack-generator'), require('stacktrace-gps'));\n    } else {\n        root.StackTrace = factory(root.ErrorStackParser, root.StackGenerator, root.StackTraceGPS);\n    }\n}(this, function StackTrace(ErrorStackParser, StackGenerator, StackTraceGPS) {\n    var _options = {\n        filter: function(stackframe) {\n            // Filter out stackframes for this library by default\n            return (stackframe.functionName || '').indexOf('StackTrace$$') === -1 &&\n                (stackframe.functionName || '').indexOf('ErrorStackParser$$') === -1 &&\n                (stackframe.functionName || '').indexOf('StackTraceGPS$$') === -1 &&\n                (stackframe.functionName || '').indexOf('StackGenerator$$') === -1;\n        },\n        sourceCache: {}\n    };\n\n    var _generateError = function StackTrace$$GenerateError() {\n        try {\n            // Error must be thrown to get stack in IE\n            throw new Error();\n        } catch (err) {\n            return err;\n        }\n    };\n\n    /**\n     * Merge 2 given Objects. If a conflict occurs the second object wins.\n     * Does not do deep merges.\n     *\n     * @param {Object} first base object\n     * @param {Object} second overrides\n     * @returns {Object} merged first and second\n     * @private\n     */\n    function _merge(first, second) {\n        var target = {};\n\n        [first, second].forEach(function(obj) {\n            for (var prop in obj) {\n                if (obj.hasOwnProperty(prop)) {\n                    target[prop] = obj[prop];\n                }\n            }\n            return target;\n        });\n\n        return target;\n    }\n\n    function _isShapedLikeParsableError(err) {\n        return err.stack || err['opera#sourceloc'];\n    }\n\n    function _filtered(stackframes, filter) {\n        if (typeof filter === 'function') {\n            return stackframes.filter(filter);\n        }\n        return stackframes;\n    }\n\n    return {\n        /**\n         * Get a backtrace from invocation point.\n         *\n         * @param {Object} opts\n         * @returns {Array} of StackFrame\n         */\n        get: function StackTrace$$get(opts) {\n            var err = _generateError();\n            return _isShapedLikeParsableError(err) ? this.fromError(err, opts) : this.generateArtificially(opts);\n        },\n\n        /**\n         * Get a backtrace from invocation point.\n         * IMPORTANT: Does not handle source maps or guess function names!\n         *\n         * @param {Object} opts\n         * @returns {Array} of StackFrame\n         */\n        getSync: function StackTrace$$getSync(opts) {\n            opts = _merge(_options, opts);\n            var err = _generateError();\n            var stack = _isShapedLikeParsableError(err) ? ErrorStackParser.parse(err) : StackGenerator.backtrace(opts);\n            return _filtered(stack, opts.filter);\n        },\n\n        /**\n         * Given an error object, parse it.\n         *\n         * @param {Error} error object\n         * @param {Object} opts\n         * @returns {Promise} for Array[StackFrame}\n         */\n        fromError: function StackTrace$$fromError(error, opts) {\n            opts = _merge(_options, opts);\n            var gps = new StackTraceGPS(opts);\n            return new Promise(function(resolve) {\n                var stackframes = _filtered(ErrorStackParser.parse(error), opts.filter);\n                resolve(Promise.all(stackframes.map(function(sf) {\n                    return new Promise(function(resolve) {\n                        function resolveOriginal() {\n                            resolve(sf);\n                        }\n\n                        gps.pinpoint(sf).then(resolve, resolveOriginal)['catch'](resolveOriginal);\n                    });\n                })));\n            }.bind(this));\n        },\n\n        /**\n         * Use StackGenerator to generate a backtrace.\n         *\n         * @param {Object} opts\n         * @returns {Promise} of Array[StackFrame]\n         */\n        generateArtificially: function StackTrace$$generateArtificially(opts) {\n            opts = _merge(_options, opts);\n            var stackFrames = StackGenerator.backtrace(opts);\n            if (typeof opts.filter === 'function') {\n                stackFrames = stackFrames.filter(opts.filter);\n            }\n            return Promise.resolve(stackFrames);\n        },\n\n        /**\n         * Given a function, wrap it such that invocations trigger a callback that\n         * is called with a stack trace.\n         *\n         * @param {Function} fn to be instrumented\n         * @param {Function} callback function to call with a stack trace on invocation\n         * @param {Function} errback optional function to call with error if unable to get stack trace.\n         * @param {Object} thisArg optional context object (e.g. window)\n         */\n        instrument: function StackTrace$$instrument(fn, callback, errback, thisArg) {\n            if (typeof fn !== 'function') {\n                throw new Error('Cannot instrument non-function object');\n            } else if (typeof fn.__stacktraceOriginalFn === 'function') {\n                // Already instrumented, return given Function\n                return fn;\n            }\n\n            var instrumented = function StackTrace$$instrumented() {\n                try {\n                    this.get().then(callback, errback)['catch'](errback);\n                    return fn.apply(thisArg || this, arguments);\n                } catch (e) {\n                    if (_isShapedLikeParsableError(e)) {\n                        this.fromError(e).then(callback, errback)['catch'](errback);\n                    }\n                    throw e;\n                }\n            }.bind(this);\n            instrumented.__stacktraceOriginalFn = fn;\n\n            return instrumented;\n        },\n\n        /**\n         * Given a function that has been instrumented,\n         * revert the function to it's original (non-instrumented) state.\n         *\n         * @param {Function} fn to de-instrument\n         */\n        deinstrument: function StackTrace$$deinstrument(fn) {\n            if (typeof fn !== 'function') {\n                throw new Error('Cannot de-instrument non-function object');\n            } else if (typeof fn.__stacktraceOriginalFn === 'function') {\n                return fn.__stacktraceOriginalFn;\n            } else {\n                // Function not instrumented, return original\n                return fn;\n            }\n        },\n\n        /**\n         * Given an error message and Array of StackFrames, serialize and POST to given URL.\n         *\n         * @param {Array} stackframes\n         * @param {String} url\n         * @param {String} errorMsg\n         */\n        report: function StackTrace$$report(stackframes, url, errorMsg) {\n            return new Promise(function(resolve, reject) {\n                var req = new XMLHttpRequest();\n                req.onerror = reject;\n                req.onreadystatechange = function onreadystatechange() {\n                    if (req.readyState === 4) {\n                        if (req.status >= 200 && req.status < 400) {\n                            resolve(req.responseText);\n                        } else {\n                            reject(new Error('POST to ' + url + ' failed with status: ' + req.status));\n                        }\n                    }\n                };\n                req.open('post', url);\n                req.setRequestHeader('Content-Type', 'application/json');\n\n                var reportPayload = {stack: stackframes};\n                if (errorMsg !== undefined) {\n                    reportPayload.message = errorMsg;\n                }\n\n                req.send(JSON.stringify(reportPayload));\n            });\n        }\n    };\n}));\n","/// <reference path = \"../../node_modules/phaser/typescript/phaser.d.ts\" />\r\nimport {RuleEnforcer} from \"../rules/RuleEnforcer\";\r\nimport {AllPossibleMoves} from \"../rules/AllPossibleMoves\";\r\nimport {MockPiece} from \"./MockPiece\";\r\nimport {PieceMovement} from \"../movement/Movement\";\r\nimport {Piece} from \"../entities/Piece\";\r\nimport {Path} from \"../entities/Path\";\r\nimport {PieceInterface} from \"../entities/Piece\";\r\n\r\n\r\n\r\n\r\nexport class AIBrainBox {\r\n    private ruleEnforcer: RuleEnforcer;\r\n    private movement: PieceMovement;\r\n    private signal: Phaser.Signal;\r\n\r\n    constructor(ruleEnforcer: RuleEnforcer, signal: Phaser.Signal) {\r\n        this.ruleEnforcer = ruleEnforcer;\r\n        this.signal = signal;\r\n        this.movement = new PieceMovement(signal);\r\n    }\r\n\r\n    public constructMockpath(mockPiece: PieceInterface, index: number): Path {\r\n        let path = new Path();\r\n        if (mockPiece.isAtHome() || mockPiece.isActive()) {\r\n            path = this.movement.constructActivePath(mockPiece, index);\r\n        }else if (mockPiece.isOnWayOut()) {\r\n            path = this.movement.constructOnWayOutPath(mockPiece, mockPiece.index, index);\r\n        }\r\n        return path;\r\n    }\r\n\r\n}\r\n","/// <reference path = \"../../node_modules/phaser/typescript/phaser.d.ts\" />\r\nimport {PieceInterface} from \"../entities/Piece\";\r\nimport {PiecePosition} from \"../entities/PiecePosition\";\r\nimport {PieceMovement} from \"../movement/Movement\";\r\nimport {States} from \"../enums/States\";\r\nimport {ColorType} from \"../enums/ColorType\";\r\n\r\n\r\nexport class MockPiece implements PieceInterface {\r\n    public group: Phaser.Group;\r\n    public playerId: string;\r\n    public uniqueId: string;\r\n    public index: number;\r\n    public startIndex: number;\r\n    public state: States;\r\n    public startPosition: PiecePosition;\r\n    public homePosition: PiecePosition;\r\n    public movement: PieceMovement;\r\n    public speedConstant: number;\r\n    public signal: Phaser.Signal;\r\n    public entryIndex: number;\r\n    public color: ColorType;\r\n\r\n    constructor(piece: PieceInterface) {\r\n        this.index = piece.index;\r\n        this.state = piece.state;\r\n        this.startPosition = piece.startPosition;\r\n        this.entryIndex = piece.entryIndex;\r\n        this.color = piece.color;\r\n        this.uniqueId = piece.uniqueId;\r\n        this.entryIndex = piece.entryIndex;\r\n        this.startIndex = piece.startIndex;\r\n    }\r\n\r\n    public isAtHome(): boolean {\r\n        return (this.state === States.AtHome);\r\n    }\r\n    public isActive(): boolean {\r\n        return (this.state === States.Active);\r\n    }\r\n    public isOnWayOut(): boolean {\r\n        return (this.state === States.onWayOut);\r\n    }\r\n    public isExited(): boolean {\r\n        return (this.state === States.Exited);\r\n    }\r\n    public setAtHome(): void {\r\n        this.state = States.AtHome;\r\n        this.index = -1;\r\n    }\r\n    public setActive(): void {\r\n        this.state = States.Active;\r\n    }\r\n    public setExited(): void {\r\n        this.state = States.Exited;\r\n    }\r\n    public setOnWayOut(): void {\r\n        this.state = States.onWayOut;\r\n    }\r\n    public isAtEntryPoint(): boolean {\r\n        return (this.index === this.entryIndex);\r\n    }\r\n}\r\n","/// <reference path = \"../../node_modules/phaser/typescript/phaser.d.ts\" />\r\nimport {Piece} from \"../entities/Piece\";\r\nimport {PieceFactory} from \"../entities/PieceFactory\";\r\nimport {ColorType} from \"../enums/ColorType\";\r\nimport {factory} from \"../logging/ConfigLog4j\";\r\nimport {Board} from \"./Board\";\r\nimport {Dice} from \"./Dice\";\r\nimport {Player} from \"./Player\";\r\nimport {RuleEnforcer} from \"../rules/RuleEnforcer\";\r\nimport {AllPossibleMoves} from \"../rules/AllPossibleMoves\";\r\nimport {Move} from \"../rules/Move\";\r\nimport {AIBrainBox} from \"../ai/AIBrainBox\";\r\nimport {MockPiece} from \"../ai/MockPiece\";\r\nimport {PieceInterface} from \"../entities/Piece\";\r\n\r\nconst log = factory.getLogger(\"model.PlayerAI\");\r\nexport class AIPlayer extends Player {\r\n    private ruleEnforcer: RuleEnforcer = null;\r\n    private logic: AIBrainBox;\r\n    constructor(game: Phaser.Game, name: string, playerId: string, turn: boolean, colorTypes: ColorType[], signal: Phaser.Signal,\r\n     ruleEnforcer?: RuleEnforcer, previousDoubleSix?: boolean) {\r\n        super(game, name, playerId, turn, colorTypes, signal, previousDoubleSix);\r\n        this.isAI = true;\r\n        this.ruleEnforcer = ruleEnforcer;\r\n        this.signal.add(this.aiRollDice, this, 0, \"aiRollDice\");\r\n        this.signal.add(this.playAIPlayerMovement, this, 0, \"aiPlayerMovement\");\r\n        this.logic = new AIBrainBox(this.ruleEnforcer, this.signal);\r\n    }\r\n\r\n    public playAIPlayerMovement(listener: string, playerId: string, currentPossibleMovements: AllPossibleMoves): void {\r\n        if (listener === \"aiPlayerMovement\" && this.playerId === playerId) {\r\n            let movements = currentPossibleMovements.getConcatenatedPossibleMoves();\r\n            let possibleMovesTotal = movements.length;\r\n            if (possibleMovesTotal > 0) {\r\n                let peckMove = this.bestMove(movements);\r\n                if (peckMove === null) {\r\n                    let movementIndex = 0;\r\n                    if (possibleMovesTotal > 0) {\r\n                        movementIndex = (Math.floor(Math.random() * possibleMovesTotal + 1)) - 1;\r\n                    }\r\n                    // log.debug(\"movementIndex: \" + movementIndex + \" PossibleMovements:\" + possibleMovesTotal);\r\n                    let pieceMovement = movements[movementIndex];\r\n                    let piece = this.getPieceByUniqueId(pieceMovement.pieceId);\r\n                    setTimeout(() => {\r\n                        this.ruleEnforcer.generateAIPieceMovement(piece, pieceMovement);\r\n                    }, 1000);\r\n                }else {\r\n                    log.debug(\"USING PECK MOVE!!!!!!!!!!!!!!!!\");\r\n                    // log.debug(\"movementIndex: \" + movementIndex + \" PossibleMovements:\" + possibleMovesTotal);\r\n                    let piece = this.getPieceByUniqueId(peckMove.pieceId);\r\n                    setTimeout(() => {\r\n                        this.ruleEnforcer.generateAIPieceMovement(piece, peckMove);\r\n                    }, 1000);\r\n                }\r\n            }else {\r\n                log.debug(\"AI HANDLE EMPTY MOVEMENT!!!!!!!!!!!!!!!!!! SIGN OF BAD RULE FILTER\");\r\n                // this.ruleEnforcer.handleEmptyPossibleMovements();\r\n            }\r\n        }\r\n    }\r\n    private aiRollDice(listener: string, dice: Dice, playerId: string) {\r\n        if (listener === \"aiRollDice\" && this.playerId === playerId) {\r\n             setTimeout(() => {\r\n                this.roll(dice, 2, 1);\r\n            }, 1000);\r\n        }\r\n    }\r\n\r\n    private bestMove(movements: Move[]): Move {\r\n        let peckMove: Move = null;\r\n        for (let movement of movements){\r\n            let piece = this.ruleEnforcer.scheduler.getPieceByUniqueId(movement.pieceId);\r\n            if (typeof piece !== \"undefined\" && piece !== null) {\r\n                let mockPiece: PieceInterface = new MockPiece(piece);\r\n                let mockDiceId = movement.diceId;\r\n                if (mockPiece.isAtHome()) {\r\n                    mockDiceId = this.ruleEnforcer.dice.consumeDieMockValueSix(movement.diceId);\r\n                    mockPiece.index = mockPiece.startIndex;\r\n                }\r\n                let diceValueArr = this.ruleEnforcer.dice.getDieValueArrayByUniqueId(mockDiceId);\r\n                if (diceValueArr.length > 0) {\r\n                    let diceValue = this.ruleEnforcer.addDiceValues(diceValueArr);\r\n                    let path = this.logic.constructMockpath(mockPiece, diceValue);\r\n                    if (this.ruleEnforcer.mockPieceCollision(mockPiece.uniqueId, path.newIndex)) {\r\n                        log.debug(\"END >>>>>>>>>>>>>>>>MOVE CAN PECK>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> \" + path.newIndex);\r\n                        peckMove = movement;\r\n                        break;\r\n                    }\r\n                }\r\n            }else {\r\n                log.debug(\"PIECE IS NULL.....................\");\r\n            }\r\n        }\r\n\r\n        return peckMove;\r\n    }\r\n\r\n}\r\n","/// <reference path = \"../../node_modules/typescript-collections/dist/lib/index.d.ts\" />\r\nimport * as Collections from \"typescript-collections\";\r\n\r\nimport {factory} from \"../logging/ConfigLog4j\";\r\nimport {Board} from \"./Board\";\r\nimport {Piece} from \"../entities/Piece\";\r\n\r\nconst log = factory.getLogger(\"model.ActiveBoard\");\r\n\r\n/**\r\n * Stores the <piece.uniqueId, piece.index> of all active pieces\r\n */\r\nexport class ActiveBoard extends Board {\r\n    // Using MutiDictionary for both ActiveBoard and HomeBoard led to unexpected behavior\r\n    // remove function worked for activeBoard but not for homeBoard\r\n    constructor(signal: Phaser.Signal) {\r\n        super(signal);\r\n    }\r\n\r\n    /**\r\n     * Adds <key, value> <piece.uniqueId, piece.index> to active board dictionary\r\n     * Also update value if <key, value> exists\r\n     * @param piece\r\n     * @return void\r\n     */\r\n    public addPieceToActiveBoard(piece: Piece): void {\r\n        this.board.setValue(piece.uniqueId, piece.index);\r\n    }\r\n    /**\r\n     * Removes <key, value> <piece.uniqueId, piece.index> from active board dictionary\r\n     * @param piece\r\n     * @return void\r\n     */\r\n    public removePieceFromActiveBoard(piece: Piece): void {\r\n        this.board.remove(piece.uniqueId);\r\n    }\r\n    /**\r\n     * Returns appropriate boolean if active board contains piece.index\r\n     * @param piece\r\n     * @return boolean\r\n     */\r\n    public movement(listener: string, piece: Piece): void {\r\n        if (listener === \"startmovement\" && piece.isActive()) {\r\n            this.board.setValue(piece.uniqueId, piece.index);\r\n            // log.debug(\"From Listener: \" + listener + \" I am adding <\" + piece.uniqueId + \", \" + piece.index\r\n            // + \"> to active board \" + this.board.size());\r\n        }\r\n        if (listener === \"backToHome\") {\r\n            this.board.remove(piece.uniqueId);\r\n             // log.debug(\"From Listener: \" + listener + \" I am removing <\" + piece.uniqueId + \", \" +\r\n             // piece.index + \"> from activeBoard \" + this.board.size());\r\n        }\r\n        if (listener === \"onwayout\") {\r\n            this.board.remove(piece.uniqueId);\r\n             // log.debug(\"From Listener: \" + listener + \" I am removing <\" + piece.uniqueId + \", \" +\r\n             // piece.index + \"> from activeBoard because ONWAYOUT \" + this.board.size());\r\n        }\r\n        if (listener === \"exit\") {\r\n            this.board.remove(piece.uniqueId);\r\n             // log.debug(\"From Listener: \" + listener + \" I am removing <\" + piece.uniqueId + \", \" +\r\n             // piece.index + \"> from activeBoard because EXIT \" + this.board.size());\r\n        }\r\n    }\r\n    public containsInActiveBoard(piece: Piece): boolean {\r\n        return this.board.containsKey(piece.uniqueId);\r\n    }\r\n}\r\n","/// <reference path = \"../../node_modules/typescript-collections/dist/lib/index.d.ts\" />\r\n/// <reference path = \"../../node_modules/angular2-uuid/index.d.ts\" />\r\nimport * as Collections from \"typescript-collections\";\r\nimport { UUID } from \"angular2-uuid\";\r\nimport {factory} from \"../logging/ConfigLog4j\";\r\nimport {Piece} from \"../entities/Piece\";\r\n\r\nconst log = factory.getLogger(\"model.Board\");\r\n\r\nexport abstract class Board {\r\n    public signal: Phaser.Signal;\r\n    public board: Collections.Dictionary<String, Number>;\r\n\r\n    constructor(signal: Phaser.Signal) {\r\n        this.signal = signal;\r\n        this.board = new Collections.Dictionary<String, Number>();\r\n        this.signal.add(this.movement, this, 0, \"startmovement\");\r\n    }\r\n    public abstract movement(listener: string, piece: Piece): void;\r\n\r\n}\r\n","/// <reference path = \"../../node_modules/phaser/typescript/phaser.d.ts\" />\r\nimport {Player} from \"../entities/Player\";\r\nimport {Die} from \"./Die\";\r\nimport {factory} from \"../logging/ConfigLog4j\";\r\nimport { UUID } from \"angular2-uuid\";\r\n\r\nconst log = factory.getLogger(\"model.Dice\");\r\n\r\nexport class Dice {\r\n    public dieOne: Die;\r\n    public dieTwo: Die;\r\n    private signal: Phaser.Signal;\r\n    private previousDoubleSix = false;\r\n\r\n    constructor(game: Phaser.Game, imageId: string, signal: Phaser.Signal, dieOneUUID: string, dieTwoUUID: string) {\r\n        this.dieOne = new Die(game, 330, 390, imageId, dieOneUUID, signal);\r\n        this.dieTwo = new Die(game, 390, 330, imageId, dieTwoUUID, signal);\r\n        this.signal = signal;\r\n    }\r\n\r\n    public roll(playerId: string, value1?: number, value2?: number): void {\r\n        this.dieOne.roll(playerId, value1);\r\n        this.dieTwo.roll(playerId, value2);\r\n    }\r\n\r\n    public getHigherDieValue(): string {\r\n        if (this.dieOne.getValue() > this.dieTwo.getValue()) {\r\n            return this.dieOne.uniqueId;\r\n        }else {\r\n            return this.dieTwo.uniqueId;\r\n        }\r\n    }\r\n\r\n    public setDicePlayerId(playerId: string): void {\r\n        this.dieOne.setPlayerId(playerId);\r\n        this.dieTwo.setPlayerId(playerId);\r\n    }\r\n    /**\r\n     * Returns the uniqueId of the first occurrence\r\n     * of the die matching the value\r\n     * @param value\r\n     */\r\n    public getDieUniqueIdByValue(value: number): string {\r\n        if (this.dieOne.getValue() === value) {\r\n            return this.dieOne.uniqueId;\r\n        }else if (this.dieTwo.getValue() === value) {\r\n            return this.dieTwo.uniqueId;\r\n        }else {\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     * Returns an array of dice values\r\n     * @param uniqueId\r\n     */\r\n    public getDieValueArrayByUniqueId(uniqueId: string): number[] {\r\n        let uniqueIds: number[] = [];\r\n        let ids = uniqueId.split(\"#\");\r\n        for (let id of ids){\r\n            if (id === this.dieOne.uniqueId ) {\r\n                uniqueIds.push(this.dieOne.getValue());\r\n                break;\r\n            }\r\n        }\r\n        for (let id of ids){\r\n            if (id === this.dieTwo.uniqueId ) {\r\n                uniqueIds.push(this.dieTwo.getValue());\r\n                break;\r\n            }\r\n        }\r\n        return uniqueIds;\r\n    }\r\n    /**\r\n     * Returns an array of uniqueIds of selected dice\r\n     */\r\n    public getSelectedDiceUniqueIds(): string[] {\r\n        let diceUniqueIds: string[] = [];\r\n        if (this.dieOne.isSelected()) {\r\n            diceUniqueIds.push(this.dieOne.uniqueId);\r\n        }\r\n        if (this.dieTwo.isSelected()) {\r\n            diceUniqueIds.push(this.dieTwo.uniqueId);\r\n        }\r\n        return diceUniqueIds;\r\n    }\r\n\r\n    public consumeDieValueSix(uniqueId: string): void {\r\n        let ids = uniqueId.split(\"#\");\r\n        for (let id of ids){\r\n            if (id === this.dieOne.uniqueId && this.dieOne.equalsValueSix()) {\r\n                this.dieOne.consume();\r\n                break;\r\n            }\r\n            if (id === this.dieTwo.uniqueId && this.dieTwo.equalsValueSix()) {\r\n                this.dieTwo.consume();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public consumeDieMockValueSix(uniqueId: string): string {\r\n        let ids = uniqueId.split(\"#\");\r\n        for (let id of ids){\r\n            if (id === this.dieOne.uniqueId && this.dieOne.equalsValueSix()) {\r\n                uniqueId = this.dieTwo.uniqueId;\r\n                break;\r\n            }\r\n            if (id === this.dieTwo.uniqueId && this.dieTwo.equalsValueSix()) {\r\n                uniqueId = this.dieOne.uniqueId;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return uniqueId;\r\n    }\r\n\r\n    public consumeDieValueById(uniqueId: string): void {\r\n        let ids = uniqueId.split(\"#\");\r\n        for (let id of ids){\r\n            if (id === this.dieOne.uniqueId) {\r\n                this.dieOne.consume();\r\n                // log.debug(\"Die id \" + id + \" consumed\");\r\n            }\r\n            if (id === this.dieTwo.uniqueId) {\r\n                this.dieTwo.consume();\r\n                // log.debug(\"Die id \" + id + \" consumed\");\r\n            }\r\n        }\r\n    }\r\n\r\n    public consumeDice(): void {\r\n        this.dieOne.consume();\r\n        this.dieTwo.consume();\r\n    }\r\n\r\n    public isDieOneConsumed(): boolean {\r\n        return this.dieOne.isConsumed();\r\n    }\r\n    public isDieTwoConsumed(): boolean {\r\n        return this.dieTwo.isConsumed();\r\n    }\r\n\r\n    public bothDiceConsumed(): boolean {\r\n        return (this.dieOne.isConsumed() && this.dieTwo.isConsumed());\r\n    }\r\n\r\n    /**\r\n     * Returns true if one of the dice value is 6\r\n     */\r\n    public rolledAtLeastOneSix(): boolean {\r\n        return (this.dieOne.getValue() === 6 || this.dieTwo.getValue() === 6);\r\n    }\r\n\r\n    /**\r\n     * Returns true if both dice values are 6 and 6\r\n     */\r\n    public rolledDoubleSix(): boolean {\r\n        return (this.dieOne.getValue() === 6 && this.dieTwo.getValue() === 6);\r\n    }\r\n\r\n    /**\r\n     * Returns true if both dice values are greater than 0\r\n     */\r\n    public bothDiceHasLegitValues(): boolean {\r\n        return (this.dieOne.getValue() > 0 && this.dieTwo.getValue() > 0);\r\n    }\r\n}\r\n","/// <reference path = \"../../node_modules/phaser/typescript/phaser.d.ts\" />\r\nimport {Player} from \"../entities/Player\";\r\nimport {factory} from \"../logging/ConfigLog4j\";\r\nconst log = factory.getLogger(\"model.Die\");\r\n\r\nexport class Die extends Phaser.Sprite {\r\n\r\n    public uniqueId: string;\r\n    public group: Phaser.Group;\r\n    private signal: Phaser.Signal;\r\n    private pixels: number[] = [];\r\n    private animation: Phaser.Animation;\r\n    private playerId: string;\r\n    private diceArr: number[] = [5, 1, 6, 2, 0, 4];\r\n    private extFrame: number = null;\r\n    private removeLater = true;\r\n\r\n    constructor(game: Phaser.Game, x: number, y: number, imageId: string, uniqueId: string, signal: Phaser.Signal) {\r\n        super(game, x, y, imageId);\r\n        this.uniqueId = uniqueId;\r\n        this.signal = signal;\r\n        this.playerId = null;\r\n        this.group = this.game.add.group();\r\n        this.group.add(this);\r\n        this.frame = 1;\r\n        this.anchor.setTo(0.5, 0.5);\r\n        this.inputEnabled = true;\r\n        for (let i = 0; i < 15; i++) {\r\n            this.pixels[i] = this.game.rnd.pick([0, 1, 2, 4, 5, 6]);\r\n        }\r\n\r\n        this.animation = this.animations.add(\"roll\", this.pixels);\r\n        this.animation.onComplete.add(this.rollComplete, this);\r\n        this.events.onInputDown.add(this.selectActiveDie, this);\r\n    }\r\n\r\n    public selectActiveDie(): void {\r\n        if (this.alpha === 0.5) {\r\n            this.alpha = 1;\r\n        }else {\r\n            this.alpha = 0.5;\r\n        }\r\n    }\r\n\r\n    public unSelectActiveDie(): void {\r\n        this.alpha = 1;\r\n    }\r\n\r\n    public isSelected(): boolean {\r\n        return (!this.isConsumed() && this.alpha === 0.5);\r\n    }\r\n\r\n    public rollComplete(): void {\r\n        let rand = Math.floor(Math.random() * 6);\r\n        this.frame = this.diceArr[rand];\r\n        if (this.extFrame !== null) {\r\n            this.frame = this.extFrame;\r\n            this.extFrame = null;\r\n        }\r\n        this.signal.dispatch(\"endOfDieRoll\");\r\n    }\r\n\r\n    public roll(playerId: string, value?: number): void {\r\n        if (this.playerId === playerId) {\r\n            this.resetDice();\r\n            this.animation.play(20);\r\n        }else {\r\n            log.debug(\"Dice PlayerId \" + this.playerId + \" does not match playerId: \" + playerId);\r\n        }\r\n        if (this.removeLater && typeof value !== \"undefined\") {\r\n            this.extFrame = this.getFrame(value);\r\n            this.removeLater = false;\r\n        }\r\n    }\r\n\r\n    public consume(): void {\r\n        this.frame = 3;\r\n        this.unSelectActiveDie();\r\n    }\r\n\r\n    public resetDice() {\r\n        this.alpha = 1;\r\n    }\r\n\r\n    public isConsumed(): boolean {\r\n        return (this.frame === 3);\r\n    }\r\n\r\n    public isSpent(): boolean {\r\n        return (this.getValue() === 0);\r\n    }\r\n\r\n    public setPlayerId(playerId: string) {\r\n        this.playerId = playerId;\r\n    }\r\n\r\n    public getPlayerId(): string {\r\n        return this.playerId;\r\n    }\r\n\r\n    public equalsValueSix(): boolean {\r\n        return (this.getValue() === 6);\r\n    }\r\n\r\n    public getFrame(value: number): number {\r\n        switch (value) {\r\n            case 1:\r\n                return 1;\r\n            case 2:\r\n                return 2;\r\n            case 3:\r\n                return 5;\r\n            case 4:\r\n                return 6;\r\n            case 5:\r\n                return 4;\r\n            case 6:\r\n                return 0;\r\n            default:\r\n                return 8;\r\n        }\r\n    }\r\n\r\n    public getValue(): number {\r\n        switch (this.frame) {\r\n            case 0:\r\n                return 6;\r\n            case 1:\r\n                return 1;\r\n            case 2:\r\n                return 2;\r\n            case 4:\r\n                return 5;\r\n            case 5:\r\n                return 3;\r\n            case 6:\r\n                return 4;\r\n            default:\r\n                return 0;\r\n        }\r\n    }\r\n\r\n}\r\n","/// <reference path = \"../../node_modules/typescript-collections/dist/lib/index.d.ts\" />\r\nimport * as Collections from \"typescript-collections\";\r\n\r\nimport {factory} from \"../logging/ConfigLog4j\";\r\nimport {Board} from \"./Board\";\r\nimport {Piece} from \"../entities/Piece\";\r\n\r\nconst log = factory.getLogger(\"model.ActiveBoard\");\r\n\r\n/**\r\n * Stores the <piece.uniqueId, piece.index> of all active pieces\r\n */\r\nexport class ExitedBoard extends Board {\r\n    // Using MutiDictionary for both ActiveBoard and HomeBoard led to unexpected behavior\r\n    // remove function worked for activeBoard but not for homeBoard\r\n    constructor(signal: Phaser.Signal) {\r\n        super(signal);\r\n    }\r\n\r\n    /**\r\n     * Adds <key, value> <piece.uniqueId, piece.index> to active board dictionary\r\n     * Also update value if <key, value> exists\r\n     * @param piece\r\n     * @return void\r\n     */\r\n    public addPieceToActiveBoard(piece: Piece): void {\r\n        this.board.setValue(piece.uniqueId, piece.index);\r\n    }\r\n    /**\r\n     * Removes <key, value> <piece.uniqueId, piece.index> from active board dictionary\r\n     * @param piece\r\n     * @return void\r\n     */\r\n    public removePieceFromActiveBoard(piece: Piece): void {\r\n        this.board.remove(piece.uniqueId);\r\n    }\r\n    /**\r\n     * Returns appropriate boolean if active board contains piece.index\r\n     * @param piece\r\n     * @return boolean\r\n     */\r\n    public movement(listener: string, piece: Piece): void {\r\n        if (listener === \"exit\") {\r\n            this.board.setValue(piece.uniqueId, piece.index);\r\n            // log.debug(\"From Listener: \" + listener + \" I am adding <\" + piece.uniqueId + \", \" + piece.index\r\n            // + \"> to exited board \" + this.board.size());\r\n        }\r\n    }\r\n    public containsInActiveBoard(piece: Piece): boolean {\r\n        return this.board.containsKey(piece.uniqueId);\r\n    }\r\n}\r\n","/// <reference path = \"../../node_modules/typescript-collections/dist/lib/index.d.ts\" />\r\nimport * as Collections from \"typescript-collections\";\r\n\r\nimport {factory} from \"../logging/ConfigLog4j\";\r\nimport {Board} from \"./Board\";\r\nimport {Piece} from \"../entities/Piece\";\r\n\r\nconst log = factory.getLogger(\"model.HomeBoard\");\r\n\r\n/**\r\n * Stores the <piece.uniqueId, piece.index> of all home pieces\r\n */\r\nexport class HomeBoard extends Board {\r\n    constructor(signal: Phaser.Signal) {\r\n        super(signal);\r\n    }\r\n\r\n    /**\r\n     * Adds <key, value> <piece.uniqueId, piece.index> to home board dictionary\r\n     * Also update value if <key, value> exists\r\n     * @param piece\r\n     * @return void\r\n     */\r\n    public addPieceToHomeBoard(piece: Piece): void {\r\n        this.board.setValue(piece.uniqueId, piece.index);\r\n    }\r\n    /**\r\n     * Removes <key, value> <piece.uniqueId, piece.index> from home board dictionary\r\n     * @param piece\r\n     * @return void\r\n     */\r\n    public removePieceFromHomeBoard(piece: Piece): void {\r\n        this.board.remove(piece.uniqueId);\r\n    }\r\n    public movement(listener: string, piece: Piece): void {\r\n        if (listener === \"rom\") {\r\n            if (this.board.containsKey(piece.uniqueId)) {\r\n                this.board.remove(piece.uniqueId);\r\n            // log.debug(\"From Listener: \" + listener + \" I am removing <\" + piece.uniqueId +\r\n            // \" \" + piece.index + \"> from homeboard: New size: \" + this.board.size());\r\n            }\r\n        }\r\n        if (listener === \"backToHome\") {\r\n            this.board.setValue(piece.uniqueId, piece.index);\r\n             // log.debug(\"From Listener: \" + listener + \" I am adding <\" + piece.uniqueId\r\n             // + \" \" + piece.index + \"> to homeboard: New Size \" + this.board.size());\r\n        }\r\n    }\r\n    /**\r\n     * Returns appropriate boolean if home board contains piece.index\r\n     * @param piece\r\n     * @return boolean\r\n     */\r\n    public containsInHomeBoard(piece: Piece): boolean {\r\n        return this.board.containsKey(piece.uniqueId);\r\n    }\r\n}\r\n","/// <reference path = \"../../node_modules/typescript-collections/dist/lib/index.d.ts\" />\r\nimport * as Collections from \"typescript-collections\";\r\n\r\nimport {factory} from \"../logging/ConfigLog4j\";\r\nimport {Board} from \"./Board\";\r\nimport {Piece} from \"../entities/Piece\";\r\n\r\nconst log = factory.getLogger(\"model.OnWayOutBoard\");\r\n\r\n/**\r\n * Stores the <piece.uniqueId, piece.index> of all active pieces\r\n */\r\nexport class OnWayOutBoard extends Board {\r\n    // Using MutiDictionary for both ActiveBoard and HomeBoard led to unexpected behavior\r\n    // remove function worked for activeBoard but not for homeBoard\r\n    constructor(signal: Phaser.Signal) {\r\n        super(signal);\r\n    }\r\n\r\n    /**\r\n     * Adds <key, value> <piece.uniqueId, piece.index> to active board dictionary\r\n     * Also update value if <key, value> exists\r\n     * @param piece\r\n     * @return void\r\n     */\r\n    public addPieceToOnWayOutBoard(piece: Piece): void {\r\n        this.board.setValue(piece.uniqueId, piece.index);\r\n    }\r\n    /**\r\n     * Removes <key, value> <piece.uniqueId, piece.index> from active board dictionary\r\n     * @param piece\r\n     * @return void\r\n     */\r\n    public removePieceFromOnWayOutBoard(piece: Piece): void {\r\n        this.board.remove(piece.uniqueId);\r\n    }\r\n    /**\r\n     * Returns appropriate boolean if active board contains piece.index\r\n     * @param piece\r\n     * @return boolean\r\n     */\r\n    public movement(listener: string, piece: Piece): void {\r\n        if (listener === \"exit\") {\r\n            this.board.remove(piece.uniqueId);\r\n            // log.debug(\"From Listener: \" + listener + \" I am removing <\" + piece.uniqueId + \", \" + piece.index\r\n            // + \"> from onwayout board because EXIT \" + this.board.size());\r\n        }\r\n        if (listener === \"onwayout\") {\r\n            this.addPieceToOnWayOutBoard(piece);\r\n            // log.debug(\"From Listener: \" + listener + \" I am adding ONWAYOUT <\" + piece.uniqueId + \", \" + piece.index\r\n            // + \"> to onwayout board \" + this.board.size());\r\n        }\r\n    }\r\n    public containsInActiveBoard(piece: Piece): boolean {\r\n        return this.board.containsKey(piece.uniqueId);\r\n    }\r\n}\r\n"," import {MoveStatus} from \"../enums/MoveStatus\";\r\nexport class Path {\r\n    public x: number[] = new Array();\r\n    public y: number[] = new Array();\r\n    public moveStatus = MoveStatus.ShouldContinue;\r\n    public moveRemainder = 0;\r\n    public newIndex = -1;\r\n\r\n    public setPath(x: number[], y: number[]): void {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    public isEmpty(): boolean {\r\n        return (this.x.length < 1 || this.y.length < 1);\r\n    }\r\n}\r\n\r\n","import {ColorType} from \"../enums/ColorType\";\r\nimport {MoveStatus} from \"../enums/MoveStatus\";\r\nimport {Path} from \"./Path\";\r\nimport {factory} from \"../logging/ConfigLog4j\";\r\nconst alog = factory.getLogger(\"model.Paths.ActivePath\");\r\nconst hlog = factory.getLogger(\"model.Paths.OnWayOutPaths\");\r\nimport {Piece} from \"../entities/Piece\";\r\nimport {PiecePosition} from \"./PiecePosition\";\r\nimport {PieceInterface} from \"../entities/Piece\";\r\n\r\nexport class ActivePath {\r\n    public x: number[] = [\r\n        0, 48, 96, 144, 192, 240, 288, 288, 288, 288,\r\n        288, 288, 336, 384, 384, 384, 384, 384, 384, 432,\r\n        480, 528, 576, 624, 672, 672, 672, 624, 576, 528,\r\n        480, 432, 384, 384, 384, 384, 384,  384, 336, 288,\r\n        288, 288,  288, 288, 288, 240, 192, 144, 96, 48,\r\n        0, 0, 0,\r\n    ];\r\n    public y: number[] = [\r\n        288, 288,  288, 288,  288, 288, 237, 189.6, 142.2, 94.8,\r\n        47.4, 0, 0, 0, 48, 95, 142.5, 190, 237.5, 288,\r\n        288, 288, 288, 288, 288, 336, 384, 384, 384, 384,\r\n        384, 384, 432, 480, 528, 576, 624,  672, 672, 672,\r\n        624, 576, 528, 480, 432, 384, 384, 384, 384, 384,\r\n        384, 336, 285,\r\n    ];\r\n\r\n    public getPath(piece: PieceInterface, to: number, path: Path): Path {\r\n        // check if piece is at home\r\n        if (piece.isAtHome()) {\r\n            path.x.push(piece.startPosition.x);\r\n            path.y.push(piece.startPosition.y);\r\n            piece.setActive();\r\n            path.newIndex = piece.startIndex;\r\n            // alog.debug(\"Setting piece to active: \" + piece.index);\r\n        }\r\n\r\n        let entryPoint = piece.entryIndex;\r\n        let from = piece.index + 1;\r\n\r\n        // Necessary to force condition that moves piece in to entrypoint index\r\n        if (piece.isAtEntryPoint())  {\r\n            from = piece.index;\r\n        }\r\n\r\n        // alog.debug(\"Stepping into From: \" + from + \" to: \" + to + \" entryPoint: \" + entryPoint);\r\n        for (let i = from; i < to + 1; i++) {\r\n            // When piece has reached entry index and needs to enter entrytpoint\r\n            if (i < 52) {\r\n                if (i === entryPoint) {\r\n                    // Make sure to push entry point\r\n                    path.x.push(this.x[i]);\r\n                    path.y.push(this.y[i]);\r\n                    let remainder = (to % entryPoint);\r\n                    // alog.debug(\"Remainder is \" + remainder + \" to  is \" + to);\r\n                    path.moveRemainder = remainder;\r\n                    path.newIndex = entryPoint;\r\n                    path.moveStatus = MoveStatus.ShouldBeExiting;\r\n                    // alog.debug(\"i === entryPoint \" + entryPoint + \" time to enter entry with \" + path.moveRemainder);\r\n                    break;\r\n                }else {\r\n                     // when a piece is somewhere between entryindex and end of active index\r\n                    path.x.push(this.x[i]);\r\n                    path.y.push(this.y[i]);\r\n                    path.newIndex = i;\r\n                }\r\n                // When a piece has reached end of active index and needs to roundrobin\r\n            }else if (i > 51) {\r\n                let remainder = (to % 51);\r\n                // hlog.debug(\"k > 51 \" + i + \" time to round robin with remainder \" + remainder);\r\n                for (let j = 0; j < remainder; j++) {\r\n                    // alog.debug(\"After x \" + this.x[j] + \" y: \" + this.y[j] + \" remainder: \" + remainder);\r\n                    path.x.push(this.x[j]);\r\n                    path.y.push(this.y[j]);\r\n                }\r\n                path.newIndex  = remainder - 1;\r\n                break;\r\n            }\r\n        }\r\n        // log.debug(\"Nothing to do.... \" + path.moveRemainder);\r\n        // hlog.debug(\"Path x \" + path.x.join());\r\n        // hlog.debug(\"Path y \" + path.y.join());\r\n        return path;\r\n    }\r\n\r\n    public getPiecePostionByIndex(index: number): PiecePosition {\r\n        if (index > 51) {\r\n            let newIndex: number = index % 51;\r\n            return new PiecePosition(this.x[newIndex], this.y[newIndex]);\r\n        }else {\r\n            return new PiecePosition(this.x[index], this.y[index]);\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\nexport class OnWayOutPaths {\r\n    public red_x: number[] = [48,  96, 144, 192, 240, 288];\r\n    public red_y: number[] = [336, 336, 336, 336, 336, 336];\r\n\r\n    public blue_x: number[] = [336, 336, 336, 336, 336, 336];\r\n    public blue_y: number[] = [48, 96,  144, 192, 240, 288];\r\n\r\n    public yellow_x: number[] = [624, 576, 528, 480, 432, 384];\r\n    public yellow_y: number[] = [336, 336,  336, 336, 336, 336];\r\n\r\n    public green_x: number[] = [336, 336, 336, 336, 336, 336];\r\n    public green_y: number[] = [624, 572, 528, 480, 432, 384];\r\n\r\n    public getPath(piece: PieceInterface, from: number, to: number, path: Path): Path {\r\n        let pieceOnWayoutPath: [number[], number[]];\r\n        pieceOnWayoutPath = this.getPiecePath(piece);\r\n        let x: number[] = pieceOnWayoutPath[0];\r\n        let y: number[] = pieceOnWayoutPath[1];\r\n        // hlog.debug(\"Piece \" + piece.uniqueId + \" is on the way out \");\r\n\r\n        // Different workflow depending on the states\r\n        if (piece.isActive()) {\r\n            // This condition should have been taken care of by the Rule.\r\n            if (to > 6) {\r\n                hlog.debug(\"to \" + to + \" is greater than six! Something went wrong!!!\");\r\n            }else {\r\n                for (let i = from; i < to; i++) {\r\n                    path.x.push(x[i]);\r\n                    path.y.push(y[i]);\r\n                }\r\n                path.newIndex = to - 1;\r\n                piece.index = path.newIndex;\r\n                if (piece.index === 5) {\r\n                    piece.setExited();\r\n                }else {\r\n                    piece.setOnWayOut();\r\n                }\r\n                // hlog.debug(\"Active Path x \" + path.x.join() + \" newIndex \" + path.newIndex);\r\n                // hlog.debug(\"Active Path y \" + path.y.join() + \" newIndex \" + path.newIndex);\r\n\r\n            }\r\n        }else if (piece.isOnWayOut()) {\r\n            if (to > 5) {\r\n                hlog.debug(\"to \" + to + \" is greater than five! Something went wrong!!!\");\r\n            }else {\r\n                for (let i = from; i < to + 1; i++) {\r\n                    path.x.push(x[i]);\r\n                    path.y.push(y[i]);\r\n                }\r\n                path.newIndex = to;\r\n                // hlog.debug(\"On Way Out Path x \" + path.x.join() + \" newIndex \" + to);\r\n                // hlog.debug(\"On Way Out Path y \" + path.y.join() + \" newIndex \" + to);\r\n                if (to === 5) {\r\n                    piece.setExited();\r\n                }\r\n            }\r\n        }\r\n        return path;\r\n    }\r\n\r\n    public getPiecePostionByIndex(piece: PieceInterface, newIndex: number): PiecePosition {\r\n        let pieceOnWayoutPath: [number[], number[]];\r\n        pieceOnWayoutPath = this.getPiecePath(piece);\r\n        let x: number[] = pieceOnWayoutPath[0];\r\n        let y: number[] = pieceOnWayoutPath[1];\r\n        if (newIndex > 6) {\r\n            hlog.debug(\"Error!!! Index cannot be greater than six\");\r\n            return;\r\n        }else {\r\n            return new PiecePosition(x[newIndex], y[newIndex]);\r\n        }\r\n    }\r\n\r\n    private getPiecePath(piece: PieceInterface): [number[], number[]] {\r\n        let pieceOnWayoutPath: [number[], number[]];\r\n        switch (piece.color) {\r\n            case ColorType.Red:\r\n                pieceOnWayoutPath = [this.red_x, this.red_y];\r\n                break;\r\n            case ColorType.Blue:\r\n                pieceOnWayoutPath = [this.blue_x, this.blue_y];\r\n                break;\r\n            case ColorType.Yellow:\r\n                pieceOnWayoutPath = [this.yellow_x, this.yellow_y];\r\n                break;\r\n            case ColorType.Green:\r\n                pieceOnWayoutPath = [this.green_x, this.green_y];\r\n                break;\r\n            default:\r\n                break;\r\n            }\r\n        return pieceOnWayoutPath;\r\n    }\r\n}\r\n","/// <reference path = \"../../node_modules/phaser/typescript/phaser.d.ts\" />\r\nimport {ColorType} from \"../enums/ColorType\";\r\nimport {States} from \"../enums/States\";\r\nimport {PieceMovement} from \"../movement/Movement\";\r\nimport {PiecePosition} from \"../entities/PiecePosition\";\r\nimport {factory} from \"../logging/ConfigLog4j\";\r\nimport {Path} from \"../entities/Path\";\r\n// import * as Phasertips from \"../Phasertips\";\r\n\r\nconst log = factory.getLogger(\"model.Piece\");\r\n\r\nexport interface PieceInterface {\r\n    group: Phaser.Group;\r\n    color: ColorType;\r\n    playerId: string;\r\n    uniqueId: string;\r\n    index: number;\r\n    startIndex: number;\r\n    state: States;\r\n    startPosition: PiecePosition;\r\n    homePosition: PiecePosition;\r\n    movement: PieceMovement;\r\n    speedConstant: number;\r\n    signal: Phaser.Signal;\r\n    entryIndex: number;\r\n    isAtHome(): boolean;\r\n    isAtEntryPoint(): boolean;\r\n    isActive(): boolean;\r\n    isOnWayOut(): boolean;\r\n    setExited(): void;\r\n    setOnWayOut(): void;\r\n    setActive(): void;\r\n}\r\n\r\nexport class Piece extends Phaser.Sprite implements PieceInterface {\r\n\r\n    public group: Phaser.Group;\r\n    public color: ColorType;\r\n    public playerId: string;\r\n    public uniqueId: string;\r\n    public index: number;\r\n    public startIndex: number;\r\n    public state: States;\r\n    public startPosition: PiecePosition;\r\n    public homePosition: PiecePosition;\r\n    public signal: Phaser.Signal;\r\n    public movement: PieceMovement;\r\n    public speedConstant: number;\r\n    public entryIndex: number;\r\n    public notifyCollision: boolean;\r\n    public collidingPiece: Piece;\r\n      // public tips: Phasertips;\r\n\r\n    constructor(game: Phaser.Game, x: number, y: number, imageId: string, color: ColorType,\r\n    playerId: string, uniqueId: string, startPosition: PiecePosition, signal: Phaser.Signal) {\r\n        super(game, x, y, imageId);\r\n        this.color = color;\r\n        this.playerId = playerId;\r\n        this.uniqueId = uniqueId;\r\n        this.startPosition = startPosition;\r\n        this.homePosition = new PiecePosition(x, y);\r\n        this.game.physics.enable(this, Phaser.Physics.ARCADE);\r\n        this.frame = 0;\r\n        this.index = -1;\r\n        this.entryIndex = this.getEntryIndex();\r\n        this.startIndex = this.getStartIndex(color);\r\n        this.state = States.AtHome;\r\n        this.group = this.game.add.group();\r\n        this.group.add(this);\r\n        this.signal = signal;\r\n        this.scale.x = 1.1;\r\n        this.scale.y = 1.1;\r\n        this.anchor.x = -0.07;\r\n        this.anchor.y = -0.07;\r\n        this.inputEnabled = true;\r\n        this.movement = new PieceMovement(signal);\r\n        this.speedConstant = 6000 * 12;\r\n        this.collidingPiece = null;\r\n        // this.tips = new Phasertips(game, {targetObject: this, context: this.uniqueId, strokeColor: 0xff0000 });\r\n        this.events.onInputDown.add(this.setActivePiece, this);\r\n\r\n    }\r\n\r\n    public constructPath(newIndex: number): Path {\r\n        let path: Path = new Path();\r\n        if (this.isOnWayOut()) {\r\n            path = this.movement.constructOnWayOutPath(this, this.index, newIndex);\r\n        }\r\n        if (this.isActive() || this.isAtHome()) {\r\n            path = this.movement.constructActivePath(this, newIndex);\r\n        }\r\n        return path;\r\n    }\r\n\r\n    public movePiece(path: Path): void {\r\n        this.signal.dispatch(\"startmovement\", this);\r\n        this.game.world.bringToTop(this.group);\r\n        let speed = this.getSpeed(path.x.length);\r\n        this.movePieceTo(path, speed);\r\n    }\r\n\r\n    public onCompleteMovement(): void {\r\n        if (this.collidingPiece !== null) {\r\n            this.collidingPiece.moveToHome();\r\n            this.collidingPiece = null;\r\n        }\r\n        if (this.isExited()) {\r\n            this.visible = false;\r\n        }\r\n        this.signal.dispatch(\"completeMovement\", this);\r\n    }\r\n    /**\r\n     * Moves piece to homePosition\r\n     * Sends backToHome signal to Game and Board child classes\r\n     */\r\n    public moveToHome(): void {\r\n        this.game.world.bringToTop(this.group);\r\n        this.game.add.tween(this).to({ x: this.homePosition.x, y: this.homePosition.y}, 1000,\r\n        Phaser.Easing.Linear.None, true);\r\n    }\r\n    public getSpeed(distance: number) {\r\n        return Math.floor(this.speedConstant / distance);\r\n    }\r\n    public isAtHome(): boolean {\r\n        return (this.state === States.AtHome);\r\n    }\r\n    public isActive(): boolean {\r\n        return (this.state === States.Active);\r\n    }\r\n    public isOnWayOut(): boolean {\r\n        return (this.state === States.onWayOut);\r\n    }\r\n    public isExited(): boolean {\r\n        return (this.state === States.Exited);\r\n    }\r\n    public setAtHome(): void {\r\n        this.state = States.AtHome;\r\n        this.index = -1;\r\n        this.signal.dispatch(\"backToHome\", this);\r\n    }\r\n    public setActive(): void {\r\n        this.state = States.Active;\r\n        this.signal.dispatch(\"rom\", this);\r\n    }\r\n    public setExited(): void {\r\n        this.state = States.Exited;\r\n        this.signal.dispatch(\"exit\", this);\r\n    }\r\n    public setOnWayOut(): void {\r\n        this.state = States.onWayOut;\r\n        this.signal.dispatch(\"onwayout\", this);\r\n    }\r\n    public isAtEntryPoint(): boolean {\r\n        return (this.index === this.entryIndex);\r\n    }\r\n\r\n    /**\r\n     * Dispatches select signal to player\r\n     * Player and piece must have the same player id\r\n     * @param uniqueId\r\n     */\r\n    public setActivePiece(): void {\r\n        this.signal.dispatch(\"select\", this.uniqueId, this.playerId);\r\n    }\r\n    /**\r\n     * Dispatches select signal to player\r\n     * Player and piece must have the same player id\r\n     * @param uniqueId\r\n     */\r\n    public unsetActivePiece(): void {\r\n        this.signal.dispatch(\"unselect\", this.uniqueId, this.playerId);\r\n        this.frame = 0;\r\n    }\r\n\r\n    public select(): void {\r\n        this.frame = 1;\r\n    }\r\n\r\n    public unselect(): void {\r\n        this.frame = 0;\r\n    }\r\n\r\n    public ifYouAre(color: ColorType): boolean {\r\n        return (color === this.color);\r\n    }\r\n\r\n    public getEntryIndex(): number {\r\n        switch (this.color) {\r\n            case ColorType.Red:\r\n            return 51;\r\n            case ColorType.Blue:\r\n            return 12;\r\n            case ColorType.Yellow:\r\n            return 25;\r\n            case ColorType.Green:\r\n            return 38;\r\n            default:\r\n            return -1;\r\n        }\r\n    }\r\n\r\n    public getColor(): string {\r\n        switch (this.color) {\r\n            case ColorType.Red:\r\n            return \"RED\";\r\n            case ColorType.Blue:\r\n            return \"BLUE\";\r\n            case ColorType.Yellow:\r\n            return \"YELLOW\";\r\n            case ColorType.Green:\r\n            return \"GREEN\";\r\n            default:\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    public getState(): string {\r\n        switch (this.state) {\r\n            case States.Active:\r\n            return \"ACTIVE\";\r\n            case States.AtHome:\r\n            return \"AT HOME\";\r\n            case States.Exited:\r\n            return \"EXITED\";\r\n            case States.onWayOut:\r\n            return \"ON WAY OUT\";\r\n            default:\r\n            return \"\";\r\n        }\r\n    }\r\n    public setParameters(x: number, y: number, index: number, state: States): void {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.state = state;\r\n        this.index = index;\r\n    }\r\n\r\n    private movePieceTo(path: Path, speed: number): void {\r\n        let tween = this.game.add.tween(this).to(path, 1000,\r\n        Phaser.Easing.Linear.None, true).interpolation(function(v: number[], k: number){\r\n            return Phaser.Math.linearInterpolation(v, k);\r\n        });\r\n        tween.onComplete.add(this.onCompleteMovement, this);\r\n    }\r\n\r\n    private getStartIndex(color: ColorType): number {\r\n        switch (color) {\r\n            case ColorType.Red:\r\n            return 1;\r\n            case ColorType.Blue:\r\n            return 14;\r\n            case ColorType.Yellow:\r\n            return 27;\r\n            case ColorType.Green:\r\n            return 40;\r\n            default:\r\n            return 0;\r\n        }\r\n    }\r\n}\r\n","/// <reference path = \"../../node_modules/phaser/typescript/phaser.d.ts\" />\r\n/// <reference path = \"../../node_modules/angular2-uuid/index.d.ts\" />\r\nimport {Piece} from \"../entities/Piece\";\r\nimport {ColorType} from \"../enums/ColorType\";\r\nimport {PiecePosition} from \"../entities/PiecePosition\";\r\nimport { UUID } from \"angular2-uuid\";\r\n\r\nexport abstract class PieceFactory {\r\n\r\n    private game: Phaser.Game;\r\n\r\n    constructor(game: Phaser.Game) {\r\n        this.game = game;\r\n    }\r\n\r\n    public createNewPieces(colorType: ColorType, playerId: string, signal: Phaser.Signal): Piece[] {\r\n\r\n        let imageId = this.getImageKey(colorType);\r\n        if (imageId === \"red_piece\") {\r\n            let startPosition = new PiecePosition(49, 287);\r\n            let redPieces: Piece[] = [\r\n                new Piece(this.game, 118, 72, imageId, colorType, playerId, UUID.UUID(), startPosition, signal),\r\n                new Piece(this.game, 72, 118, imageId, colorType, playerId, UUID.UUID(), startPosition, signal),\r\n                new Piece(this.game, 168, 118, imageId, colorType, playerId, UUID.UUID(), startPosition, signal),\r\n                new Piece(this.game, 120, 168, imageId, colorType, playerId, UUID.UUID(), startPosition, signal),\r\n            ];\r\n            return redPieces;\r\n        }else if (imageId === \"blue_piece\") {\r\n            let startPosition = new PiecePosition(384, 48);\r\n            let bluePieces: Piece[] = [\r\n                new Piece(this.game, 552, 72, imageId, colorType, playerId, UUID.UUID(), startPosition, signal),\r\n                new Piece(this.game, 503, 118, imageId, colorType, playerId, UUID.UUID(), startPosition, signal),\r\n                new Piece(this.game, 600, 118, imageId, colorType, playerId, UUID.UUID(), startPosition, signal),\r\n                new Piece(this.game, 552, 168, imageId, colorType, playerId, UUID.UUID(), startPosition, signal),\r\n            ];\r\n            return bluePieces;\r\n        }else if (imageId === \"yellow_piece\") {\r\n            let startPosition = new PiecePosition(624, 385);\r\n            let yellowPieces: Piece[] = [\r\n                new Piece(this.game, 552, 503, imageId, colorType, playerId, UUID.UUID(), startPosition, signal),\r\n                new Piece(this.game, 503, 552, imageId, colorType, playerId, UUID.UUID(), startPosition, signal),\r\n                new Piece(this.game, 600, 552, imageId, colorType, playerId, UUID.UUID(), startPosition, signal),\r\n                new Piece(this.game, 552, 600, imageId, colorType, playerId, UUID.UUID(), startPosition, signal),\r\n            ];\r\n            return yellowPieces;\r\n        }else if (imageId === \"green_piece\") {\r\n            let startPosition = new PiecePosition(287, 622);\r\n            let greenPieces: Piece[] = [\r\n                new Piece(this.game, 118, 503, imageId, colorType, playerId, UUID.UUID(), startPosition, signal),\r\n                new Piece(this.game, 72, 552, imageId, colorType, playerId, UUID.UUID(), startPosition, signal),\r\n                new Piece(this.game, 168, 552, imageId, colorType, playerId, UUID.UUID(), startPosition, signal),\r\n                new Piece(this.game, 118, 600, imageId, colorType, playerId, UUID.UUID(), startPosition, signal),\r\n            ];\r\n            return greenPieces;\r\n        }else {\r\n            return [];\r\n        }\r\n\r\n    }\r\n\r\n    public createExistingPiece() {\r\n\r\n    }\r\n\r\n    private getImageKey(colorType: ColorType): string {\r\n\r\n        switch (colorType) {\r\n            case ColorType.Red:\r\n                return \"red_piece\";\r\n            case ColorType.Blue:\r\n                return \"blue_piece\";\r\n            case ColorType.Green:\r\n                return \"green_piece\";\r\n            case ColorType.Yellow:\r\n                return \"yellow_piece\";\r\n            default:\r\n                return \"undefined\";\r\n        }\r\n    }\r\n\r\n}\r\n","export class PiecePosition {\r\n    public x: number;\r\n    public y: number;\r\n\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n}\r\n","/// <reference path = \"../../node_modules/phaser/typescript/phaser.d.ts\" />\r\nimport {Piece} from \"../entities/Piece\";\r\nimport {PieceFactory} from \"../entities/PieceFactory\";\r\nimport {ColorType} from \"../enums/ColorType\";\r\nimport {factory} from \"../logging/ConfigLog4j\";\r\nimport {Board} from \"./Board\";\r\nimport {Dice} from \"./Dice\";\r\n\r\nconst log = factory.getLogger(\"model.Player\");\r\n\r\nexport abstract class Player extends PieceFactory {\r\n    public name: string;\r\n    public playerId: string;\r\n    public turn: boolean;\r\n    public pieces: Piece[] = [];\r\n    public signal: Phaser.Signal;\r\n    public currentSelectedPiece: Piece;\r\n    public previousDoubleSix = false;\r\n    public isAI = false;\r\n    constructor(game: Phaser.Game, name: string, playerId: string, turn: boolean, colorTypes: ColorType[], signal: Phaser.Signal,\r\n     previousDoubleSix?: boolean) {\r\n        super(game);\r\n        this.name = name;\r\n        this.playerId = playerId;\r\n        this.turn = turn;\r\n        this.pieces = new Array<Piece>();\r\n        this.signal = signal;\r\n        this.signal.add(this.selectCurrentPiece, this, 0, \"select\");\r\n        this.currentSelectedPiece = null;\r\n        if (typeof previousDoubleSix !== \"undefined\") {\r\n            this.previousDoubleSix = previousDoubleSix;\r\n        }\r\n        for (let x = 0; x < colorTypes.length; x++) {\r\n            let playerPieces = this.createNewPieces(colorTypes[x], playerId, this.signal);\r\n            for (let piece of playerPieces){\r\n                this.pieces.push(piece);\r\n            }\r\n        }\r\n    }\r\n\r\n    public roll(dice: Dice, value1?: number, value2?: number): void {\r\n        dice.roll(this.playerId, value1, value2);\r\n    }\r\n\r\n\r\n    public getActivePieces(board: Board): Piece[] {\r\n        let activePieces: Piece[] = [];\r\n        for (let piece of this.pieces) {\r\n            let index = board.board.getValue(piece.uniqueId);\r\n            if (typeof index !== \"undefined\" && piece.isActive()) {\r\n                activePieces.push(piece);\r\n            }\r\n        }\r\n        return activePieces;\r\n    }\r\n\r\n    public getFirstOccuringActivePiece(): Piece {\r\n        let firstOccuringActivePiece: Piece = null;\r\n        for (let piece of this.pieces) {\r\n            if (piece.isActive()) {\r\n                firstOccuringActivePiece = piece;\r\n                break;\r\n            }\r\n        }\r\n        return firstOccuringActivePiece;\r\n    }\r\n\r\n    public getHomePieces(board: Board): Piece[] {\r\n        let homePieces: Piece[] = [];\r\n        for (let piece of this.pieces) {\r\n            let index = board.board.getValue(piece.uniqueId);\r\n            if (typeof index !== \"undefined\" && piece.isAtHome()) {\r\n                homePieces.push(piece);\r\n            }\r\n        }\r\n        return homePieces;\r\n    }\r\n\r\n    public getOnWayOutPieces(board: Board): Piece[] {\r\n        let onWayOutPieces: Piece[] = [];\r\n        for (let piece of this.pieces) {\r\n            let index = board.board.getValue(piece.uniqueId);\r\n            if (typeof index !== \"undefined\" && piece.isOnWayOut()) {\r\n                onWayOutPieces.push(piece);\r\n            }\r\n        }\r\n        return onWayOutPieces;\r\n    }\r\n    // Necessarily.. although it looks like a duplicate\r\n    public getPlayerOnWayOutPieces(): Piece[] {\r\n        let onWayOutPieces: Piece[] = [];\r\n        for (let piece of this.pieces) {\r\n            if (piece.isOnWayOut()) {\r\n                onWayOutPieces.push(piece);\r\n            }\r\n        }\r\n        return onWayOutPieces;\r\n    }\r\n    // Necessarily.. although it looks like a duplicate\r\n    public getPlayerActivePieces(): Piece[] {\r\n        let activePieces: Piece[] = [];\r\n        for (let piece of this.pieces) {\r\n            if (piece.isActive()) {\r\n                activePieces.push(piece);\r\n            }\r\n        }\r\n        return activePieces;\r\n    }\r\n\r\n    public selectAllPiece(): void {\r\n        for (let piece of this.pieces) {\r\n            piece.alpha = 1;\r\n        }\r\n        this.turn = true;\r\n    }\r\n\r\n    public unselectAllPiece(): void {\r\n        for (let piece of this.pieces) {\r\n            piece.alpha = 0.5;\r\n        }\r\n        this.turn = false;\r\n    }\r\n\r\n    public allPiecesAreAtHome(): boolean {\r\n        let allPiecesAtHome = true;\r\n        for (let piece of this.pieces) {\r\n            if (!piece.isExited() && (piece.isActive() || piece.isOnWayOut())) {\r\n                allPiecesAtHome = false;\r\n                break;\r\n            }\r\n        }\r\n        return allPiecesAtHome;\r\n    }\r\n\r\n    public allPiecesAreOnWayOut(): boolean {\r\n        let allPiecesOnWayOut = false;\r\n        for (let piece of this.pieces) {\r\n            if (!piece.isExited() && (piece.isAtHome() || piece.isActive())) {\r\n                allPiecesOnWayOut = true;\r\n                break;\r\n            }\r\n        }\r\n        return allPiecesOnWayOut;\r\n    }\r\n\r\n    /**\r\n     * Receives select signal from piece and set select or unselect on piece\r\n     * using piece uniqueId\r\n     * @param uniqueId\r\n     */\r\n    public selectCurrentPiece(listener: string, uniqueId: string, playerId: string): void {\r\n        // check if you are the right owner of the piece\r\n        if (this.turn && this.playerId === playerId) {\r\n            if (listener === \"select\") {\r\n                for (let piece of this.pieces) {\r\n                    if (piece.uniqueId === uniqueId) {\r\n                        piece.select();\r\n                        this.currentSelectedPiece = piece;\r\n                        // log.debug(\"I am being selected...\" + this.currentSelectedPiece.uniqueId);\r\n                    }else {\r\n                        piece.unselect();\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    public pieceBelongsToMe(uniqueId: string): boolean {\r\n        let belongToMe = false;\r\n        for (let piece of this.pieces){\r\n            if (piece.uniqueId === uniqueId) {\r\n                belongToMe = true;\r\n                break;\r\n            }\r\n        }\r\n        return belongToMe;\r\n    }\r\n\r\n    public getPieceByUniqueId(uniqueId: string): Piece {\r\n        let matchingPiece = null;\r\n        for (let piece of this.pieces){\r\n            if (piece.uniqueId === uniqueId) {\r\n                matchingPiece = piece;\r\n                break;\r\n            }\r\n        }\r\n        return matchingPiece;\r\n    }\r\n\r\n    public hasActivePieces(): boolean {\r\n        let active = false;\r\n        for (let piece of this.pieces) {\r\n            if (piece.isActive()) {\r\n                active = true;\r\n                break;\r\n            }\r\n        }\r\n        return active;\r\n    }\r\n\r\n    public hasOnWayOutPieces(): boolean {\r\n        let onWayOut = false;\r\n        for (let piece of this.pieces) {\r\n            if (piece.isOnWayOut()) {\r\n                onWayOut = true;\r\n                break;\r\n            }\r\n        }\r\n        return onWayOut;\r\n    }\r\n\r\n    public hasHomePieces(): boolean {\r\n        let home = false;\r\n        for (let piece of this.pieces) {\r\n            if (piece.isAtHome()) {\r\n                home = true;\r\n                break;\r\n            }\r\n        }\r\n        return home;\r\n    }\r\n\r\n    public hasExactlyOneActivePiece(): boolean {\r\n        let activePieceCount = 0;\r\n        for (let piece of this.pieces) {\r\n            if (piece.isActive()) {\r\n                ++activePieceCount;\r\n                if (activePieceCount > 1) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return (activePieceCount === 1);\r\n    }\r\n\r\n    public hasExactlyOnePieceLeft(): boolean {\r\n        let pieceCount = 0;\r\n        for (let piece of this.pieces) {\r\n            if (piece.isActive() || piece.isAtHome() || piece.isOnWayOut()) {\r\n                ++pieceCount;\r\n                if (pieceCount > 1) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return (pieceCount === 1);\r\n    }\r\n    public printPieceCounts(): void {\r\n        let active = this.activePieceCount();\r\n        let home = this.homePieceCount();\r\n        let onw = this.onwayoutCount();\r\n        let exit = this.exitPieceCount();\r\n        log.debug(\"active: \" + active + \" home: \" + home + \" onwayout: \" + onw + \" exit: \" + exit + \" length: \" + this.pieces.length);\r\n    }\r\n\r\n    public homePieceCount(): number {\r\n        let homePieceCounts = 0;\r\n        for (let piece of this.pieces) {\r\n            if (piece.isAtHome()) {\r\n                ++homePieceCounts;\r\n            }\r\n        }\r\n        return homePieceCounts;\r\n    }\r\n\r\n    public activePieceCount(): number {\r\n        let activePieceCounts = 0;\r\n        for (let piece of this.pieces) {\r\n            if (piece.isActive()) {\r\n                ++activePieceCounts;\r\n            }\r\n        }\r\n        return activePieceCounts;\r\n    }\r\n\r\n    public onwayoutCount(): number {\r\n        let onwayoutPieceCounts = 0;\r\n        for (let piece of this.pieces) {\r\n            if (piece.isOnWayOut()) {\r\n                ++onwayoutPieceCounts;\r\n            }\r\n        }\r\n        return onwayoutPieceCounts;\r\n    }\r\n\r\n    public exitPieceCount(): number {\r\n        let exitPieceCounts = 0;\r\n        for (let piece of this.pieces) {\r\n            if (piece.isExited()) {\r\n                ++exitPieceCounts;\r\n            }\r\n        }\r\n        return exitPieceCounts;\r\n    }\r\n\r\n}\r\n\r\n","export enum Actions { PLAY, ROLL, SKIP, DO_NOTHING, EXIT }\r\n","\r\nexport enum ColorType { Red, Blue, Green, Yellow }\r\n","export enum MoveStatus { ShouldContinue, IsRoundRobin, ShouldBeExiting }\r\n","export enum States { AtHome, Active, onWayOut, Exited }\r\n","import {LoggerFactory, LoggerFactoryOptions, LFService, LogGroupRule, LogLevel} from \"typescript-logging\";\r\n // Create options instance and specify 2 LogGroupRules:\r\n// * One for any logger with a name starting with model, to log on debug\r\n// * The second one for anything else to log on info\r\nconst options = new LoggerFactoryOptions()\r\n.addLogGroupRule(new LogGroupRule(new RegExp(\"model.+\"), LogLevel.Debug))\r\n.addLogGroupRule(new LogGroupRule(new RegExp(\".+\"), LogLevel.Info));\r\n// Create a named loggerfactory and pass in the options and export the factory.\r\n// Named is since version 0.2.+ (it's recommended for future usage)\r\nexport const factory = LFService.createNamedLoggerFactory(\"LoggerFactory\", options);\r\n","/// <reference path = \"../node_modules/phaser/typescript/phaser.d.ts\" />\r\nimport {Preloader} from \"./states/Preloader\";\r\nimport {Game} from \"./states/Game\";\r\n\r\nexport class LudoGame extends Phaser.Game {\r\n    constructor() {\r\n        super(900, 720, Phaser.AUTO, \"gameContainer\");\r\n        this.state.add(\"Preloader\", Preloader, false);\r\n        this.state.add(\"Game\", Game, false);\r\n        this.state.start(\"Preloader\");\r\n   }\r\n}\r\n\r\nwindow.onload = function() {\r\n    let game = new LudoGame();\r\n};\r\n","/// <reference path = \"../../node_modules/phaser/typescript/phaser.d.ts\" />\r\nimport {Piece} from \"../entities/Piece\";\r\nimport * as Paths from \"../entities/Paths\";\r\nimport {Path} from \"../entities/Path\";\r\nimport {factory} from \"../logging/ConfigLog4j\";\r\nimport {MoveStatus} from \"../enums/MoveStatus\";\r\nconst log = factory.getLogger(\"model.Movement\");\r\nimport {PieceInterface} from \"../entities/Piece\";\r\n\r\n\r\nexport interface Movement {\r\n    constructActivePath(piece: PieceInterface, newIndex: number): Path;\r\n}\r\n\r\nexport class PieceMovement implements Movement {\r\n    public activePath: Paths.ActivePath;\r\n    public onWayOutPaths: Paths.OnWayOutPaths;\r\n    private signal: Phaser.Signal;\r\n    constructor(signal: Phaser.Signal) {\r\n        this.activePath = new Paths.ActivePath();\r\n        this.onWayOutPaths = new Paths.OnWayOutPaths();\r\n        this.signal = signal;\r\n    }\r\n\r\n    public constructActivePath(piece: PieceInterface, newIndex: number): Path {\r\n        let currentIndex = piece.index;\r\n        let path: Path = new Path();\r\n        let finalIndex = currentIndex + newIndex;\r\n        // log.debug(\"Moving to finalIndex \" + finalIndex + \" from: \" + currentIndex);\r\n        path = this.activePath.getPath(piece, finalIndex, path);\r\n        // path.remainder has to be greater than zero to make this call\r\n        if (path.moveStatus === MoveStatus.ShouldBeExiting && path.moveRemainder > 0) {\r\n            path = this.constructOnWayOutPath(piece, 0, path.moveRemainder, path);\r\n        }\r\n        return path;\r\n    }\r\n\r\n    public constructOnWayOutPath(piece: PieceInterface, from: number, newIndex: number, path?: Path): Path {\r\n        if (typeof path === \"undefined\") {\r\n            path = new Path();\r\n            let finalIndex = piece.index + newIndex;\r\n            path = this.onWayOutPaths.getPath(piece, from, finalIndex, path);\r\n        }else {\r\n            path = this.onWayOutPaths.getPath(piece, from, newIndex, path);\r\n        }\r\n        return path;\r\n    }\r\n}\r\n","/// <reference path = \"../../node_modules/typescript-collections/dist/lib/index.d.ts\" />\r\nimport {Scheduler} from \"../rules/Scheduler\";\r\nimport {Dice} from \"../entities/Dice\";\r\nimport {Board} from \"../entities/Board\";\r\nimport {Actions} from \"../enums/Actions\";\r\nimport {Move} from \"./Move\";\r\nimport {Piece} from \"../entities/Piece\";\r\nimport {States} from \"../enums/States\";\r\nimport {ActiveBoard} from \"../entities/ActiveBoard\";\r\nimport {HomeBoard} from \"../entities/HomeBoard\";\r\nimport {factory} from \"../logging/ConfigLog4j\";\r\n\r\nconst log = factory.getLogger(\"model.AbstractRules\");\r\n\r\n\r\nexport abstract class AbstractRules {\r\n    protected dice: Dice;\r\n    protected schedule: Scheduler;\r\n    protected rulesPool: Move[];\r\n    protected activeRulePool: Move[];\r\n    protected board: Board;\r\n\r\n    constructor(dice: Dice, schedule: Scheduler, board: Board) {\r\n        this.dice = dice;\r\n        this.schedule = schedule;\r\n        this.board = board;\r\n        this.rulesPool = new Array();\r\n        this.activeRulePool = new Array();\r\n        // Define object pooling for rules coz we used them a lot\r\n        for (let i = 0; i < 10; ++i) {\r\n            this.rulesPool.push(new Move());\r\n        }\r\n    }\r\n\r\n    public getBoard(): Board {\r\n        return this.board;\r\n    }\r\n\r\n    /**\r\n     * Returns true if one of the dice value is 6\r\n     */\r\n    public rolledAtLeastOneSix(): boolean {\r\n        return this.dice.rolledAtLeastOneSix();\r\n    }\r\n\r\n    /**\r\n     * Returns true if both dice values are 6 and 6\r\n     */\r\n    public rolledDoubleSix(): boolean {\r\n        return this.dice.rolledDoubleSix();\r\n    }\r\n\r\n    /**\r\n     * Returns uniqueId of a die that equals the value parameter\r\n     * @param value\r\n     */\r\n    public getDieByValue(value: number): string {\r\n        return (this.dice.getDieUniqueIdByValue(value));\r\n    }\r\n\r\n\r\n    public getNewRule(): Move {\r\n        let rule: Move = null;\r\n\r\n        if (this.rulesPool.length > 0) {\r\n            rule = this.rulesPool.pop();\r\n        }else {\r\n            rule = new Move();\r\n            this.activeRulePool.push(rule);\r\n        }\r\n        return rule;\r\n    }\r\n\r\n    public showFinalResults(): void {\r\n        if (this.board instanceof ActiveBoard) {\r\n             log.debug(\"Active rule: \" + this.activeRulePool.length + \" RulePool: \" + this.rulesPool.length);\r\n        }else if (this.board instanceof HomeBoard) {\r\n            log.debug(\"Home rule: \" + this.activeRulePool.length + \" RulePool: \" + this.rulesPool.length);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *Add spent moves object back to pool\r\n     * @param moves\r\n     */\r\n    public addSpentRulesBackToPool(moves: Move[]): void {\r\n        for (let move of moves){\r\n            this.addToRulePool(move);\r\n        }\r\n    }\r\n    /**\r\n     * Returns array of die uniqueIds that could take piece pass exit point\r\n     * @param piece\r\n     */\r\n    public willCrossEntryPoint(piece: Piece): string[] {\r\n        let uniqueIds: string[] = [];\r\n        let currentIndex = piece.index;\r\n        let destinationIndex1 = currentIndex + this.dice.dieOne.getValue();\r\n        let destinationIndex2 = currentIndex + this.dice.dieTwo.getValue();\r\n        let destinationIndex3 = currentIndex + this.dice.dieOne.getValue() + this.dice.dieTwo.getValue();\r\n\r\n        if (!this.dice.isDieOneConsumed() && piece.getEntryIndex() >= currentIndex && piece.getEntryIndex() < destinationIndex1) {\r\n            uniqueIds.push(this.dice.dieOne.uniqueId);\r\n        }\r\n        if (!this.dice.isDieTwoConsumed() && piece.getEntryIndex() >= currentIndex && piece.getEntryIndex() < destinationIndex2) {\r\n           uniqueIds.push(this.dice.dieTwo.uniqueId);\r\n        }\r\n        if ((!this.dice.isDieOneConsumed() && !this.dice.isDieTwoConsumed()) &&\r\n        piece.getEntryIndex() >= currentIndex && piece.getEntryIndex() < destinationIndex3) {\r\n            uniqueIds.push(this.dice.dieOne.uniqueId + \"#\" + this.dice.dieTwo.uniqueId);\r\n        }\r\n        return uniqueIds;\r\n    }\r\n    /**\r\n     * Returns true if piece will overshoot exit point with\r\n     * die value. Piece needs exact exit value to exit\r\n     * Not a single die value can achieve this so therefore,\r\n     * both dice values are used\r\n     * @param piece\r\n     */\r\n   public willCrossExitPoint(piece: Piece): string[] {\r\n        let uniqueIds: string[] = [];\r\n        let diceValue = this.dice.dieOne.getValue() + this.dice.dieTwo.getValue();\r\n        let diceDistanceToExitPoint = diceValue - (piece.entryIndex - piece.index);\r\n        if ((!this.dice.isDieOneConsumed() && !this.dice.isDieTwoConsumed()) && diceDistanceToExitPoint < 7) {\r\n            uniqueIds.push(this.dice.dieOne.uniqueId + \"#\" + this.dice.dieTwo.uniqueId);\r\n        }\r\n        if (!this.dice.isDieOneConsumed()) {\r\n            uniqueIds.push(this.dice.dieOne.uniqueId);\r\n        }\r\n        if (!this.dice.isDieTwoConsumed()) {\r\n            uniqueIds.push(this.dice.dieTwo.uniqueId);\r\n        }\r\n        return uniqueIds;\r\n    }\r\n\r\n    /**\r\n     * Returns unique id of dice with higher value\r\n     */\r\n    public getHigherDieValue(): string {\r\n        return this.dice.getHigherDieValue();\r\n    }\r\n\r\n    public getUniqueIdCollision(uniqueId: string, index: number): string {\r\n        let keys = this.board.board.keys();\r\n        let id = \"NOTFOUND\";\r\n        for (let key of keys){\r\n            if (this.board.board.getValue(key) === index && key !== uniqueId) {\r\n                id = key.toString();\r\n                break;\r\n            }\r\n        }\r\n        return id;\r\n    }\r\n\r\n    protected generatePieceMovement(dieUniqueIds: string[], piece: Piece, state: States): Move {\r\n        let move: Move = this.getNewRule();\r\n        if (dieUniqueIds.length === 2) {\r\n            let uniqueId = dieUniqueIds[0] + \"#\" + dieUniqueIds[1];\r\n            move.action = Actions.PLAY;\r\n            move.diceId = uniqueId;\r\n            move.state = state;\r\n            move.pieceId = piece.uniqueId;\r\n        }else if (dieUniqueIds.length === 1) {\r\n            let uniqueId = dieUniqueIds[0];\r\n            move.action = Actions.PLAY;\r\n            move.diceId = uniqueId;\r\n            move.state = state;\r\n            move.pieceId = piece.uniqueId;\r\n        }\r\n        return move;\r\n    }\r\n\r\n    private addToRulePool(move: Move): void {\r\n        for (let i = 0, l = this.activeRulePool.length; i < l; i++) {\r\n            if (this.activeRulePool[i] === move) {\r\n                this.activeRulePool.splice(i, 1);\r\n            }\r\n        }\r\n        move.resetRule();\r\n        this.rulesPool.push(move);\r\n    }\r\n\r\n\r\n}\r\n","/// <reference path = \"../../node_modules/typescript-collections/dist/lib/index.d.ts\" />\r\nimport {Scheduler} from \"../rules/Scheduler\";\r\nimport {Dice} from \"../entities/Dice\";\r\nimport {Board} from \"../entities/Board\";\r\nimport {Actions} from \"../enums/Actions\";\r\nimport {Move} from \"./Move\";\r\nimport {Piece} from \"../entities/Piece\";\r\nimport {factory} from \"../logging/ConfigLog4j\";\r\nimport {Player} from \"../entities/Player\";\r\nimport {AbstractRules} from \"./AbstractRules\";\r\nimport {States} from \"../enums/States\";\r\nconst log = factory.getLogger(\"model.ActiveRules\");\r\n\r\n\r\nexport class ActiveRules extends AbstractRules {\r\n    protected state: States = States.Active;\r\n    constructor(dice: Dice, schedule: Scheduler, board: Board) {\r\n        super(dice, schedule, board);\r\n    }\r\n\r\n    public generateMoves(player: Player): Move[] {\r\n        let moves: Move[] = [];\r\n        let activePieces: Piece[] = player.getActivePieces(this.board);\r\n        for (let piece of activePieces) {\r\n            let dieUniqueIds = this.willCrossEntryPoint(piece);\r\n            if (dieUniqueIds.length > 0) {\r\n                // Established that both dice values cannot be played on piece\r\n                // ids of die values that could take piece on the way out\r\n                let ids = this.willCrossExitPoint(piece);\r\n                if (ids.length > 0) {\r\n                    for (let id of ids){\r\n                        let move = this.getNewRule();\r\n                        move.action = Actions.PLAY;\r\n                        move.diceId = id;\r\n                        move.pieceId = piece.uniqueId;\r\n                        move.state = this.state;\r\n                        moves.push(move);\r\n                        // log.debug(\"Exit crossing alert!!! Dice id \" + id + \" will take piece on way out piece \" + piece.uniqueId);\r\n                    }\r\n                }\r\n\r\n            }else {\r\n                    if (!this.dice.dieOne.isConsumed()) {\r\n                        let move = this.getNewRule();\r\n                        move.action = Actions.PLAY;\r\n                        move.diceId = this.dice.dieOne.uniqueId;\r\n                        move.pieceId = piece.uniqueId;\r\n                        move.state = this.state;\r\n                        moves.push(move);\r\n                        // log.debug(\"Playing \" + this.dice.dieOne.uniqueId + \" on \" + piece.uniqueId + \" is fine\");\r\n                    }\r\n\r\n                    if (!this.dice.dieTwo.isConsumed()) {\r\n                        let move = this.getNewRule();\r\n                        move.action = Actions.PLAY;\r\n                        move.diceId = this.dice.dieTwo.uniqueId;\r\n                        move.pieceId = piece.uniqueId;\r\n                        move.state = this.state;\r\n                        moves.push(move);\r\n                        // log.debug(\"Playing \" + this.dice.dieTwo.uniqueId + \" on \" + piece.uniqueId + \" is fine\");\r\n                    }\r\n\r\n                    if (!this.dice.dieOne.isConsumed() && !this.dice.dieTwo.isConsumed()) {\r\n                        let move = this.getNewRule();\r\n                        move.action = Actions.PLAY;\r\n                        move.diceId = this.dice.dieOne.uniqueId + \"#\" + this.dice.dieTwo.uniqueId;\r\n                        move.pieceId = piece.uniqueId;\r\n                        move.state = this.state;\r\n                        moves.push(move);\r\n                        // log.debug(\"Playing both dice \" + piece.uniqueId + \" is fine\");\r\n                    }\r\n            }\r\n        }\r\n        return moves;\r\n    }\r\n\r\n    public generateActivePieceMovement(dieUniqueIds: string[], piece: Piece): Move {\r\n        return this.generatePieceMovement(dieUniqueIds, piece, this.state);\r\n    }\r\n}\r\n","import {HomeRules} from \"./HomeRules\";\r\nimport {ActiveRules} from \"./ActiveRules\";\r\nimport {OnWayOutRules} from \"./OnWayOutRules\";\r\nimport {Move} from \"./Move\";\r\nimport {States} from \"../enums/States\";\r\n\r\nexport class AllPossibleMoves {\r\n    public activeMoves: Move[];\r\n    public homeMoves: Move[];\r\n    public onWayOutMoves: Move[];\r\n\r\n    public setAllPossibleMoves(activeMoves: Move[], homeMoves: Move[], onWayOutMoves: Move[]): void {\r\n        this.activeMoves = activeMoves;\r\n        this.homeMoves = homeMoves;\r\n        this.onWayOutMoves = onWayOutMoves;\r\n    }\r\n\r\n    public getPieceMoves(states: States): Move[] {\r\n        switch (states) {\r\n            case States.Active:\r\n            return this.activeMoves;\r\n            case States.AtHome:\r\n            return this.homeMoves;\r\n            case States.onWayOut:\r\n            return this.onWayOutMoves;\r\n            default:\r\n            return [];\r\n        }\r\n    }\r\n\r\n    public resetMoves(): void {\r\n        this.activeMoves = [];\r\n        this.homeMoves = [];\r\n        this.onWayOutMoves = [];\r\n    }\r\n\r\n    public isEmpty(): boolean {\r\n        return (this.activeMoves.length === 0 && this.homeMoves.length === 0 && this.onWayOutMoves.length === 0);\r\n    }\r\n\r\n    public activeMoveContainsDieId(diceId: string): boolean {\r\n        let match = false;\r\n        for (let movement of this.activeMoves){\r\n            if (movement.diceId === diceId) {\r\n                match = true;\r\n                break;\r\n            }\r\n        }\r\n        return match;\r\n    }\r\n\r\n    public getConcatenatedPossibleMoves(): Move[] {\r\n        let concatMoves: Move[] = [];\r\n        concatMoves = concatMoves.concat(this.activeMoves);\r\n        concatMoves = concatMoves.concat(this.homeMoves);\r\n        concatMoves = concatMoves.concat(this.onWayOutMoves);\r\n        return concatMoves;\r\n    }\r\n\r\n}\r\n","/// <reference path = \"../../node_modules/typescript-collections/dist/lib/index.d.ts\" />\r\nimport {Scheduler} from \"../rules/Scheduler\";\r\nimport {Dice} from \"../entities/Dice\";\r\nimport {Actions} from \"../enums/Actions\";\r\nimport {Board} from \"../entities/Board\";\r\nimport {factory} from \"../logging/ConfigLog4j\";\r\nimport {Player} from \"../entities/Player\";\r\nimport {AbstractRules} from \"./AbstractRules\";\r\nimport {States} from \"../enums/States\";\r\nconst log = factory.getLogger(\"model.HomeRules\");\r\n\r\n\r\nexport class ExitedRules extends AbstractRules {\r\n    protected state: States = States.AtHome;\r\n    constructor(dice: Dice, schedule: Scheduler, board: Board) {\r\n        super(dice, schedule, board);\r\n    }\r\n}\r\n","/// <reference path = \"../../node_modules/typescript-collections/dist/lib/index.d.ts\" />\r\nimport {Scheduler} from \"../rules/Scheduler\";\r\nimport {Dice} from \"../entities/Dice\";\r\nimport {Actions} from \"../enums/Actions\";\r\nimport {Board} from \"../entities/Board\";\r\nimport {Move} from \"./Move\";\r\nimport {Piece} from \"../entities/Piece\";\r\nimport {factory} from \"../logging/ConfigLog4j\";\r\nimport {Player} from \"../entities/Player\";\r\nimport {AbstractRules} from \"./AbstractRules\";\r\nimport {States} from \"../enums/States\";\r\nconst log = factory.getLogger(\"model.HomeRules\");\r\n\r\n\r\nexport class HomeRules extends AbstractRules {\r\n    protected state: States = States.AtHome;\r\n    constructor(dice: Dice, schedule: Scheduler, board: Board) {\r\n        super(dice, schedule, board);\r\n    }\r\n\r\n    public generateMoves(player: Player): Move[] {\r\n        let moves: Move[] = [];\r\n        if (this.rolledDoubleSix()) {\r\n            let uniqueId1 = this.dice.dieOne.uniqueId;\r\n            let uniqueId2 = this.dice.dieTwo.uniqueId;\r\n            if (uniqueId1 === null || uniqueId2 === null) {\r\n                log.debug(\"No matching uniqueIds for the values supplied!!!\");\r\n                return;\r\n            }\r\n            let homePieces: Piece[] = player.getHomePieces(this.board);\r\n            for (let piece of homePieces) {\r\n                if (!this.dice.dieOne.isConsumed()) {\r\n                    let move = this.getNewRule();\r\n                    move.action = Actions.PLAY;\r\n                    move.diceId = uniqueId1;\r\n                    move.pieceId = piece.uniqueId;\r\n                    move.state = this.state;\r\n                    moves.push(move);\r\n                }\r\n                if (!this.dice.dieTwo.isConsumed()) {\r\n                    let move = this.getNewRule();\r\n                    move.action = Actions.PLAY;\r\n                    move.diceId = uniqueId2;\r\n                    move.pieceId = piece.uniqueId;\r\n                    move.state = this.state;\r\n                    moves.push(move);\r\n\r\n                }\r\n                if (!this.dice.dieOne.isConsumed() && !this.dice.dieTwo.isConsumed()) {\r\n                    let move = this.getNewRule();\r\n                    move.action = Actions.PLAY;\r\n                    move.diceId = this.dice.dieOne.uniqueId + \"#\" + this.dice.dieTwo.uniqueId;\r\n                    move.pieceId = piece.uniqueId;\r\n                    move.state = this.state;\r\n                    moves.push(move);\r\n                }\r\n            }\r\n        }else if (this.rolledAtLeastOneSix()) {\r\n            let uniqueId = this.dice.getDieUniqueIdByValue(6);\r\n            if (uniqueId === null) {\r\n                log.debug(\"No matching uniqueId for the value supplied!!!\");\r\n                return;\r\n            }\r\n            let homePieces: Piece[] = player.getHomePieces(this.board);\r\n            for (let piece of homePieces) {\r\n                if (!this.dice.dieOne.isConsumed() && !this.dice.dieTwo.isConsumed()) {\r\n                    let move = this.getNewRule();\r\n                    move.action = Actions.PLAY;\r\n                    move.playBothDice = true;\r\n                    move.diceId = this.dice.dieOne.uniqueId + \"#\" + this.dice.dieTwo.uniqueId;\r\n                    move.pieceId = piece.uniqueId;\r\n                    move.state = this.state;\r\n                    moves.push(move);\r\n                }\r\n                // Play six on an home piece regardless of the value of the second die\r\n                let move = this.getNewRule();\r\n                move.action = Actions.PLAY;\r\n                move.diceId = uniqueId;\r\n                move.pieceId = piece.uniqueId;\r\n                move.state = this.state;\r\n                moves.push(move);\r\n            }\r\n        }\r\n        return moves;\r\n    }\r\n\r\n    public generateHomePieceMovement(dieUniqueIds: string[], piece: Piece): Move {\r\n        return this.generatePieceMovement(dieUniqueIds, piece, this.state);\r\n    }\r\n}\r\n","import {Actions} from \"../enums/Actions\";\r\nimport {States} from \"../enums/States\";\r\nexport class Move {\r\n    public pieceId: string;\r\n    public action: Actions;\r\n    public diceId: string;\r\n    public state: States;\r\n    public playBothDice: boolean;\r\n\r\n    constructor() {\r\n        this.action = Actions.DO_NOTHING;\r\n        this.pieceId = \" \";\r\n        this.playBothDice = false;\r\n        this.state = null;\r\n    }\r\n\r\n    public resetRule(): void {\r\n        this.pieceId = \"\";\r\n        this.action = Actions.DO_NOTHING;\r\n        this.pieceId = \"\";\r\n        this.playBothDice = false;\r\n        this.state = null;\r\n    }\r\n\r\n    public compare(move: Move): boolean {\r\n        let match = false;\r\n        if (move.action === this.action && move.diceId === this.diceId && move.pieceId === this.pieceId) {\r\n            match = true;\r\n        }\r\n        return match;\r\n    }\r\n}\r\n","/// <reference path = \"../../node_modules/typescript-collections/dist/lib/index.d.ts\" />\r\nimport {Scheduler} from \"../rules/Scheduler\";\r\nimport {Dice} from \"../entities/Dice\";\r\nimport {Board} from \"../entities/Board\";\r\nimport {Actions} from \"../enums/Actions\";\r\nimport {Move} from \"./Move\";\r\nimport {Piece} from \"../entities/Piece\";\r\nimport {factory} from \"../logging/ConfigLog4j\";\r\nimport {Player} from \"../entities/Player\";\r\nimport {States} from \"../enums/States\";\r\nimport {AbstractRules} from \"./AbstractRules\";\r\nconst log = factory.getLogger(\"model.OnWayOutRules\");\r\n\r\n\r\nexport class OnWayOutRules extends AbstractRules {\r\n    public state: States = States.onWayOut;\r\n    constructor(dice: Dice, schedule: Scheduler, board: Board) {\r\n        super(dice, schedule, board);\r\n    }\r\n\r\n    public generateMoves(player: Player): Move[] {\r\n        let moves: Move[] = [];\r\n        let uniqueId1 = this.dice.dieOne.uniqueId;\r\n        let uniqueId2 = this.dice.dieTwo.uniqueId;\r\n        if (uniqueId1 === null || uniqueId2 === null) {\r\n            log.debug(\"No matching uniqueIds for the values supplied!!!\");\r\n            return;\r\n        }\r\n        let onWayOutPieces: Piece[] = player.getOnWayOutPieces(this.board);\r\n        for (let piece of onWayOutPieces) {\r\n            if (!this.dice.dieOne.isConsumed() && (this.dice.dieOne.getValue() + piece.index) <= 5) {\r\n                let move = this.getNewRule();\r\n                move.action = Actions.PLAY;\r\n                move.diceId = uniqueId1;\r\n                move.pieceId = piece.uniqueId;\r\n                move.state = this.state;\r\n                moves.push(move);\r\n            }\r\n            if (!this.dice.dieTwo.isConsumed() && (this.dice.dieTwo.getValue() + piece.index) <= 5) {\r\n                let move = this.getNewRule();\r\n                move.action = Actions.PLAY;\r\n                move.diceId = uniqueId2;\r\n                move.pieceId = piece.uniqueId;\r\n                move.state = this.state;\r\n                moves.push(move);\r\n            }\r\n            if (!this.dice.dieOne.isConsumed() && !this.dice.dieTwo.isConsumed() &&\r\n            (this.dice.dieOne.getValue() + this.dice.dieTwo.getValue() + piece.index) <= 5) {\r\n                let move = this.getNewRule();\r\n                move.action = Actions.PLAY;\r\n                move.diceId = uniqueId1 + \"#\" + uniqueId2;\r\n                move.pieceId = piece.uniqueId;\r\n                move.state = this.state;\r\n                moves.push(move);\r\n            }\r\n        }\r\n\r\n        return moves;\r\n    }\r\n    public generateOnWayOutPieceMovement(dieUniqueIds: string[], piece: Piece): Move {\r\n        return this.generatePieceMovement(dieUniqueIds, piece, this.state);\r\n    }\r\n}\r\n","// <reference path = \"../../node_modules/phaser/typescript/phaser.d.ts\" />\r\nimport {Scheduler} from \"../rules/Scheduler\";\r\nimport {Rules} from \"../rules/Rules\";\r\nimport {Player} from \"../entities/Player\";\r\nimport {AIPlayer} from \"../entities/AIPlayer\";\r\nimport {Piece} from \"../entities/Piece\";\r\nimport {Move} from \"./Move\";\r\nimport {Board} from \"../entities/Board\";\r\nimport {Dice} from \"../entities/Dice\";\r\nimport {ActiveBoard} from \"../entities/ActiveBoard\";\r\nimport {HomeBoard} from \"../entities/HomeBoard\";\r\nimport {OnWayOutBoard} from \"../entities/OnWayOutBoard\";\r\nimport {ExitedBoard} from \"../entities/ExitedBoard\";\r\nimport {factory} from \"../logging/ConfigLog4j\";\r\nimport {AllPossibleMoves} from \"./AllPossibleMoves\";\r\nimport {Path} from \"../entities/Path\";\r\n\r\nconst log = factory.getLogger(\"model.RuleEnforcer\");\r\n\r\nexport class RuleEnforcer {\r\n    public rule: Rules;\r\n    public scheduler: Scheduler;\r\n    public dice: Dice;\r\n    private signal: Phaser.Signal;\r\n    private rollCounter = 0;\r\n    private currentPossibleMovements: AllPossibleMoves;\r\n\r\n    constructor(signal: Phaser.Signal, scheduler: Scheduler, dice: Dice, activeboard: ActiveBoard,\r\n    homeboard: HomeBoard, onWayOutBoard: OnWayOutBoard, exitedBoard: ExitedBoard, currentPossibleMovements?: AllPossibleMoves) {\r\n        this.signal = signal;\r\n        this.scheduler = scheduler;\r\n        this.dice = dice;\r\n        this.currentPossibleMovements = currentPossibleMovements;\r\n        this.rule = new Rules(this.signal, scheduler, dice, activeboard, homeboard, onWayOutBoard, exitedBoard);\r\n        this.signal.add(this.endOfDiceRoll, this, 0, \"endOfDieRoll\");\r\n        this.signal.add(this.onCompletePieceMovement, this, 0, \"completeMovement\");\r\n\r\n    }\r\n\r\n    public endOfDiceRoll(listener: string): void {\r\n        if (listener === \"endOfDieRoll\") {\r\n            ++this.rollCounter;\r\n            if (this.rollCounter === 2) {\r\n                this.rollCounter = 0;\r\n                this.currentPossibleMovements.resetMoves();\r\n                this.generateAllPossibleMoves();\r\n                let currentPlayer = this.scheduler.getCurrentPlayer();\r\n                if (this.dice.rolledDoubleSix()) {\r\n                    currentPlayer.previousDoubleSix = true;\r\n                }\r\n                if (currentPlayer.isAI) {\r\n                    // let AICurrentPlayer: AIPlayer = (AIPlayer) this.scheduler.getCurrentPlayer();\r\n                    this.signal.dispatch(\"aiPlayerMovement\", currentPlayer.playerId, this.currentPossibleMovements);\r\n                }\r\n                // this.rule.checkBoardConsistencies();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generates move object using selected piece and selected die or dice\r\n     * @param dieIds\r\n     * @param piece\r\n     */\r\n    public generatePieceMovement(dieIds: string[], piece: Piece): Move {\r\n        let pieceMovement = this.rule.generatePieceMovement(dieIds, piece);\r\n        let canPlay = false;\r\n        let possibleMovements = this.currentPossibleMovements.getPieceMoves(piece.state);\r\n        let currentPlayer = this.scheduler.getCurrentPlayer();\r\n        for (let movement of possibleMovements) {\r\n            if (movement.compare(pieceMovement)) {\r\n                canPlay = true;\r\n                movement = this.filterConsumeDieValueSixMovement(movement, piece);\r\n                let diceValue = this.addDiceValues(this.dice.getDieValueArrayByUniqueId(movement.diceId));\r\n                this.dice.consumeDieValueById(movement.diceId);\r\n                let path: Path = piece.constructPath(diceValue);\r\n                if (!path.isEmpty()) {\r\n                    piece.index = path.newIndex;\r\n                    // Condition for collision or peck\r\n                    if (piece.isActive()) {\r\n                        let id = this.checkCollision(piece.uniqueId, piece.index);\r\n                        if (id !== \"NOTFOUND\" && !currentPlayer.pieceBelongsToMe(id)) {\r\n                            let backToHomePiece = this.scheduler.getPieceByUniqueId(id);\r\n                            if (backToHomePiece !== null) {\r\n                                backToHomePiece.setAtHome();\r\n                                piece.collidingPiece = backToHomePiece;\r\n                                piece.setExited();\r\n                            }\r\n                        }\r\n                    }\r\n                    piece.movePiece(path);\r\n                    break;\r\n                }else {\r\n                    log.debug(\"I don't know what to do...............\");\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (canPlay) {\r\n            this.rule.addSpentMovesBackToPool(this.currentPossibleMovements.activeMoves);\r\n            this.rule.addSpentMovesBackToPool(this.currentPossibleMovements.homeMoves);\r\n            this.rule.addSpentMovesBackToPool(this.currentPossibleMovements.onWayOutMoves);\r\n            this.currentPossibleMovements.resetMoves();\r\n            this.generateAllPossibleMoves();\r\n        }else {\r\n            log.debug(\"Move not found!!!: \" + this.rule.decodeMove(pieceMovement));\r\n        }\r\n        return pieceMovement;\r\n    }\r\n\r\n    public getPieceByUniqueId(uniqueId: string): Piece {\r\n        return this.scheduler.getPieceByUniqueId(uniqueId);\r\n    }\r\n\r\n\r\n    public generateAIPieceMovement(piece: Piece, aiPieceMovement: Move): Move {\r\n        aiPieceMovement = this.filterConsumeDieValueSixMovement(aiPieceMovement, piece);\r\n        let currentPlayer = this.scheduler.getCurrentPlayer();\r\n        let diceValue = this.addDiceValues(this.dice.getDieValueArrayByUniqueId(aiPieceMovement.diceId));\r\n        this.dice.consumeDieValueById(aiPieceMovement.diceId);\r\n        let path: Path = piece.constructPath(diceValue);\r\n        if (!path.isEmpty()) {\r\n            piece.index = path.newIndex;\r\n            // Condition for collision or peck\r\n            if (piece.isActive()) {\r\n                let id = this.checkCollision(piece.uniqueId, piece.index);\r\n                if (id !== \"NOTFOUND\" && !currentPlayer.pieceBelongsToMe(id)) {\r\n                    let backToHomePiece = this.scheduler.getPieceByUniqueId(id);\r\n                    if (backToHomePiece !== null) {\r\n                        backToHomePiece.setAtHome();\r\n                        piece.collidingPiece = backToHomePiece;\r\n                        piece.setExited();\r\n                    }\r\n                }\r\n            }\r\n            piece.movePiece(path);\r\n        }\r\n        this.rule.addSpentMovesBackToPool(this.currentPossibleMovements.activeMoves);\r\n        this.rule.addSpentMovesBackToPool(this.currentPossibleMovements.homeMoves);\r\n        this.rule.addSpentMovesBackToPool(this.currentPossibleMovements.onWayOutMoves);\r\n        this.currentPossibleMovements.resetMoves();\r\n        this.generateAllPossibleMoves();\r\n        return aiPieceMovement;\r\n    }\r\n\r\n    public mockPieceCollision(uniqueId: string, index: number): boolean {\r\n        let id = this.rule.getUniqueIdCollision(uniqueId, index);\r\n        let currentPlayer = this.scheduler.getCurrentPlayer();\r\n        if (id !== \"NOTFOUND\" && !currentPlayer.pieceBelongsToMe(id)) {\r\n            return true;\r\n        }else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public readAllMoves(): void {\r\n        for (let move of this.currentPossibleMovements.activeMoves){\r\n            log.debug( this.rule.decodeMove(move));\r\n        }\r\n        for (let move of this.currentPossibleMovements.homeMoves){\r\n            log.debug( this.rule.decodeMove(move));\r\n        }\r\n        for (let move of this.currentPossibleMovements.onWayOutMoves){\r\n            log.debug( this.rule.decodeMove(move));\r\n        }\r\n        log.debug(\"+++++++++++++++++++++++++++++++++++++++++++++++++++++\" );\r\n    }\r\n\r\n    public addDiceValues(diceValues: number[]): number {\r\n        let value = 0;\r\n        for (let dieValue of diceValues){\r\n            value += dieValue;\r\n        }\r\n        return value;\r\n    }\r\n\r\n    public handleEmptyPossibleMovements(): void {\r\n        let nextPlayer = this.scheduler.getNextPlayer();\r\n        if (nextPlayer.isAI) {\r\n            this.dice.setDicePlayerId(nextPlayer.playerId);\r\n            this.signal.dispatch(\"aiRollDice\", this.dice, nextPlayer.playerId);\r\n        }\r\n    }\r\n\r\n     public filterConsumeDieValueSixMovement(movement: Move, piece: Piece): Move {\r\n        if (piece.isAtHome()) {\r\n            this.dice.consumeDieValueSix(movement.diceId);\r\n            piece.index = piece.startIndex;\r\n        }\r\n        return movement;\r\n    }\r\n\r\n    private generateAllPossibleMoves(): void {\r\n        let currentPlayer: Player = this.scheduler.getCurrentPlayer();\r\n        this.currentPossibleMovements.resetMoves();\r\n        this.currentPossibleMovements = this.rule.generateAllPossibleMoves(currentPlayer);\r\n        this.analyzeAllPossibleMove(currentPlayer);\r\n    }\r\n\r\n    private analyzeAllPossibleMove(currentPlayer: Player): void {\r\n        /**\r\n         * Corner case for when player can only play one active or home or onwayout piece.\r\n         * This does not necessarily mean that the player has a total of one piece.\r\n        */\r\n        if (this.currentPossibleMovements.isEmpty()) {\r\n            setTimeout(() => {\r\n                this.handleEmptyPossibleMovements();\r\n            }, 1000);\r\n        }else {\r\n            if (currentPlayer.allPiecesAreAtHome()) {\r\n                this.currentPossibleMovements = this.filterOnAllPiecesAreAtHome(this.currentPossibleMovements, currentPlayer);\r\n            }else if (currentPlayer.hasExactlyOneActivePiece()) {\r\n                this.currentPossibleMovements = this.filterOnHasExactlyOneActivePiece(this.currentPossibleMovements, currentPlayer);\r\n            }else if (!currentPlayer.hasActivePieces() && currentPlayer.hasHomePieces() &&\r\n             this.dice.rolledAtLeastOneSix() && currentPlayer.hasOnWayOutPieces()) {\r\n                this.currentPossibleMovements = this.filterOnNoActiveButHomeAndOnWayOutPieces(this.currentPossibleMovements, currentPlayer);\r\n            }else if (currentPlayer.hasExactlyOnePieceLeft()) {\r\n                if (this.moveContainTwoDice(this.currentPossibleMovements.activeMoves)) {\r\n                    this.currentPossibleMovements.activeMoves = this.removeMoveWithSingleDieValues(this.currentPossibleMovements.activeMoves);\r\n                }\r\n                this.currentPossibleMovements.homeMoves = this.removeMoveWithSingleDieValues(this.currentPossibleMovements.homeMoves);\r\n                // this.currentPossibleMovements.onWayOutMoves = this.removeMoveWithSingleDieValues(this.currentPossibleMovements.onWayOutMoves);\r\n            }else {\r\n                log.debug(\"NO FILTER LOGIC APPLIED...................................\");\r\n            }\r\n        }\r\n        this.readAllMoves();\r\n    }\r\n\r\n    private filterOnHasExactlyOneActivePiece(currentPossibleMovements: AllPossibleMoves, player: Player): AllPossibleMoves {\r\n        /**\r\n         * This block of code validates corner cases where a player has only one active piece\r\n         * and has one or more onwayout pieces. This check is necessarily to prevent player\r\n         * from playing an invalid die value on the active piece.\r\n         */\r\n        if (player.hasOnWayOutPieces()) {\r\n            let onWayOutPieces = player.getPlayerOnWayOutPieces();\r\n            let onWayOutPieceMovements: Move[] = [];\r\n            for (let onWayOutPiece of onWayOutPieces){\r\n                onWayOutPieceMovements = onWayOutPieceMovements.concat(this.getDieMovementsOnPiece(onWayOutPiece.uniqueId,\r\n                 currentPossibleMovements.onWayOutMoves));\r\n            }\r\n            // log.debug(\"Size: \" + onWayOutPieceMovements.length);\r\n            /** This checks corner case for when a player has one onwayout piece and one active piece\r\n                Rule must ensure that player is not allowed to play die value on active piece leaving\r\n                the other value that onwayout piece cannot play\r\n            */\r\n            if (onWayOutPieceMovements.length === 1 && (!this.dice.rolledAtLeastOneSix() && player.hasHomePieces())) {\r\n                for (let x = 0; x < currentPossibleMovements.activeMoves.length; x++) {\r\n                    if (onWayOutPieceMovements[0].diceId === currentPossibleMovements.activeMoves[x].diceId) {\r\n                        let illegalMove = currentPossibleMovements.activeMoves[x];\r\n                        log.debug(\"1 Successfully Removing illegal move: \" + this.rule.decodeMove(illegalMove));\r\n                        currentPossibleMovements.activeMoves.splice(x, 1);\r\n                        break;\r\n                    }\r\n                }\r\n                // Both dice must have legit values for this condition to be necessary\r\n            }else if (onWayOutPieceMovements.length > 1 && this.dice.bothDiceHasLegitValues() &&\r\n            (!this.dice.rolledAtLeastOneSix() && player.hasHomePieces())) {\r\n                // check if dice ids are distinct\r\n                if (this.diceIdsAreDistinct(onWayOutPieceMovements)) {\r\n                    let distinctId = onWayOutPieceMovements[0].diceId;\r\n                    for (let x = 0; x < currentPossibleMovements.activeMoves.length; x++) {\r\n                        if (distinctId === currentPossibleMovements.activeMoves[x].diceId) {\r\n                            let illegalMove = currentPossibleMovements.activeMoves[x];\r\n                            log.debug(\"2 Successfully Removed illegal move: \" + this.rule.decodeMove(illegalMove));\r\n                            currentPossibleMovements.activeMoves.splice(x, 1);\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                }\r\n                // piece must play both dice because no onwayout pieces can play either die value;\r\n            }else if (onWayOutPieceMovements.length === 0 && this.dice.bothDiceHasLegitValues() &&\r\n            (!this.dice.rolledAtLeastOneSix() && player.hasHomePieces())) {\r\n                for (let x = 0; x < currentPossibleMovements.activeMoves.length; x++) {\r\n                    if (this.dice.dieOne.uniqueId === currentPossibleMovements.activeMoves[x].diceId) {\r\n                        let illegalMove = currentPossibleMovements.activeMoves[x];\r\n                        currentPossibleMovements.activeMoves.splice(x, 1);\r\n                        log.debug(\"3 Successfully Removed illegal move: \" + this.rule.decodeMove(illegalMove));\r\n                    }\r\n                    if (this.dice.dieTwo.uniqueId === currentPossibleMovements.activeMoves[x].diceId) {\r\n                        let illegalMove = currentPossibleMovements.activeMoves[x];\r\n                        currentPossibleMovements.activeMoves.splice(x, 1);\r\n                        log.debug(\"4 Successfully Removed illegal move: \" + this.rule.decodeMove(illegalMove));\r\n                    }\r\n                }\r\n            }else {\r\n                if (!this.onwayoutShareDiceWithActivePiece(this.currentPossibleMovements.onWayOutMoves, this.currentPossibleMovements.activeMoves)) { // cond-001\r\n                    if (this.moveContainTwoDice(currentPossibleMovements.activeMoves)) {\r\n                        currentPossibleMovements.activeMoves = this.removeMoveWithSingleDieValues(currentPossibleMovements.activeMoves);\r\n                    }\r\n                }\r\n            }\r\n        }else if (player.hasHomePieces()) {\r\n            if (this.dice.rolledAtLeastOneSix() && !this.dice.rolledDoubleSix()) {\r\n                currentPossibleMovements.activeMoves = this.removeMoveWithDieValueSix(currentPossibleMovements.activeMoves);\r\n            }else {\r\n               currentPossibleMovements.activeMoves = this.removeMoveWithSingleDieValues(currentPossibleMovements.activeMoves);\r\n            }\r\n        }else {\r\n            // tough call to make. Needs serious thought process\r\n            if (this.moveContainTwoDice(currentPossibleMovements.activeMoves)) {\r\n                currentPossibleMovements.activeMoves = this.removeMoveWithSingleDieValues(currentPossibleMovements.activeMoves);\r\n            }\r\n        }\r\n        return currentPossibleMovements;\r\n    }\r\n\r\n    private moveContainTwoDice(movements: Move[]): boolean {\r\n        let containsTwoDice = false;\r\n        for (let movement of movements) {\r\n            if ((movement.diceId.split(\"#\")).length > 1) {\r\n                containsTwoDice = true;\r\n                break;\r\n            }\r\n        }\r\n        return containsTwoDice;\r\n    }\r\n\r\n    private filterOnAllPiecesAreAtHome(currentPossibleMovements: AllPossibleMoves, player: Player): AllPossibleMoves {\r\n        if (!player.hasActivePieces()) {\r\n            currentPossibleMovements.homeMoves = this.removeMoveWithSingleDieValues(currentPossibleMovements.homeMoves);\r\n        }\r\n        return currentPossibleMovements;\r\n    }\r\n\r\n    private filterOnNoActiveButHomeAndOnWayOutPieces(currentPossibleMovements: AllPossibleMoves, player: Player): AllPossibleMoves {\r\n        let onWayOutPieces = player.getPlayerOnWayOutPieces();\r\n        let onWayOutPieceMovements: Move[] = [];\r\n        for (let onWayOutPiece of onWayOutPieces){\r\n            onWayOutPieceMovements = onWayOutPieceMovements.concat(this.getDieMovementsOnPiece(onWayOutPiece.uniqueId,\r\n                currentPossibleMovements.onWayOutMoves));\r\n        }\r\n        if (onWayOutPieceMovements.length === 0) {\r\n            currentPossibleMovements.homeMoves = this.removeMoveWithSingleDieValues(currentPossibleMovements.homeMoves);\r\n        }\r\n        return currentPossibleMovements;\r\n\r\n    }\r\n\r\n    // Establish that onwayout movements has the same unique ids\r\n    private diceIdsAreDistinct(onWayOutMovements: Move[]): boolean {\r\n        let movement = onWayOutMovements[0];\r\n        let distinctIds = true;\r\n        for (let m of onWayOutMovements){\r\n            if (m.diceId !== movement.diceId) {\r\n                distinctIds = false;\r\n                break;\r\n            }\r\n        }\r\n        return distinctIds;\r\n\r\n    }\r\n\r\n    private onwayoutShareDiceWithActivePiece(onWayOutMovements: Move[], activeMovements: Move[]): boolean {\r\n        let sharedIds = false;\r\n        for (let onwayoutMovement of onWayOutMovements) {\r\n            for (let x = 0; x < activeMovements.length; x++) {\r\n                if (onwayoutMovement.diceId === activeMovements[x].diceId) {\r\n                    sharedIds = true;\r\n                    activeMovements.splice(x, 1);\r\n                    break;\r\n                }\r\n            }\r\n            if (sharedIds) {\r\n                break;\r\n            }\r\n        }\r\n        return sharedIds;\r\n    }\r\n\r\n    private getDieMovementsOnPiece(pieceId: string, movements: Move[]): Move[] {\r\n        let onWayOutPieceMovements: Move[] = [];\r\n        for (let movement of movements){\r\n            if (movement.pieceId === pieceId) {\r\n                onWayOutPieceMovements.push(movement);\r\n            }\r\n        }\r\n        return onWayOutPieceMovements;\r\n    }\r\n\r\n    private checkCollision(uniqueId: string, index: number): string {\r\n        let id = this.rule.getUniqueIdCollision(uniqueId, index);\r\n        return id;\r\n    }\r\n\r\n    private removeMoveWithSingleDieValues(movements: Move[]): Move[] {\r\n        let legalMoves: Move[] = [];\r\n        for (let x = 0; x < movements.length; ++x) {\r\n            let illegalMove = movements[x];\r\n            if ((movements[x].diceId.split(\"#\")).length > 1) {\r\n                legalMoves.push(movements[x]);\r\n            }else {\r\n                // log.debug(\"5 Successfully Removed illegal move: \" + this.rule.decodeMove(movements[x]));\r\n            }\r\n        }\r\n        return legalMoves;\r\n    }\r\n\r\n     private removeMoveWithDieValueSix(movements: Move[]): Move[] {\r\n         let diceId = this.dice.getDieUniqueIdByValue(6);\r\n         let legalMoves: Move[] = [];\r\n         if (diceId !== null) {\r\n             for (let x = 0; x < movements.length; x++) {\r\n                if (movements[x].diceId !== diceId) {\r\n                    legalMoves.push(movements[x]);\r\n                }else {\r\n                    let illegalMove = movements[x];\r\n                    // log.debug(\"6 Successfully Removed illegal move: \" + this.rule.decodeMove(illegalMove));\r\n                }\r\n             }\r\n         }\r\n         return legalMoves;\r\n    }\r\n\r\n     private onCompletePieceMovement(listener: string, piece: Piece): void {\r\n         let currentPlayer = this.scheduler.getCurrentPlayer();\r\n         if (listener === \"completeMovement\" && currentPlayer.isAI) {\r\n             this.currentPossibleMovements.resetMoves();\r\n             this.currentPossibleMovements = this.rule.generateAllPossibleMoves(currentPlayer);\r\n            if (!this.currentPossibleMovements.isEmpty()) {\r\n              this.signal.dispatch(\"aiPlayerMovement\", currentPlayer.playerId, this.currentPossibleMovements);\r\n            }\r\n        }\r\n    }\r\n}\r\n","// <reference path = \"../../node_modules/phaser/typescript/phaser.d.ts\" />\r\nimport * as Collections from \"typescript-collections\";\r\nimport {Player} from \"../entities/Player\";\r\nimport {Piece} from \"../entities/Piece\";\r\nimport {factory} from \"../logging/ConfigLog4j\";\r\nimport {Actions} from \"../enums/Actions\";\r\nimport {Move} from \"./Move\";\r\nimport {AbstractRules} from \"./AbstractRules\";\r\nimport {Scheduler} from \"../rules/Scheduler\";\r\nimport {Dice} from \"../entities/Dice\";\r\nimport {ActiveBoard} from \"../entities/ActiveBoard\";\r\nimport {HomeBoard} from \"../entities/HomeBoard\";\r\nimport {OnWayOutBoard} from \"../entities/OnWayOutBoard\";\r\nimport {ExitedBoard} from \"../entities/ExitedBoard\";\r\nimport {HomeRules} from \"./HomeRules\";\r\nimport {ActiveRules} from \"./ActiveRules\";\r\nimport {OnWayOutRules} from \"./OnWayOutRules\";\r\nimport {ExitedRules} from \"./ExitedRules\";\r\nimport {States} from \"../enums/States\";\r\nimport {AllPossibleMoves} from \"./AllPossibleMoves\";\r\nimport {Board} from \"../entities/Board\";\r\n\r\n\r\n    const log = factory.getLogger(\"model.Rules\");\r\n\r\n    export class Rules {\r\n    private homeMove: HomeRules;\r\n    private activeMove: ActiveRules;\r\n    private onWayOutMove: OnWayOutRules;\r\n    private exitedMove: ExitedRules;\r\n    private signal: Phaser.Signal;\r\n    private rollCounter = 0;\r\n    private schedule: Scheduler;\r\n    private dice: Dice;\r\n    private allPossibleMoves: AllPossibleMoves;\r\n\r\n    constructor(signal: Phaser.Signal, schedule: Scheduler, dice: Dice, activeBoard: ActiveBoard,\r\n    homeBoard: HomeBoard, onWayOutBoard: OnWayOutBoard, exitedBoard: ExitedBoard) {\r\n        this.activeMove = new ActiveRules(dice, schedule, activeBoard);\r\n        this.homeMove = new HomeRules(dice, schedule, homeBoard);\r\n        this.onWayOutMove = new OnWayOutRules(dice, schedule, onWayOutBoard);\r\n        this.exitedMove = new ExitedRules(dice, schedule, exitedBoard);\r\n        this.schedule = schedule;\r\n        this.signal = signal;\r\n        this.dice = dice;\r\n        this.allPossibleMoves = new AllPossibleMoves();\r\n    }\r\n\r\n    public getOnWayOutBoard(): Board {\r\n        return this.onWayOutMove.getBoard();\r\n    }\r\n\r\n    public getActiveBoard(): Board {\r\n        return this.activeMove.getBoard();\r\n    }\r\n\r\n    public getHomeBoard(): Board {\r\n        return this.homeMove.getBoard();\r\n    }\r\n\r\n    public generateAllPossibleMoves(player: Player): AllPossibleMoves {\r\n        this.allPossibleMoves.activeMoves = this.activeMove.generateMoves(player);\r\n        this.allPossibleMoves.homeMoves = this.homeMove.generateMoves(player);\r\n        this.allPossibleMoves.onWayOutMoves = this.onWayOutMove.generateMoves(player);\r\n        return this.allPossibleMoves;\r\n    }\r\n\r\n    public generatePieceMovement(dieUniqueIds: string[], piece: Piece): Move {\r\n        switch (piece.state) {\r\n            case States.Active:\r\n                return this.activeMove.generateActivePieceMovement(dieUniqueIds, piece);\r\n            case States.AtHome:\r\n                return this.homeMove.generateHomePieceMovement(dieUniqueIds, piece);\r\n            case States.onWayOut:\r\n                return this.onWayOutMove.generateOnWayOutPieceMovement(dieUniqueIds, piece);\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    public addSpentMovesBackToPool(moves: Move[]): void {\r\n\r\n        let activeMoves: Move[] = [];\r\n        let homeMoves: Move[] = [];\r\n        let onWayOutMoves: Move[] = [];\r\n\r\n        for (let move of moves) {\r\n            if (move.state === States.Active) {\r\n                activeMoves.push(move);\r\n            }else if (move.state === States.AtHome) {\r\n                homeMoves.push(move);\r\n            }else if (move.state === States.onWayOut) {\r\n                onWayOutMoves.push(move);\r\n            }\r\n        }\r\n\r\n        if (activeMoves.length > 0) {\r\n            this.activeMove.addSpentRulesBackToPool(activeMoves);\r\n        }\r\n        if (homeMoves.length > 0) {\r\n            this.homeMove.addSpentRulesBackToPool(homeMoves);\r\n        }\r\n        if (onWayOutMoves.length > 0) {\r\n            this.onWayOutMove.addSpentRulesBackToPool(moves);\r\n        }\r\n    }\r\n\r\n    public getUniqueIdCollision(uniqueId: string, index: number): string {\r\n        return this.activeMove.getUniqueIdCollision(uniqueId, index);\r\n    }\r\n\r\n    public decodeMove(move: Move): string {\r\n        switch (move.state) {\r\n            case States.Active:\r\n            return this.decodeActiveMove(move);\r\n            case States.AtHome:\r\n            return this.decodeHomeMove(move);\r\n            case States.onWayOut:\r\n            return this.decodeOnWayOutMove(move);\r\n            default:\r\n            return \"Unexpected\";\r\n\r\n        }\r\n    }\r\n\r\n    public checkBoardConsistencies(): void {\r\n        let activePieces = this.activeMove.getBoard().board.size();\r\n        let homePieces = this.homeMove.getBoard().board.size();\r\n        let onWayOutPieces = this.onWayOutMove.getBoard().board.size() ;\r\n        let exitedPieces = this.exitedMove.getBoard().board.size();\r\n        let totalPieces = activePieces + homePieces + onWayOutPieces + exitedPieces;\r\n\r\n        let playerActivePieces = 0;\r\n        let playerHomePieces = 0;\r\n        let playerOnwayoutPieces = 0;\r\n        let playerExitPieces = 0;\r\n\r\n        for (let player of this.schedule.players) {\r\n            playerActivePieces += player.activePieceCount();\r\n            playerHomePieces += player.homePieceCount();\r\n            playerOnwayoutPieces += player.onwayoutCount();\r\n            playerExitPieces += player.exitPieceCount();\r\n        }\r\n\r\n           if (totalPieces !== 16) {\r\n            log.debug(\"Total Pieces mismatch!!! active: \" + activePieces + \" home: \" + homePieces + \" onwayOut: \" + onWayOutPieces + \" exited: \" + exitedPieces);\r\n           }else {\r\n               // log.debug(\"active: \" + activePieces + \" home: \" + homePieces + \" onwayOut: \" + onWayOutPieces + \" exited: \" + exitedPieces);\r\n           }\r\n\r\n           if (playerActivePieces === activePieces && playerHomePieces === homePieces && playerOnwayoutPieces === onWayOutPieces && playerExitPieces === exitedPieces) {\r\n            log.debug(\"MATCH: \" + this.schedule.players.length);\r\n            log.debug(\"active: \" + activePieces + \" home: \" + homePieces + \" onwayOut: \" + onWayOutPieces + \" exited: \" + exitedPieces);\r\n            log.debug(\"active: \" + playerActivePieces + \" home: \" + playerHomePieces + \" onwayOut: \" + playerOnwayoutPieces + \" exited: \" + playerExitPieces);\r\n           }else {\r\n            log.debug(\"MISMATCH!!!!!!!!!: \" + + this.schedule.players.length);\r\n            log.debug(\"active: \" + activePieces + \" home: \" + homePieces + \" onwayOut: \" + onWayOutPieces + \" exited: \" + exitedPieces);\r\n            log.debug(\"active: \" + playerActivePieces + \" home: \" + playerHomePieces + \" onwayOut: \" + playerOnwayoutPieces + \" exited: \" + playerExitPieces);\r\n           }\r\n    }\r\n\r\n    private decodeActiveMove(move: Move): string {\r\n        if (move.action === Actions.DO_NOTHING) {\r\n            return \"DO NOTHING\";\r\n        }else if (move.action === Actions.EXIT) {\r\n            return \"EXIT \" + move.pieceId;\r\n        }else if (move.action === Actions.PLAY) {\r\n            return \"ACTIVE PLAY \" + this.dice.getDieValueArrayByUniqueId(move.diceId).join() + \" ON \" + move.pieceId;\r\n        }else if (move.action === Actions.ROLL) {\r\n            return \"ROLL\";\r\n        }else if (move.action === Actions.SKIP) {\r\n            return \"ACTIVE SKIP\";\r\n        }else {\r\n            return \"DO NOTHING\";\r\n        }\r\n    }\r\n\r\n    private decodeHomeMove(move: Move): string {\r\n        if (move.action === Actions.DO_NOTHING) {\r\n            return \"DO NOTHING\";\r\n        }else if (move.action === Actions.EXIT) {\r\n            return \"EXIT \" + move.pieceId;\r\n        }else if (move.action === Actions.PLAY) {\r\n            return \"HOME PLAY \" + this.dice.getDieValueArrayByUniqueId(move.diceId).join() + \" ON \" + move.pieceId;\r\n        }else if (move.action === Actions.ROLL) {\r\n            return \"ROLL\";\r\n        }else if (move.action === Actions.SKIP) {\r\n            return \"HOME SKIP\";\r\n        }else {\r\n            return \"DO NOTHING\";\r\n        }\r\n    }\r\n\r\n    private decodeOnWayOutMove(move: Move): string {\r\n        if (move.action === Actions.DO_NOTHING) {\r\n            return \"DO NOTHING\";\r\n        }else if (move.action === Actions.EXIT) {\r\n            return \"EXIT \" + move.pieceId;\r\n        }else if (move.action === Actions.PLAY) {\r\n            return \"ONWAYOUT PLAY \" + this.dice.getDieValueArrayByUniqueId(move.diceId).join() + \" ON \" + move.pieceId;\r\n        }else if (move.action === Actions.ROLL) {\r\n            return \"ROLL\";\r\n        }else if (move.action === Actions.SKIP) {\r\n            return \"ONWAYOUT SKIP\";\r\n        }else {\r\n            return \"DO NOTHING\";\r\n        }\r\n    }\r\n\r\n}\r\n","/// <reference path = \"../../node_modules/phaser/typescript/phaser.d.ts\" />\r\nimport * as Collections from \"typescript-collections\";\r\nimport {Player} from \"../entities/Player\";\r\nimport {factory} from \"../logging/ConfigLog4j\";\r\nimport {Piece} from \"../entities/Piece\";\r\nimport {Dice} from \"../entities/Dice\";\r\n\r\nconst log = factory.getLogger(\"model.Scheduler\");\r\n\r\nexport class Scheduler {\r\n    public schedule: Collections.Queue<Player>;\r\n    public allPieces: Collections.Dictionary<String, Piece>;\r\n    public players: Player[] = [];\r\n    private dice: Dice;\r\n    constructor(dice: Dice) {\r\n        this.schedule = new Collections.Queue<Player>();\r\n        this.allPieces = new Collections.Dictionary<String, Piece>();\r\n        this.dice = dice;\r\n    }\r\n\r\n    public getNextPlayer(): Player {\r\n        let player = this.schedule.peek();\r\n        if (player.previousDoubleSix === false) {\r\n            this.dice.consumeDice();\r\n            player = this.schedule.dequeue();\r\n            player.unselectAllPiece();\r\n            player.turn = false;\r\n            this.schedule.enqueue(player);\r\n            player = this.schedule.peek();\r\n            player.selectAllPiece();\r\n            player.turn = true;\r\n        }else {\r\n            // Returning same player. Set value back to false\r\n            player.previousDoubleSix =  false;\r\n        }\r\n        return player;\r\n    }\r\n\r\n    public enqueue(player: Player): void {\r\n        if (this.schedule.isEmpty()) {\r\n            player.selectAllPiece();\r\n            this.schedule.enqueue(player);\r\n        }else {\r\n            player.unselectAllPiece();\r\n            this.schedule.enqueue(player);\r\n        }\r\n        for (let piece of player.pieces){\r\n            this.allPieces.setValue(piece.uniqueId, piece);\r\n        }\r\n        this.players.push(player);\r\n    }\r\n\r\n    public getPieceByUniqueId(uniqueId: string): Piece {\r\n        return this.allPieces.getValue(uniqueId);\r\n    }\r\n\r\n    public getCurrentPlayer(): Player {\r\n        return (this.schedule.peek());\r\n    }\r\n\r\n    public getPieceOwner(uniqueId: string): Player {\r\n        let owner: Player = null;\r\n        this.schedule.forEach(function(player){\r\n            if (player.pieceBelongsToMe(uniqueId)) {\r\n                owner = player;\r\n            }\r\n        });\r\n        return owner;\r\n    }\r\n}\r\n","/// <reference path = \"../../node_modules/phaser/typescript/phaser.d.ts\" />\r\n/// <reference path = \"../../node_modules/angular2-uuid/index.d.ts\" />\r\nimport { UUID } from \"angular2-uuid\";\r\nimport {Piece} from \"../entities/Piece\";\r\nimport {AIPlayer} from \"../entities/AIPlayer\";\r\nimport {Player} from \"../entities/Player\";\r\nimport {RegularPlayer} from \"../entities/RegularPlayer\";\r\nimport {ColorType} from \"../enums/ColorType\";\r\nimport {ActiveBoard} from \"../entities/ActiveBoard\";\r\nimport {HomeBoard} from \"../entities/HomeBoard\";\r\nimport {OnWayOutBoard} from \"../entities/OnWayOutBoard\";\r\nimport {ExitedBoard} from \"../entities/ExitedBoard\";\r\nimport {AllPossibleMoves} from \"../rules/AllPossibleMoves\";\r\nimport {Dice} from \"../entities/Dice\";\r\nimport {Rules} from \"../rules/Rules\";\r\nimport {factory} from \"../logging/ConfigLog4j\";\r\nimport {Scheduler} from \"../rules/Scheduler\";\r\nimport {RuleEnforcer} from \"../rules/RuleEnforcer\";\r\nimport * as Paths from \"../entities/Paths\";\r\nimport {States} from \"../enums/States\";\r\nimport {Board} from \"../entities/Board\";\r\nimport {PiecePosition} from \"../entities/PiecePosition\";\r\nimport {Move} from \"../rules/Move\";\r\n\r\n\r\nconst log = factory.getLogger(\"model.Game\");\r\n\r\nexport class Game extends Phaser.State {\r\n    public playerOne: Player;\r\n    public playerTwo: Player;\r\n    public playerThree: RegularPlayer;\r\n    public playerFour: RegularPlayer;\r\n    public dice: Dice;\r\n    public signal: Phaser.Signal;\r\n    public enforcer: RuleEnforcer;\r\n    public scheduler: Scheduler;\r\n\r\n    public create() {\r\n        this.add.sprite(0, 0, \"board\");\r\n        let playerOnecolors = [ColorType.Red, ColorType.Blue];\r\n        let playerTwocolors = [ColorType.Yellow, ColorType.Green];\r\n        // let playerThreecolors = [ColorType.Yellow];\r\n        // let playerFourcolors = [ColorType.Green];\r\n        this.signal = new Phaser.Signal();\r\n        let activeboard: ActiveBoard = new ActiveBoard(this.signal);\r\n        let homeboard: HomeBoard = new HomeBoard(this.signal);\r\n        let onWayOutBoard: OnWayOutBoard = new OnWayOutBoard(this.signal);\r\n        let exitedBoard: ExitedBoard = new ExitedBoard(this.signal);\r\n        let currentPossibleMovements: AllPossibleMoves = new AllPossibleMoves();\r\n\r\n\r\n        let playBtn = this.make.button(763, 540, \"play\", this.playDice, this, 2, 1, 0);\r\n        let buttonGroup = this.add.group();\r\n        buttonGroup.add(playBtn);\r\n        let diceBtn = this.make.button(770, 440, \"diceBtn\", this.rollDice, this, 2, 1, 0);\r\n        diceBtn.alpha = 0.5;\r\n        diceBtn.scale.x = 0.2;\r\n        diceBtn.scale.y = 0.2;\r\n        buttonGroup.add(diceBtn);\r\n        this.game.stage.disableVisibilityChange = true;\r\n        let dieOneUUID = UUID.UUID();\r\n        let dieTwoUUID = UUID.UUID();\r\n        this.dice = new Dice(this.game, \"die\", this.signal, dieOneUUID, dieTwoUUID);\r\n        this.scheduler = new Scheduler(this.dice);\r\n        this.enforcer = new RuleEnforcer(this.signal, this.scheduler, this.dice, activeboard, homeboard,\r\n        onWayOutBoard, exitedBoard, currentPossibleMovements);\r\n        this.playerOne = new AIPlayer(this.game, \"PlayerOne\", UUID.UUID(), true, playerOnecolors, this.signal, this.enforcer);\r\n        this.playerTwo = new AIPlayer(this.game, \"PlayerTwo\", UUID.UUID(), false, playerTwocolors, this.signal, this.enforcer);\r\n        // this.playerThree = new AIPlayer(this.game, \"PlayerThree\", UUID.UUID(), true, playerThreecolors, this.signal, this.enforcer);\r\n        // this.playerFour = new AIPlayer(this.game, \"PlayerFour\", UUID.UUID(), true, playerFourcolors, this.signal, this.enforcer);\r\n        this.scheduler.enqueue(this.playerOne);\r\n        this.scheduler.enqueue(this.playerTwo);\r\n        // this.scheduler.enqueue(this.playerThree);\r\n        // this.scheduler.enqueue(this.playerFour);\r\n        this.dice.setDicePlayerId(this.scheduler.getCurrentPlayer().playerId);\r\n\r\n        // All Player pieces must be added to homeboard\r\n        for (let piece of this.playerOne.pieces){\r\n            homeboard.addPieceToHomeBoard(piece);\r\n        }\r\n        for (let piece of this.playerTwo.pieces){\r\n            homeboard.addPieceToHomeBoard(piece);\r\n        }\r\n\r\n         /*\r\n        for (let piece of this.playerThree.pieces){\r\n            homeboard.addPieceToHomeBoard(piece);\r\n        }\r\n        for (let piece of this.playerFour.pieces){\r\n            homeboard.addPieceToHomeBoard(piece);\r\n        }\r\n\r\n        for (let x = 2; x < this.playerOne.pieces.length; x++) {\r\n            homeboard.removePieceFromHomeBoard(this.playerOne.pieces[x]);\r\n            exitedBoard.addPieceToActiveBoard(this.playerOne.pieces[x]);\r\n            this.playerOne.pieces[x].setExited();\r\n            this.playerOne.pieces[x].visible = false;\r\n        }\r\n\r\n        let p1 = this.playerOne.pieces[0];\r\n        homeboard.removePieceFromHomeBoard(p1);\r\n        // this.setOnWayOutPieceParameters(p1, 2, States.onWayOut, onWayOutBoard);\r\n        this.setActivePieceParameters(p1, 48, States.Active, activeboard);\r\n\r\n        let p2 = this.playerOne.pieces[1];\r\n        homeboard.removePieceFromHomeBoard(p2);\r\n        this.setOnWayOutPieceParameters(p2, 3, States.onWayOut, onWayOutBoard);\r\n        // this.setActivePieceParameters(p2, 38, States.Active, activeboard);\r\n        \r\n        let p3 = this.playerTwo.pieces[0];\r\n        homeboard.removePieceFromHomeBoard(p3);\r\n        // this.setOnWayOutPieceParameters(p3, 4, States.onWayOut, onWayOutBoard);\r\n        this.setActivePieceParameters(p3, 50, States.Active, activeboard);\r\n\r\n\r\n        let p4 = this.playerTwo.pieces[1];\r\n        homeboard.removePieceFromHomeBoard(p4);\r\n        this.setOnWayOutPieceParameters(p4, 3, States.onWayOut, onWayOutBoard);\r\n        // this.setActivePieceParameters(p4, 43, States.Active, activeboard);\r\n\r\n        let p5 = this.playerTwo.pieces[7];\r\n        homeboard.removePieceFromHomeBoard(p5);\r\n        // this.setOnWayOutPieceParameters(p5, 3, States.onWayOut, onWayOutBoard);\r\n        this.setActivePieceParameters(p5, 1, States.Active, activeboard);\r\n        */\r\n\r\n        if (this.scheduler.getCurrentPlayer().isAI) {\r\n            this.signal.dispatch(\"aiRollDice\", this.dice, this.scheduler.getCurrentPlayer().playerId);\r\n        }\r\n\r\n        this.enforcer.rule.checkBoardConsistencies();\r\n\r\n\r\n    }\r\n\r\n    public rollDice(): void {\r\n        this.dice.setDicePlayerId(this.enforcer.scheduler.getCurrentPlayer().playerId);\r\n        this.enforcer.scheduler.getCurrentPlayer().roll(this.dice, 3, 2);\r\n    }\r\n\r\n    public playDice(): void {\r\n        let dieIds = this.dice.getSelectedDiceUniqueIds();\r\n        let player = this.scheduler.getCurrentPlayer();\r\n\r\n        if (player.currentSelectedPiece !== null && (this.dice.dieOne.isSelected() || this.dice.dieTwo.isSelected())) {\r\n            this.enforcer.generatePieceMovement(dieIds, player.currentSelectedPiece);\r\n        }else {\r\n            log.debug(\"No die selected or no piece selected\");\r\n        }\r\n    }\r\n\r\n    public update(): void {\r\n        //\r\n    }\r\n    private setActivePieceParameters(piece: Piece, index: number, state: States, board: Board): void {\r\n        let path = new Paths.ActivePath();\r\n        let position = path.getPiecePostionByIndex(index);\r\n        piece.setParameters(position.x, position.y, index, state);\r\n        board.board.setValue(piece.uniqueId, index);\r\n    }\r\n\r\n    private setOnWayOutPieceParameters(piece: Piece, index: number, state: States, board: Board): void {\r\n        let path = new Paths.OnWayOutPaths();\r\n        let position = path.getPiecePostionByIndex(piece, index);\r\n        piece.setParameters(position.x, position.y, index, state);\r\n        board.board.setValue(piece.uniqueId, index);\r\n    }\r\n\r\n}\r\n","/// <reference path = \"../../node_modules/phaser/typescript/phaser.d.ts\" />\r\n\r\nexport class Preloader extends Phaser.State {\r\n\r\n    public preload() {\r\n        this.load.spritesheet(\"red_piece\", \"images/red.png\", 42, 42, 2);\r\n        this.load.spritesheet(\"blue_piece\", \"images/blue.png\", 42, 42, 2);\r\n        this.load.spritesheet(\"green_piece\", \"images/green.png\", 42, 42, 2);\r\n        this.load.spritesheet(\"yellow_piece\", \"images/yellow.png\", 42, 42, 2);\r\n        this.load.spritesheet(\"die\", \"images/dice.png\", 64, 64);\r\n        this.load.image(\"diceBtn\", \"images/dicebtn.png\");\r\n        this.load.image(\"play\", \"images/playbutton.png\");\r\n        this.load.image(\"board\", \"images/board.jpg\");\r\n    }\r\n\r\n    public create() {\r\n        this.startGame();\r\n    }\r\n\r\n    public startGame() {\r\n        this.game.state.start(\"Game\", true, false);\r\n    }\r\n\r\n}\r\n"]}