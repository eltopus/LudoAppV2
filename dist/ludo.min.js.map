{"version":3,"sources":["node_modules/browser-pack/_prelude.js","source/entities/Piece.ts","source/entities/PieceFactory.ts","source/entities/Player.ts","source/enums/ColorType.ts","source/main.ts","source/states/Game.ts","source/states/Preloader.ts"],"names":["f","exports","module","define","amd","g","window","global","self","this","ludo","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","Piece","_super","game","x","y","imageId","pieceId","color","playerId","_this","defaultX","defaultY","physics","enable","Phaser","Physics","ARCADE","frame","group","add","__extends","Sprite","Piece_1","ColorType_1","PieceFactory","prototype","getPiece","colorType","type","getImageKey","ColorType","Red","Blue","Green","Yellow","PieceFactory_1","Player","name","turn","colorTypes","pieces","Array","playerPieces","concat","Preloader_1","Game_1","LudoGame","AUTO","state","Preloader","Game","start","onload","Player_1","create","sprite","redPlayer","console","log","State","preload","load","spritesheet","image","startGame"],"mappings":"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","file":"ludo.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/// <reference path = \"../../node_modules/phaser/typescript/phaser.d.ts\" />\r\nimport {PieceInterface} from \"../interfaces/PieceInterface\";\r\nimport {ColorType} from \"../enums/ColorType\";\r\n\r\nexport class Piece extends Phaser.Sprite implements PieceInterface{\r\n\r\n    public defaultX: number;\r\n    public defaultY: number;\r\n    public group: Phaser.Group;\r\n    public color: ColorType;\r\n    public playerId: string;\r\n\r\n    constructor(game: Phaser.Game, x: number, y: number, imageId: string, pieceId: string, color: ColorType, playerId: string){\r\n        super(game, x, y, imageId);\r\n        this.color = color;\r\n        this.defaultX = x;\r\n        this.defaultY = y;\r\n        this.playerId = playerId;\r\n        this.game.physics.enable(this, Phaser.Physics.ARCADE);\r\n        this.frame = 0;\r\n        this.group = this.game.add.group();\r\n        this.group.add(this);\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n","/// <reference path = \"../../node_modules/phaser/typescript/phaser.d.ts\" />\r\nimport {Piece} from \"../entities/Piece\";\r\nimport {ColorType} from \"../enums/ColorType\";\r\n\r\nexport abstract class PieceFactory {\r\n\r\n    private game: Phaser.Game;\r\n\r\n    constructor(game: Phaser.Game) {\r\n        this.game = game;\r\n    }\r\n\r\n    public getPiece(colorType: ColorType, playerId: string): Piece[] {\r\n\r\n        let type = this.getImageKey(colorType);\r\n        if (type === \"red_piece\") {\r\n            let redPieces = [\r\n                new Piece(this.game, 118, 72, type, \"1\", colorType, playerId),\r\n                new Piece(this.game, 72, 118, type, \"2\", colorType, playerId),\r\n                new Piece(this.game, 168, 118, type, \"3\", colorType, playerId),\r\n                new Piece(this.game, 120, 168, type, \"4\", colorType, playerId)\r\n            ];\r\n            return redPieces;\r\n        }else if (type === \"blue_piece\") {\r\n            let bluePieces = [\r\n                new Piece(this.game, 552, 72, type, \"5\", colorType, playerId),\r\n                new Piece(this.game, 503, 118, type, \"6\", colorType, playerId),\r\n                new Piece(this.game, 600, 118, type, \"7\", colorType, playerId),\r\n                new Piece(this.game, 552, 168, type, \"8\", colorType, playerId)\r\n            ];\r\n            return bluePieces;\r\n        }else if (type === \"yellow_piece\") {\r\n            let yellowPieces = [\r\n                new Piece(this.game, 552, 503, type, \"9\", colorType, playerId),\r\n                new Piece(this.game, 503, 552, type, \"10\", colorType, playerId),\r\n                new Piece(this.game, 600, 552, type, \"11\", colorType, playerId),\r\n                new Piece(this.game, 552, 600, type, \"12\", colorType, playerId)\r\n            ];\r\n            return yellowPieces;\r\n        }else if (type === \"green_piece\") {\r\n            let greenPieces = [\r\n                new Piece(this.game, 118, 503, type, \"13\", colorType, playerId),\r\n                new Piece(this.game, 72, 552, type, \"14\", colorType, playerId),\r\n                new Piece(this.game, 168, 552, type, \"15\", colorType, playerId),\r\n                new Piece(this.game, 118, 600, type, \"16\", colorType, playerId)\r\n            ];\r\n            return greenPieces;\r\n        }else {\r\n            return [];\r\n        }\r\n\r\n    }\r\n\r\n    private getImageKey(colorType: ColorType): string {\r\n\r\n        switch (colorType) {\r\n            case ColorType.Red:\r\n                return \"red_piece\";\r\n            case ColorType.Blue:\r\n                return \"blue_piece\";\r\n            case ColorType.Green:\r\n                return \"green_piece\";\r\n            case ColorType.Yellow:\r\n                return \"yellow_piece\";\r\n            default:\r\n                return \"undefined\";\r\n        }\r\n    }\r\n\r\n}\r\n","/// <reference path = \"../../node_modules/phaser/typescript/phaser.d.ts\" />\r\nimport {Piece} from \"../entities/Piece\";\r\nimport {PieceFactory} from \"../entities/PieceFactory\";\r\nimport {ColorType} from \"../enums/ColorType\";\r\n\r\nexport class Player extends PieceFactory {\r\n    public name: string;\r\n    public playerId: string;\r\n    public turn: boolean;\r\n    public pieces: Piece[];\r\n\r\n    constructor(game: Phaser.Game, name: string, playerId: string, turn: boolean, colorTypes: ColorType[]) {\r\n        super(game);\r\n        this.name = name;\r\n        this.playerId = playerId;\r\n        this.turn = turn;\r\n        this.pieces = new Array();\r\n\r\n        for (let x = 0; x < colorTypes.length; x++){\r\n            let playerPieces = this.getPiece(colorTypes[x], playerId);\r\n            this.pieces.concat(playerPieces);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n","\r\nexport enum ColorType { Red, Blue, Green, Yellow }\r\n","/// <reference path = \"../node_modules/phaser/typescript/phaser.d.ts\" />\r\nimport {Preloader} from \"./states/Preloader\";\r\nimport {Game} from \"./states/Game\";\r\n\r\nexport class LudoGame extends Phaser.Game {\r\n    constructor() {\r\n        super(900, 720, Phaser.AUTO, \"gameContainer\");\r\n        this.state.add(\"Preloader\", Preloader, false);\r\n        this.state.add(\"Game\", Game, false);\r\n        this.state.start(\"Preloader\"); \r\n   }\r\n}\r\n\r\nwindow.onload = function() {\r\n    let game = new LudoGame();\r\n};\r\n","/// <reference path = \"../../node_modules/phaser/typescript/phaser.d.ts\" />\r\nimport {Piece} from \"../entities/Piece\";\r\nimport {Player} from \"../entities/Player\";\r\nimport {ColorType} from \"../enums/ColorType\";\r\n\r\nexport class Game extends Phaser.State {\r\n\r\n    public create() {\r\n        this.add.sprite(0, 0, \"board\");\r\n        let colorTypes = [ColorType.Red, ColorType.Blue];\r\n        let redPlayer: Player = new Player(this.game, \"RedPlayer\", \"x501RedPlayer\", true, colorTypes);\r\n       \r\n\r\n        let pieces: Piece[] = redPlayer.pieces;\r\n\r\n        for (let x = 0; x < pieces.length; x++) {\r\n            console.log(\"PlayerPieces \" + pieces[x].x + \" \" + pieces[x].y + \" \" + pieces[x].playerId);\r\n        }\r\n    }\r\n}\r\n","/// <reference path = \"../../node_modules/phaser/typescript/phaser.d.ts\" />\r\n\r\nexport class Preloader extends Phaser.State {\r\n\r\n    public preload() {\r\n        this.load.spritesheet(\"red_piece\", \"images/red.png\", 42, 42, 2);\r\n        this.load.spritesheet(\"blue_piece\", \"images/blue.png\", 42, 42, 2);\r\n        this.load.spritesheet(\"green_piece\", \"images/green.png\", 42, 42, 2);\r\n        this.load.spritesheet(\"yellow_piece\", \"images/yellow.png\", 42, 42, 2);\r\n        this.load.image(\"board\", \"images/board.jpg\");\r\n    }\r\n\r\n    public create() {\r\n        this.startGame();\r\n    }\r\n\r\n    public startGame() {\r\n        this.game.state.start(\"Game\", true, false);\r\n    }\r\n\r\n}"]}